// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: backup/backup.proto

package backup

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Backup_Save_FullMethodName    = "/yuhaiin.backup.backup/save"
	Backup_Get_FullMethodName     = "/yuhaiin.backup.backup/get"
	Backup_Backup_FullMethodName  = "/yuhaiin.backup.backup/backup"
	Backup_Restore_FullMethodName = "/yuhaiin.backup.backup/restore"
)

// BackupClient is the client API for Backup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackupClient interface {
	Save(ctx context.Context, in *BackupOption, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Get(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BackupOption, error)
	Backup(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Restore(ctx context.Context, in *RestoreOption, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type backupClient struct {
	cc grpc.ClientConnInterface
}

func NewBackupClient(cc grpc.ClientConnInterface) BackupClient {
	return &backupClient{cc}
}

func (c *backupClient) Save(ctx context.Context, in *BackupOption, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Backup_Save_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupClient) Get(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BackupOption, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BackupOption)
	err := c.cc.Invoke(ctx, Backup_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupClient) Backup(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Backup_Backup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupClient) Restore(ctx context.Context, in *RestoreOption, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Backup_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackupServer is the server API for Backup service.
// All implementations must embed UnimplementedBackupServer
// for forward compatibility.
type BackupServer interface {
	Save(context.Context, *BackupOption) (*emptypb.Empty, error)
	Get(context.Context, *emptypb.Empty) (*BackupOption, error)
	Backup(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	Restore(context.Context, *RestoreOption) (*emptypb.Empty, error)
	mustEmbedUnimplementedBackupServer()
}

// UnimplementedBackupServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBackupServer struct{}

func (UnimplementedBackupServer) Save(context.Context, *BackupOption) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedBackupServer) Get(context.Context, *emptypb.Empty) (*BackupOption, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedBackupServer) Backup(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Backup not implemented")
}
func (UnimplementedBackupServer) Restore(context.Context, *RestoreOption) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (UnimplementedBackupServer) mustEmbedUnimplementedBackupServer() {}
func (UnimplementedBackupServer) testEmbeddedByValue()                {}

// UnsafeBackupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackupServer will
// result in compilation errors.
type UnsafeBackupServer interface {
	mustEmbedUnimplementedBackupServer()
}

func RegisterBackupServer(s grpc.ServiceRegistrar, srv BackupServer) {
	// If the following call pancis, it indicates UnimplementedBackupServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Backup_ServiceDesc, srv)
}

func _Backup_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupOption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backup_Save_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupServer).Save(ctx, req.(*BackupOption))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backup_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backup_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupServer).Get(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backup_Backup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupServer).Backup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backup_Backup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupServer).Backup(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backup_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreOption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backup_Restore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupServer).Restore(ctx, req.(*RestoreOption))
	}
	return interceptor(ctx, in, info, handler)
}

// Backup_ServiceDesc is the grpc.ServiceDesc for Backup service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Backup_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yuhaiin.backup.backup",
	HandlerType: (*BackupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "save",
			Handler:    _Backup_Save_Handler,
		},
		{
			MethodName: "get",
			Handler:    _Backup_Get_Handler,
		},
		{
			MethodName: "backup",
			Handler:    _Backup_Backup_Handler,
		},
		{
			MethodName: "restore",
			Handler:    _Backup_Restore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backup/backup.proto",
}
