// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.0
// 	protoc        v4.25.3
// source: config/listener/listener.proto

package listener

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TcpUdpControl int32

const (
	TcpUdpControl_tcp_udp_control_all TcpUdpControl = 0
	TcpUdpControl_disable_tcp         TcpUdpControl = 1
	TcpUdpControl_disable_udp         TcpUdpControl = 2
)

// Enum value maps for TcpUdpControl.
var (
	TcpUdpControl_name = map[int32]string{
		0: "tcp_udp_control_all",
		1: "disable_tcp",
		2: "disable_udp",
	}
	TcpUdpControl_value = map[string]int32{
		"tcp_udp_control_all": 0,
		"disable_tcp":         1,
		"disable_udp":         2,
	}
)

func (x TcpUdpControl) Enum() *TcpUdpControl {
	p := new(TcpUdpControl)
	*p = x
	return p
}

func (x TcpUdpControl) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TcpUdpControl) Descriptor() protoreflect.EnumDescriptor {
	return file_config_listener_listener_proto_enumTypes[0].Descriptor()
}

func (TcpUdpControl) Type() protoreflect.EnumType {
	return &file_config_listener_listener_proto_enumTypes[0]
}

func (x TcpUdpControl) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TcpUdpControl.Descriptor instead.
func (TcpUdpControl) EnumDescriptor() ([]byte, []int) {
	return file_config_listener_listener_proto_rawDescGZIP(), []int{0}
}

type TunEndpointDriver int32

const (
	Tun_fdbased       TunEndpointDriver = 0
	Tun_channel       TunEndpointDriver = 1
	Tun_system_gvisor TunEndpointDriver = 2
)

// Enum value maps for TunEndpointDriver.
var (
	TunEndpointDriver_name = map[int32]string{
		0: "fdbased",
		1: "channel",
		2: "system_gvisor",
	}
	TunEndpointDriver_value = map[string]int32{
		"fdbased":       0,
		"channel":       1,
		"system_gvisor": 2,
	}
)

func (x TunEndpointDriver) Enum() *TunEndpointDriver {
	p := new(TunEndpointDriver)
	*p = x
	return p
}

func (x TunEndpointDriver) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TunEndpointDriver) Descriptor() protoreflect.EnumDescriptor {
	return file_config_listener_listener_proto_enumTypes[1].Descriptor()
}

func (TunEndpointDriver) Type() protoreflect.EnumType {
	return &file_config_listener_listener_proto_enumTypes[1]
}

func (x TunEndpointDriver) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TunEndpointDriver.Descriptor instead.
func (TunEndpointDriver) EnumDescriptor() ([]byte, []int) {
	return file_config_listener_listener_proto_rawDescGZIP(), []int{14, 0}
}

type InboundConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HijackDns       bool `protobuf:"varint,2,opt,name=hijack_dns,proto3" json:"hijack_dns,omitempty"`
	HijackDnsFakeip bool `protobuf:"varint,3,opt,name=hijack_dns_fakeip,proto3" json:"hijack_dns_fakeip,omitempty"`
	// Deprecated: Marked as deprecated in config/listener/listener.proto.
	Servers  map[string]*Protocol `protobuf:"bytes,5,rep,name=servers,proto3" json:"servers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Inbounds map[string]*Inbound  `protobuf:"bytes,1,rep,name=inbounds,proto3" json:"inbounds,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *InboundConfig) Reset() {
	*x = InboundConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_listener_listener_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InboundConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InboundConfig) ProtoMessage() {}

func (x *InboundConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_listener_listener_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InboundConfig.ProtoReflect.Descriptor instead.
func (*InboundConfig) Descriptor() ([]byte, []int) {
	return file_config_listener_listener_proto_rawDescGZIP(), []int{0}
}

func (x *InboundConfig) GetHijackDns() bool {
	if x != nil {
		return x.HijackDns
	}
	return false
}

func (x *InboundConfig) GetHijackDnsFakeip() bool {
	if x != nil {
		return x.HijackDnsFakeip
	}
	return false
}

// Deprecated: Marked as deprecated in config/listener/listener.proto.
func (x *InboundConfig) GetServers() map[string]*Protocol {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *InboundConfig) GetInbounds() map[string]*Inbound {
	if x != nil {
		return x.Inbounds
	}
	return nil
}

type Inbound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	Enabled bool   `protobuf:"varint,14,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Types that are assignable to Network:
	//
	//	*Inbound_Empty
	//	*Inbound_Tcpudp
	//	*Inbound_Quic
	Network   isInbound_Network `protobuf_oneof:"network"`
	Transport []*Transport      `protobuf:"bytes,2,rep,name=transport,proto3" json:"transport,omitempty"`
	// Types that are assignable to Protocol:
	//
	//	*Inbound_Http
	//	*Inbound_Socks5
	//	*Inbound_Yuubinsya
	//	*Inbound_Mix
	//	*Inbound_Socks4A
	//	*Inbound_Tproxy
	//	*Inbound_Redir
	//	*Inbound_Tun
	Protocol isInbound_Protocol `protobuf_oneof:"protocol"`
}

func (x *Inbound) Reset() {
	*x = Inbound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_listener_listener_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Inbound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Inbound) ProtoMessage() {}

func (x *Inbound) ProtoReflect() protoreflect.Message {
	mi := &file_config_listener_listener_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Inbound.ProtoReflect.Descriptor instead.
func (*Inbound) Descriptor() ([]byte, []int) {
	return file_config_listener_listener_proto_rawDescGZIP(), []int{1}
}

func (x *Inbound) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Inbound) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (m *Inbound) GetNetwork() isInbound_Network {
	if m != nil {
		return m.Network
	}
	return nil
}

func (x *Inbound) GetEmpty() *Empty {
	if x, ok := x.GetNetwork().(*Inbound_Empty); ok {
		return x.Empty
	}
	return nil
}

func (x *Inbound) GetTcpudp() *Tcpudp {
	if x, ok := x.GetNetwork().(*Inbound_Tcpudp); ok {
		return x.Tcpudp
	}
	return nil
}

func (x *Inbound) GetQuic() *Quic2 {
	if x, ok := x.GetNetwork().(*Inbound_Quic); ok {
		return x.Quic
	}
	return nil
}

func (x *Inbound) GetTransport() []*Transport {
	if x != nil {
		return x.Transport
	}
	return nil
}

func (m *Inbound) GetProtocol() isInbound_Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (x *Inbound) GetHttp() *Http {
	if x, ok := x.GetProtocol().(*Inbound_Http); ok {
		return x.Http
	}
	return nil
}

func (x *Inbound) GetSocks5() *Socks5 {
	if x, ok := x.GetProtocol().(*Inbound_Socks5); ok {
		return x.Socks5
	}
	return nil
}

func (x *Inbound) GetYuubinsya() *Yuubinsya {
	if x, ok := x.GetProtocol().(*Inbound_Yuubinsya); ok {
		return x.Yuubinsya
	}
	return nil
}

func (x *Inbound) GetMix() *Mixed {
	if x, ok := x.GetProtocol().(*Inbound_Mix); ok {
		return x.Mix
	}
	return nil
}

func (x *Inbound) GetSocks4A() *Socks4A {
	if x, ok := x.GetProtocol().(*Inbound_Socks4A); ok {
		return x.Socks4A
	}
	return nil
}

func (x *Inbound) GetTproxy() *Tproxy {
	if x, ok := x.GetProtocol().(*Inbound_Tproxy); ok {
		return x.Tproxy
	}
	return nil
}

func (x *Inbound) GetRedir() *Redir {
	if x, ok := x.GetProtocol().(*Inbound_Redir); ok {
		return x.Redir
	}
	return nil
}

func (x *Inbound) GetTun() *Tun {
	if x, ok := x.GetProtocol().(*Inbound_Tun); ok {
		return x.Tun
	}
	return nil
}

type isInbound_Network interface {
	isInbound_Network()
}

type Inbound_Empty struct {
	Empty *Empty `protobuf:"bytes,21,opt,name=empty,proto3,oneof"`
}

type Inbound_Tcpudp struct {
	Tcpudp *Tcpudp `protobuf:"bytes,15,opt,name=tcpudp,proto3,oneof"`
}

type Inbound_Quic struct {
	Quic *Quic2 `protobuf:"bytes,16,opt,name=quic,proto3,oneof"`
}

func (*Inbound_Empty) isInbound_Network() {}

func (*Inbound_Tcpudp) isInbound_Network() {}

func (*Inbound_Quic) isInbound_Network() {}

type isInbound_Protocol interface {
	isInbound_Protocol()
}

type Inbound_Http struct {
	Http *Http `protobuf:"bytes,3,opt,name=http,proto3,oneof"`
}

type Inbound_Socks5 struct {
	Socks5 *Socks5 `protobuf:"bytes,4,opt,name=socks5,proto3,oneof"`
}

type Inbound_Yuubinsya struct {
	Yuubinsya *Yuubinsya `protobuf:"bytes,7,opt,name=yuubinsya,proto3,oneof"`
}

type Inbound_Mix struct {
	Mix *Mixed `protobuf:"bytes,8,opt,name=mix,json=mixed,proto3,oneof"`
}

type Inbound_Socks4A struct {
	Socks4A *Socks4A `protobuf:"bytes,9,opt,name=socks4a,proto3,oneof"`
}

type Inbound_Tproxy struct {
	Tproxy *Tproxy `protobuf:"bytes,20,opt,name=tproxy,proto3,oneof"`
}

type Inbound_Redir struct {
	Redir *Redir `protobuf:"bytes,18,opt,name=redir,proto3,oneof"`
}

type Inbound_Tun struct {
	Tun *Tun `protobuf:"bytes,19,opt,name=tun,proto3,oneof"`
}

func (*Inbound_Http) isInbound_Protocol() {}

func (*Inbound_Socks5) isInbound_Protocol() {}

func (*Inbound_Yuubinsya) isInbound_Protocol() {}

func (*Inbound_Mix) isInbound_Protocol() {}

func (*Inbound_Socks4A) isInbound_Protocol() {}

func (*Inbound_Tproxy) isInbound_Protocol() {}

func (*Inbound_Redir) isInbound_Protocol() {}

func (*Inbound_Tun) isInbound_Protocol() {}

type Transport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Transport:
	//
	//	*Transport_Normal
	//	*Transport_Tls
	//	*Transport_Mux
	//	*Transport_Http2
	//	*Transport_Websocket
	//	*Transport_Grpc
	//	*Transport_Reality
	Transport isTransport_Transport `protobuf_oneof:"transport"`
}

func (x *Transport) Reset() {
	*x = Transport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_listener_listener_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transport) ProtoMessage() {}

func (x *Transport) ProtoReflect() protoreflect.Message {
	mi := &file_config_listener_listener_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transport.ProtoReflect.Descriptor instead.
func (*Transport) Descriptor() ([]byte, []int) {
	return file_config_listener_listener_proto_rawDescGZIP(), []int{2}
}

func (m *Transport) GetTransport() isTransport_Transport {
	if m != nil {
		return m.Transport
	}
	return nil
}

func (x *Transport) GetNormal() *Normal {
	if x, ok := x.GetTransport().(*Transport_Normal); ok {
		return x.Normal
	}
	return nil
}

func (x *Transport) GetTls() *Tls {
	if x, ok := x.GetTransport().(*Transport_Tls); ok {
		return x.Tls
	}
	return nil
}

func (x *Transport) GetMux() *Mux {
	if x, ok := x.GetTransport().(*Transport_Mux); ok {
		return x.Mux
	}
	return nil
}

func (x *Transport) GetHttp2() *Http2 {
	if x, ok := x.GetTransport().(*Transport_Http2); ok {
		return x.Http2
	}
	return nil
}

func (x *Transport) GetWebsocket() *Websocket {
	if x, ok := x.GetTransport().(*Transport_Websocket); ok {
		return x.Websocket
	}
	return nil
}

func (x *Transport) GetGrpc() *Grpc {
	if x, ok := x.GetTransport().(*Transport_Grpc); ok {
		return x.Grpc
	}
	return nil
}

func (x *Transport) GetReality() *Reality {
	if x, ok := x.GetTransport().(*Transport_Reality); ok {
		return x.Reality
	}
	return nil
}

type isTransport_Transport interface {
	isTransport_Transport()
}

type Transport_Normal struct {
	Normal *Normal `protobuf:"bytes,12,opt,name=normal,proto3,oneof"`
}

type Transport_Tls struct {
	Tls *Tls `protobuf:"bytes,1,opt,name=tls,proto3,oneof"`
}

type Transport_Mux struct {
	Mux *Mux `protobuf:"bytes,2,opt,name=mux,proto3,oneof"`
}

type Transport_Http2 struct {
	Http2 *Http2 `protobuf:"bytes,5,opt,name=http2,proto3,oneof"`
}

type Transport_Websocket struct {
	Websocket *Websocket `protobuf:"bytes,6,opt,name=websocket,proto3,oneof"`
}

type Transport_Grpc struct {
	Grpc *Grpc `protobuf:"bytes,11,opt,name=grpc,proto3,oneof"`
}

type Transport_Reality struct {
	Reality *Reality `protobuf:"bytes,10,opt,name=reality,proto3,oneof"`
}

func (*Transport_Normal) isTransport_Transport() {}

func (*Transport_Tls) isTransport_Transport() {}

func (*Transport_Mux) isTransport_Transport() {}

func (*Transport_Http2) isTransport_Transport() {}

func (*Transport_Websocket) isTransport_Transport() {}

func (*Transport_Grpc) isTransport_Transport() {}

func (*Transport_Reality) isTransport_Transport() {}

type Protocol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Enabled bool   `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Types that are assignable to Protocol:
	//
	//	*Protocol_Http
	//	*Protocol_Socks5
	//	*Protocol_Redir
	//	*Protocol_Tun
	//	*Protocol_Yuubinsya
	//	*Protocol_Mix
	//	*Protocol_Socks4A
	//	*Protocol_Tproxy
	Protocol isProtocol_Protocol `protobuf_oneof:"protocol"`
}

func (x *Protocol) Reset() {
	*x = Protocol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_listener_listener_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Protocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Protocol) ProtoMessage() {}

func (x *Protocol) ProtoReflect() protoreflect.Message {
	mi := &file_config_listener_listener_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Protocol.ProtoReflect.Descriptor instead.
func (*Protocol) Descriptor() ([]byte, []int) {
	return file_config_listener_listener_proto_rawDescGZIP(), []int{3}
}

func (x *Protocol) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Protocol) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (m *Protocol) GetProtocol() isProtocol_Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (x *Protocol) GetHttp() *Http {
	if x, ok := x.GetProtocol().(*Protocol_Http); ok {
		return x.Http
	}
	return nil
}

func (x *Protocol) GetSocks5() *Socks5 {
	if x, ok := x.GetProtocol().(*Protocol_Socks5); ok {
		return x.Socks5
	}
	return nil
}

func (x *Protocol) GetRedir() *Redir {
	if x, ok := x.GetProtocol().(*Protocol_Redir); ok {
		return x.Redir
	}
	return nil
}

func (x *Protocol) GetTun() *Tun {
	if x, ok := x.GetProtocol().(*Protocol_Tun); ok {
		return x.Tun
	}
	return nil
}

func (x *Protocol) GetYuubinsya() *Yuubinsya {
	if x, ok := x.GetProtocol().(*Protocol_Yuubinsya); ok {
		return x.Yuubinsya
	}
	return nil
}

func (x *Protocol) GetMix() *Mixed {
	if x, ok := x.GetProtocol().(*Protocol_Mix); ok {
		return x.Mix
	}
	return nil
}

func (x *Protocol) GetSocks4A() *Socks4A {
	if x, ok := x.GetProtocol().(*Protocol_Socks4A); ok {
		return x.Socks4A
	}
	return nil
}

func (x *Protocol) GetTproxy() *Tproxy {
	if x, ok := x.GetProtocol().(*Protocol_Tproxy); ok {
		return x.Tproxy
	}
	return nil
}

type isProtocol_Protocol interface {
	isProtocol_Protocol()
}

type Protocol_Http struct {
	Http *Http `protobuf:"bytes,3,opt,name=http,proto3,oneof"`
}

type Protocol_Socks5 struct {
	Socks5 *Socks5 `protobuf:"bytes,4,opt,name=socks5,proto3,oneof"`
}

type Protocol_Redir struct {
	Redir *Redir `protobuf:"bytes,5,opt,name=redir,proto3,oneof"`
}

type Protocol_Tun struct {
	Tun *Tun `protobuf:"bytes,6,opt,name=tun,proto3,oneof"`
}

type Protocol_Yuubinsya struct {
	Yuubinsya *Yuubinsya `protobuf:"bytes,7,opt,name=yuubinsya,proto3,oneof"`
}

type Protocol_Mix struct {
	Mix *Mixed `protobuf:"bytes,8,opt,name=mix,json=mixed,proto3,oneof"`
}

type Protocol_Socks4A struct {
	Socks4A *Socks4A `protobuf:"bytes,9,opt,name=socks4a,proto3,oneof"`
}

type Protocol_Tproxy struct {
	Tproxy *Tproxy `protobuf:"bytes,10,opt,name=tproxy,proto3,oneof"`
}

func (*Protocol_Http) isProtocol_Protocol() {}

func (*Protocol_Socks5) isProtocol_Protocol() {}

func (*Protocol_Redir) isProtocol_Protocol() {}

func (*Protocol_Tun) isProtocol_Protocol() {}

func (*Protocol_Yuubinsya) isProtocol_Protocol() {}

func (*Protocol_Mix) isProtocol_Protocol() {}

func (*Protocol_Socks4A) isProtocol_Protocol() {}

func (*Protocol_Tproxy) isProtocol_Protocol() {}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_listener_listener_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_config_listener_listener_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_config_listener_listener_proto_rawDescGZIP(), []int{4}
}

type Mux struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Mux) Reset() {
	*x = Mux{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_listener_listener_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mux) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mux) ProtoMessage() {}

func (x *Mux) ProtoReflect() protoreflect.Message {
	mi := &file_config_listener_listener_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mux.ProtoReflect.Descriptor instead.
func (*Mux) Descriptor() ([]byte, []int) {
	return file_config_listener_listener_proto_rawDescGZIP(), []int{5}
}

type Tcpudp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host    string        `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Control TcpUdpControl `protobuf:"varint,2,opt,name=control,proto3,enum=yuhaiin.listener.TcpUdpControl" json:"control,omitempty"`
}

func (x *Tcpudp) Reset() {
	*x = Tcpudp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_listener_listener_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tcpudp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tcpudp) ProtoMessage() {}

func (x *Tcpudp) ProtoReflect() protoreflect.Message {
	mi := &file_config_listener_listener_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tcpudp.ProtoReflect.Descriptor instead.
func (*Tcpudp) Descriptor() ([]byte, []int) {
	return file_config_listener_listener_proto_rawDescGZIP(), []int{6}
}

func (x *Tcpudp) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Tcpudp) GetControl() TcpUdpControl {
	if x != nil {
		return x.Control
	}
	return TcpUdpControl_tcp_udp_control_all
}

type Quic2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string     `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Tls  *TlsConfig `protobuf:"bytes,3,opt,name=tls,proto3" json:"tls,omitempty"`
}

func (x *Quic2) Reset() {
	*x = Quic2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_listener_listener_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quic2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quic2) ProtoMessage() {}

func (x *Quic2) ProtoReflect() protoreflect.Message {
	mi := &file_config_listener_listener_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quic2.ProtoReflect.Descriptor instead.
func (*Quic2) Descriptor() ([]byte, []int) {
	return file_config_listener_listener_proto_rawDescGZIP(), []int{7}
}

func (x *Quic2) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Quic2) GetTls() *TlsConfig {
	if x != nil {
		return x.Tls
	}
	return nil
}

type Http struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in config/listener/listener.proto.
	Host     string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *Http) Reset() {
	*x = Http{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_listener_listener_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Http) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Http) ProtoMessage() {}

func (x *Http) ProtoReflect() protoreflect.Message {
	mi := &file_config_listener_listener_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Http.ProtoReflect.Descriptor instead.
func (*Http) Descriptor() ([]byte, []int) {
	return file_config_listener_listener_proto_rawDescGZIP(), []int{8}
}

// Deprecated: Marked as deprecated in config/listener/listener.proto.
func (x *Http) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Http) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Http) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type Socks5 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in config/listener/listener.proto.
	Host     string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	Udp      bool   `protobuf:"varint,5,opt,name=udp,proto3" json:"udp,omitempty"`
}

func (x *Socks5) Reset() {
	*x = Socks5{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_listener_listener_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Socks5) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Socks5) ProtoMessage() {}

func (x *Socks5) ProtoReflect() protoreflect.Message {
	mi := &file_config_listener_listener_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Socks5.ProtoReflect.Descriptor instead.
func (*Socks5) Descriptor() ([]byte, []int) {
	return file_config_listener_listener_proto_rawDescGZIP(), []int{9}
}

// Deprecated: Marked as deprecated in config/listener/listener.proto.
func (x *Socks5) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Socks5) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Socks5) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Socks5) GetUdp() bool {
	if x != nil {
		return x.Udp
	}
	return false
}

type Socks4A struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in config/listener/listener.proto.
	Host     string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *Socks4A) Reset() {
	*x = Socks4A{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_listener_listener_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Socks4A) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Socks4A) ProtoMessage() {}

func (x *Socks4A) ProtoReflect() protoreflect.Message {
	mi := &file_config_listener_listener_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Socks4A.ProtoReflect.Descriptor instead.
func (*Socks4A) Descriptor() ([]byte, []int) {
	return file_config_listener_listener_proto_rawDescGZIP(), []int{10}
}

// Deprecated: Marked as deprecated in config/listener/listener.proto.
func (x *Socks4A) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Socks4A) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type Mixed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in config/listener/listener.proto.
	Host     string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *Mixed) Reset() {
	*x = Mixed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_listener_listener_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mixed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mixed) ProtoMessage() {}

func (x *Mixed) ProtoReflect() protoreflect.Message {
	mi := &file_config_listener_listener_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mixed.ProtoReflect.Descriptor instead.
func (*Mixed) Descriptor() ([]byte, []int) {
	return file_config_listener_listener_proto_rawDescGZIP(), []int{11}
}

// Deprecated: Marked as deprecated in config/listener/listener.proto.
func (x *Mixed) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Mixed) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Mixed) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type Redir struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *Redir) Reset() {
	*x = Redir{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_listener_listener_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Redir) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Redir) ProtoMessage() {}

func (x *Redir) ProtoReflect() protoreflect.Message {
	mi := &file_config_listener_listener_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Redir.ProtoReflect.Descriptor instead.
func (*Redir) Descriptor() ([]byte, []int) {
	return file_config_listener_listener_proto_rawDescGZIP(), []int{12}
}

func (x *Redir) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

type Tproxy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host         string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	DnsHijacking bool   `protobuf:"varint,2,opt,name=dns_hijacking,proto3" json:"dns_hijacking,omitempty"`
	ForceFakeip  bool   `protobuf:"varint,3,opt,name=force_fakeip,proto3" json:"force_fakeip,omitempty"`
}

func (x *Tproxy) Reset() {
	*x = Tproxy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_listener_listener_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tproxy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tproxy) ProtoMessage() {}

func (x *Tproxy) ProtoReflect() protoreflect.Message {
	mi := &file_config_listener_listener_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tproxy.ProtoReflect.Descriptor instead.
func (*Tproxy) Descriptor() ([]byte, []int) {
	return file_config_listener_listener_proto_rawDescGZIP(), []int{13}
}

func (x *Tproxy) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Tproxy) GetDnsHijacking() bool {
	if x != nil {
		return x.DnsHijacking
	}
	return false
}

func (x *Tproxy) GetForceFakeip() bool {
	if x != nil {
		return x.ForceFakeip
	}
	return false
}

type Tun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the tun device
	// eg: tun://tun0, fd://123
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Mtu  int32  `protobuf:"varint,2,opt,name=mtu,proto3" json:"mtu,omitempty"`
	// Deprecated: Marked as deprecated in config/listener/listener.proto.
	Gateway string `protobuf:"bytes,3,opt,name=gateway,proto3" json:"gateway,omitempty"`
	// Deprecated: Marked as deprecated in config/listener/listener.proto.
	DnsHijacking  bool              `protobuf:"varint,4,opt,name=dns_hijacking,proto3" json:"dns_hijacking,omitempty"`
	ForceFakeip   bool              `protobuf:"varint,9,opt,name=force_fakeip,proto3" json:"force_fakeip,omitempty"`
	SkipMulticast bool              `protobuf:"varint,6,opt,name=skip_multicast,proto3" json:"skip_multicast,omitempty"`
	Driver        TunEndpointDriver `protobuf:"varint,7,opt,name=driver,proto3,enum=yuhaiin.listener.TunEndpointDriver" json:"driver,omitempty"`
	Portal        string            `protobuf:"bytes,8,opt,name=portal,proto3" json:"portal,omitempty"`
	PortalV6      string            `protobuf:"bytes,11,opt,name=portal_v6,proto3" json:"portal_v6,omitempty"`
	Route         *Route            `protobuf:"bytes,10,opt,name=route,proto3" json:"route,omitempty"`
	PostUp        []string          `protobuf:"bytes,12,rep,name=post_up,proto3" json:"post_up,omitempty"`
	PostDown      []string          `protobuf:"bytes,13,rep,name=post_down,proto3" json:"post_down,omitempty"`
}

func (x *Tun) Reset() {
	*x = Tun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_listener_listener_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tun) ProtoMessage() {}

func (x *Tun) ProtoReflect() protoreflect.Message {
	mi := &file_config_listener_listener_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tun.ProtoReflect.Descriptor instead.
func (*Tun) Descriptor() ([]byte, []int) {
	return file_config_listener_listener_proto_rawDescGZIP(), []int{14}
}

func (x *Tun) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tun) GetMtu() int32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

// Deprecated: Marked as deprecated in config/listener/listener.proto.
func (x *Tun) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

// Deprecated: Marked as deprecated in config/listener/listener.proto.
func (x *Tun) GetDnsHijacking() bool {
	if x != nil {
		return x.DnsHijacking
	}
	return false
}

func (x *Tun) GetForceFakeip() bool {
	if x != nil {
		return x.ForceFakeip
	}
	return false
}

func (x *Tun) GetSkipMulticast() bool {
	if x != nil {
		return x.SkipMulticast
	}
	return false
}

func (x *Tun) GetDriver() TunEndpointDriver {
	if x != nil {
		return x.Driver
	}
	return Tun_fdbased
}

func (x *Tun) GetPortal() string {
	if x != nil {
		return x.Portal
	}
	return ""
}

func (x *Tun) GetPortalV6() string {
	if x != nil {
		return x.PortalV6
	}
	return ""
}

func (x *Tun) GetRoute() *Route {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *Tun) GetPostUp() []string {
	if x != nil {
		return x.PostUp
	}
	return nil
}

func (x *Tun) GetPostDown() []string {
	if x != nil {
		return x.PostDown
	}
	return nil
}

type Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes   []string `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty"`
	Excludes []string `protobuf:"bytes,2,rep,name=excludes,proto3" json:"excludes,omitempty"`
}

func (x *Route) Reset() {
	*x = Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_listener_listener_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Route) ProtoMessage() {}

func (x *Route) ProtoReflect() protoreflect.Message {
	mi := &file_config_listener_listener_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Route.ProtoReflect.Descriptor instead.
func (*Route) Descriptor() ([]byte, []int) {
	return file_config_listener_listener_proto_rawDescGZIP(), []int{15}
}

func (x *Route) GetRoutes() []string {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *Route) GetExcludes() []string {
	if x != nil {
		return x.Excludes
	}
	return nil
}

type Yuubinsya struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in config/listener/listener.proto.
	Host       string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Password   string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	TcpEncrypt bool   `protobuf:"varint,12,opt,name=tcp_encrypt,proto3" json:"tcp_encrypt,omitempty"`
	UdpEncrypt bool   `protobuf:"varint,13,opt,name=udp_encrypt,proto3" json:"udp_encrypt,omitempty"`
	Mux        bool   `protobuf:"varint,11,opt,name=mux,proto3" json:"mux,omitempty"`
	// Types that are assignable to Protocol:
	//
	//	*Yuubinsya_Normal
	//	*Yuubinsya_Tls
	//	*Yuubinsya_Quic
	//	*Yuubinsya_Websocket
	//	*Yuubinsya_Grpc
	//	*Yuubinsya_Http2
	//	*Yuubinsya_Reality
	Protocol isYuubinsya_Protocol `protobuf_oneof:"protocol"`
}

func (x *Yuubinsya) Reset() {
	*x = Yuubinsya{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_listener_listener_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Yuubinsya) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Yuubinsya) ProtoMessage() {}

func (x *Yuubinsya) ProtoReflect() protoreflect.Message {
	mi := &file_config_listener_listener_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Yuubinsya.ProtoReflect.Descriptor instead.
func (*Yuubinsya) Descriptor() ([]byte, []int) {
	return file_config_listener_listener_proto_rawDescGZIP(), []int{16}
}

// Deprecated: Marked as deprecated in config/listener/listener.proto.
func (x *Yuubinsya) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Yuubinsya) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Yuubinsya) GetTcpEncrypt() bool {
	if x != nil {
		return x.TcpEncrypt
	}
	return false
}

func (x *Yuubinsya) GetUdpEncrypt() bool {
	if x != nil {
		return x.UdpEncrypt
	}
	return false
}

func (x *Yuubinsya) GetMux() bool {
	if x != nil {
		return x.Mux
	}
	return false
}

func (m *Yuubinsya) GetProtocol() isYuubinsya_Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

// Deprecated: Marked as deprecated in config/listener/listener.proto.
func (x *Yuubinsya) GetNormal() *Normal {
	if x, ok := x.GetProtocol().(*Yuubinsya_Normal); ok {
		return x.Normal
	}
	return nil
}

// Deprecated: Marked as deprecated in config/listener/listener.proto.
func (x *Yuubinsya) GetTls() *Tls {
	if x, ok := x.GetProtocol().(*Yuubinsya_Tls); ok {
		return x.Tls
	}
	return nil
}

// Deprecated: Marked as deprecated in config/listener/listener.proto.
func (x *Yuubinsya) GetQuic() *Quic {
	if x, ok := x.GetProtocol().(*Yuubinsya_Quic); ok {
		return x.Quic
	}
	return nil
}

// Deprecated: Marked as deprecated in config/listener/listener.proto.
func (x *Yuubinsya) GetWebsocket() *Websocket {
	if x, ok := x.GetProtocol().(*Yuubinsya_Websocket); ok {
		return x.Websocket
	}
	return nil
}

// Deprecated: Marked as deprecated in config/listener/listener.proto.
func (x *Yuubinsya) GetGrpc() *Grpc {
	if x, ok := x.GetProtocol().(*Yuubinsya_Grpc); ok {
		return x.Grpc
	}
	return nil
}

// Deprecated: Marked as deprecated in config/listener/listener.proto.
func (x *Yuubinsya) GetHttp2() *Http2 {
	if x, ok := x.GetProtocol().(*Yuubinsya_Http2); ok {
		return x.Http2
	}
	return nil
}

// Deprecated: Marked as deprecated in config/listener/listener.proto.
func (x *Yuubinsya) GetReality() *Reality {
	if x, ok := x.GetProtocol().(*Yuubinsya_Reality); ok {
		return x.Reality
	}
	return nil
}

type isYuubinsya_Protocol interface {
	isYuubinsya_Protocol()
}

type Yuubinsya_Normal struct {
	// Deprecated: Marked as deprecated in config/listener/listener.proto.
	Normal *Normal `protobuf:"bytes,3,opt,name=normal,proto3,oneof"`
}

type Yuubinsya_Tls struct {
	// Deprecated: Marked as deprecated in config/listener/listener.proto.
	Tls *Tls `protobuf:"bytes,4,opt,name=tls,proto3,oneof"`
}

type Yuubinsya_Quic struct {
	// Deprecated: Marked as deprecated in config/listener/listener.proto.
	Quic *Quic `protobuf:"bytes,5,opt,name=quic,proto3,oneof"`
}

type Yuubinsya_Websocket struct {
	// Deprecated: Marked as deprecated in config/listener/listener.proto.
	Websocket *Websocket `protobuf:"bytes,6,opt,name=websocket,proto3,oneof"`
}

type Yuubinsya_Grpc struct {
	// Deprecated: Marked as deprecated in config/listener/listener.proto.
	Grpc *Grpc `protobuf:"bytes,7,opt,name=grpc,proto3,oneof"`
}

type Yuubinsya_Http2 struct {
	// Deprecated: Marked as deprecated in config/listener/listener.proto.
	Http2 *Http2 `protobuf:"bytes,9,opt,name=http2,proto3,oneof"`
}

type Yuubinsya_Reality struct {
	// Deprecated: Marked as deprecated in config/listener/listener.proto.
	Reality *Reality `protobuf:"bytes,10,opt,name=reality,proto3,oneof"`
}

func (*Yuubinsya_Normal) isYuubinsya_Protocol() {}

func (*Yuubinsya_Tls) isYuubinsya_Protocol() {}

func (*Yuubinsya_Quic) isYuubinsya_Protocol() {}

func (*Yuubinsya_Websocket) isYuubinsya_Protocol() {}

func (*Yuubinsya_Grpc) isYuubinsya_Protocol() {}

func (*Yuubinsya_Http2) isYuubinsya_Protocol() {}

func (*Yuubinsya_Reality) isYuubinsya_Protocol() {}

type Normal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Normal) Reset() {
	*x = Normal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_listener_listener_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Normal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Normal) ProtoMessage() {}

func (x *Normal) ProtoReflect() protoreflect.Message {
	mi := &file_config_listener_listener_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Normal.ProtoReflect.Descriptor instead.
func (*Normal) Descriptor() ([]byte, []int) {
	return file_config_listener_listener_proto_rawDescGZIP(), []int{17}
}

type Websocket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in config/listener/listener.proto.
	Tls *TlsConfig `protobuf:"bytes,1,opt,name=tls,proto3" json:"tls,omitempty"`
}

func (x *Websocket) Reset() {
	*x = Websocket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_listener_listener_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Websocket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Websocket) ProtoMessage() {}

func (x *Websocket) ProtoReflect() protoreflect.Message {
	mi := &file_config_listener_listener_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Websocket.ProtoReflect.Descriptor instead.
func (*Websocket) Descriptor() ([]byte, []int) {
	return file_config_listener_listener_proto_rawDescGZIP(), []int{18}
}

// Deprecated: Marked as deprecated in config/listener/listener.proto.
func (x *Websocket) GetTls() *TlsConfig {
	if x != nil {
		return x.Tls
	}
	return nil
}

type Quic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tls *TlsConfig `protobuf:"bytes,1,opt,name=tls,proto3" json:"tls,omitempty"`
}

func (x *Quic) Reset() {
	*x = Quic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_listener_listener_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quic) ProtoMessage() {}

func (x *Quic) ProtoReflect() protoreflect.Message {
	mi := &file_config_listener_listener_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quic.ProtoReflect.Descriptor instead.
func (*Quic) Descriptor() ([]byte, []int) {
	return file_config_listener_listener_proto_rawDescGZIP(), []int{19}
}

func (x *Quic) GetTls() *TlsConfig {
	if x != nil {
		return x.Tls
	}
	return nil
}

type Tls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tls *TlsConfig `protobuf:"bytes,1,opt,name=tls,proto3" json:"tls,omitempty"`
}

func (x *Tls) Reset() {
	*x = Tls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_listener_listener_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tls) ProtoMessage() {}

func (x *Tls) ProtoReflect() protoreflect.Message {
	mi := &file_config_listener_listener_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tls.ProtoReflect.Descriptor instead.
func (*Tls) Descriptor() ([]byte, []int) {
	return file_config_listener_listener_proto_rawDescGZIP(), []int{20}
}

func (x *Tls) GetTls() *TlsConfig {
	if x != nil {
		return x.Tls
	}
	return nil
}

type Grpc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in config/listener/listener.proto.
	Tls *TlsConfig `protobuf:"bytes,1,opt,name=tls,proto3" json:"tls,omitempty"`
}

func (x *Grpc) Reset() {
	*x = Grpc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_listener_listener_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Grpc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Grpc) ProtoMessage() {}

func (x *Grpc) ProtoReflect() protoreflect.Message {
	mi := &file_config_listener_listener_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Grpc.ProtoReflect.Descriptor instead.
func (*Grpc) Descriptor() ([]byte, []int) {
	return file_config_listener_listener_proto_rawDescGZIP(), []int{21}
}

// Deprecated: Marked as deprecated in config/listener/listener.proto.
func (x *Grpc) GetTls() *TlsConfig {
	if x != nil {
		return x.Tls
	}
	return nil
}

type Http2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in config/listener/listener.proto.
	Tls *TlsConfig `protobuf:"bytes,1,opt,name=tls,proto3" json:"tls,omitempty"`
}

func (x *Http2) Reset() {
	*x = Http2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_listener_listener_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Http2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Http2) ProtoMessage() {}

func (x *Http2) ProtoReflect() protoreflect.Message {
	mi := &file_config_listener_listener_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Http2.ProtoReflect.Descriptor instead.
func (*Http2) Descriptor() ([]byte, []int) {
	return file_config_listener_listener_proto_rawDescGZIP(), []int{22}
}

// Deprecated: Marked as deprecated in config/listener/listener.proto.
func (x *Http2) GetTls() *TlsConfig {
	if x != nil {
		return x.Tls
	}
	return nil
}

type Reality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShortId    []string `protobuf:"bytes,1,rep,name=short_id,proto3" json:"short_id,omitempty"`
	ServerName []string `protobuf:"bytes,2,rep,name=server_name,proto3" json:"server_name,omitempty"`
	Dest       string   `protobuf:"bytes,3,opt,name=dest,proto3" json:"dest,omitempty"`
	PrivateKey string   `protobuf:"bytes,4,opt,name=private_key,proto3" json:"private_key,omitempty"`
	Debug      bool     `protobuf:"varint,5,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *Reality) Reset() {
	*x = Reality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_listener_listener_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reality) ProtoMessage() {}

func (x *Reality) ProtoReflect() protoreflect.Message {
	mi := &file_config_listener_listener_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reality.ProtoReflect.Descriptor instead.
func (*Reality) Descriptor() ([]byte, []int) {
	return file_config_listener_listener_proto_rawDescGZIP(), []int{23}
}

func (x *Reality) GetShortId() []string {
	if x != nil {
		return x.ShortId
	}
	return nil
}

func (x *Reality) GetServerName() []string {
	if x != nil {
		return x.ServerName
	}
	return nil
}

func (x *Reality) GetDest() string {
	if x != nil {
		return x.Dest
	}
	return ""
}

func (x *Reality) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *Reality) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

type TlsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Certificates          []*Certificate          `protobuf:"bytes,1,rep,name=certificates,proto3" json:"certificates,omitempty"`
	NextProtos            []string                `protobuf:"bytes,3,rep,name=next_protos,proto3" json:"next_protos,omitempty"`
	ServerNameCertificate map[string]*Certificate `protobuf:"bytes,4,rep,name=server_name_certificate,proto3" json:"server_name_certificate,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TlsConfig) Reset() {
	*x = TlsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_listener_listener_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TlsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TlsConfig) ProtoMessage() {}

func (x *TlsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_listener_listener_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TlsConfig.ProtoReflect.Descriptor instead.
func (*TlsConfig) Descriptor() ([]byte, []int) {
	return file_config_listener_listener_proto_rawDescGZIP(), []int{24}
}

func (x *TlsConfig) GetCertificates() []*Certificate {
	if x != nil {
		return x.Certificates
	}
	return nil
}

func (x *TlsConfig) GetNextProtos() []string {
	if x != nil {
		return x.NextProtos
	}
	return nil
}

func (x *TlsConfig) GetServerNameCertificate() map[string]*Certificate {
	if x != nil {
		return x.ServerNameCertificate
	}
	return nil
}

type Certificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cert         []byte `protobuf:"bytes,1,opt,name=cert,proto3" json:"cert,omitempty"`
	Key          []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	CertFilePath string `protobuf:"bytes,3,opt,name=cert_file_path,proto3" json:"cert_file_path,omitempty"`
	KeyFilePath  string `protobuf:"bytes,4,opt,name=key_file_path,proto3" json:"key_file_path,omitempty"`
}

func (x *Certificate) Reset() {
	*x = Certificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_listener_listener_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Certificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Certificate) ProtoMessage() {}

func (x *Certificate) ProtoReflect() protoreflect.Message {
	mi := &file_config_listener_listener_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Certificate.ProtoReflect.Descriptor instead.
func (*Certificate) Descriptor() ([]byte, []int) {
	return file_config_listener_listener_proto_rawDescGZIP(), []int{25}
}

func (x *Certificate) GetCert() []byte {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *Certificate) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Certificate) GetCertFilePath() string {
	if x != nil {
		return x.CertFilePath
	}
	return ""
}

func (x *Certificate) GetKeyFilePath() string {
	if x != nil {
		return x.KeyFilePath
	}
	return ""
}

type YuubinsyaProtocolNormal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *YuubinsyaProtocolNormal) Reset() {
	*x = YuubinsyaProtocolNormal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_listener_listener_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YuubinsyaProtocolNormal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YuubinsyaProtocolNormal) ProtoMessage() {}

func (x *YuubinsyaProtocolNormal) ProtoReflect() protoreflect.Message {
	mi := &file_config_listener_listener_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YuubinsyaProtocolNormal.ProtoReflect.Descriptor instead.
func (*YuubinsyaProtocolNormal) Descriptor() ([]byte, []int) {
	return file_config_listener_listener_proto_rawDescGZIP(), []int{16, 0}
}

var File_config_listener_listener_proto protoreflect.FileDescriptor

var file_config_listener_listener_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x72, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x10, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x65, 0x72, 0x22, 0xa7, 0x03, 0x0a, 0x0e, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x69, 0x6a, 0x61, 0x63, 0x6b, 0x5f,
	0x64, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x69, 0x6a, 0x61, 0x63,
	0x6b, 0x5f, 0x64, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x68, 0x69, 0x6a, 0x61, 0x63, 0x6b, 0x5f,
	0x64, 0x6e, 0x73, 0x5f, 0x66, 0x61, 0x6b, 0x65, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x68, 0x69, 0x6a, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x66, 0x61, 0x6b,
	0x65, 0x69, 0x70, 0x12, 0x4b, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x12, 0x4a, 0x0a, 0x08, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x1a, 0x56, 0x0a, 0x0c,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x56, 0x0a, 0x0d, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e,
	0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbe, 0x05, 0x0a,
	0x07, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00,
	0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x06, 0x74, 0x63, 0x70, 0x75, 0x64,
	0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69,
	0x6e, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x74, 0x63, 0x70, 0x75, 0x64,
	0x70, 0x48, 0x00, 0x52, 0x06, 0x74, 0x63, 0x70, 0x75, 0x64, 0x70, 0x12, 0x2d, 0x0a, 0x04, 0x71,
	0x75, 0x69, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79, 0x75, 0x68, 0x61,
	0x69, 0x69, 0x6e, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x71, 0x75, 0x69,
	0x63, 0x32, 0x48, 0x00, 0x52, 0x04, 0x71, 0x75, 0x69, 0x63, 0x12, 0x39, 0x0a, 0x09, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x48, 0x01, 0x52, 0x04, 0x68,
	0x74, 0x74, 0x70, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x35, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x35, 0x48, 0x01, 0x52,
	0x06, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x35, 0x12, 0x3b, 0x0a, 0x09, 0x79, 0x75, 0x75, 0x62, 0x69,
	0x6e, 0x73, 0x79, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x75, 0x68,
	0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x79, 0x75,
	0x75, 0x62, 0x69, 0x6e, 0x73, 0x79, 0x61, 0x48, 0x01, 0x52, 0x09, 0x79, 0x75, 0x75, 0x62, 0x69,
	0x6e, 0x73, 0x79, 0x61, 0x12, 0x2d, 0x0a, 0x03, 0x6d, 0x69, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x48, 0x01, 0x52, 0x05, 0x6d, 0x69,
	0x78, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x34, 0x61, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x34, 0x61, 0x48,
	0x01, 0x52, 0x07, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x34, 0x61, 0x12, 0x32, 0x0a, 0x06, 0x74, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x75, 0x68,
	0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x74, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x48, 0x01, 0x52, 0x06, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x2f,
	0x0a, 0x05, 0x72, 0x65, 0x64, 0x69, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72,
	0x2e, 0x72, 0x65, 0x64, 0x69, 0x72, 0x48, 0x01, 0x52, 0x05, 0x72, 0x65, 0x64, 0x69, 0x72, 0x12,
	0x29, 0x0a, 0x03, 0x74, 0x75, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e,
	0x74, 0x75, 0x6e, 0x48, 0x01, 0x52, 0x03, 0x74, 0x75, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x0a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x4a, 0x04, 0x08, 0x11, 0x10, 0x12, 0x52, 0x04, 0x49, 0x50, 0x76, 0x36, 0x22, 0xf5, 0x02,
	0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x75,
	0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12,
	0x29, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e,
	0x74, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x12, 0x29, 0x0a, 0x03, 0x6d, 0x75,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69,
	0x6e, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x6d, 0x75, 0x78, 0x48, 0x00,
	0x52, 0x03, 0x6d, 0x75, 0x78, 0x12, 0x2f, 0x0a, 0x05, 0x68, 0x74, 0x74, 0x70, 0x32, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x32, 0x48, 0x00, 0x52,
	0x05, 0x68, 0x74, 0x74, 0x70, 0x32, 0x12, 0x3b, 0x0a, 0x09, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x75, 0x68, 0x61,
	0x69, 0x69, 0x6e, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x77, 0x65, 0x62,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x67, 0x72, 0x70, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x48, 0x00, 0x52, 0x04, 0x67, 0x72, 0x70,
	0x63, 0x12, 0x35, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52,
	0x07, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xd9, 0x03, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x2c, 0x0a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x72, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x48, 0x00, 0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x12, 0x32,
	0x0a, 0x06, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x35, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x72, 0x2e, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x35, 0x48, 0x00, 0x52, 0x06, 0x73, 0x6f, 0x63, 0x6b,
	0x73, 0x35, 0x12, 0x2f, 0x0a, 0x05, 0x72, 0x65, 0x64, 0x69, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x64, 0x69, 0x72, 0x48, 0x00, 0x52, 0x05, 0x72, 0x65,
	0x64, 0x69, 0x72, 0x12, 0x29, 0x0a, 0x03, 0x74, 0x75, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x65, 0x72, 0x2e, 0x74, 0x75, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x74, 0x75, 0x6e, 0x12, 0x3b,
	0x0a, 0x09, 0x79, 0x75, 0x75, 0x62, 0x69, 0x6e, 0x73, 0x79, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x65, 0x72, 0x2e, 0x79, 0x75, 0x75, 0x62, 0x69, 0x6e, 0x73, 0x79, 0x61, 0x48, 0x00,
	0x52, 0x09, 0x79, 0x75, 0x75, 0x62, 0x69, 0x6e, 0x73, 0x79, 0x61, 0x12, 0x2d, 0x0a, 0x03, 0x6d,
	0x69, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69,
	0x69, 0x6e, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x78, 0x65,
	0x64, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x73, 0x6f,
	0x63, 0x6b, 0x73, 0x34, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x75,
	0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x73,
	0x6f, 0x63, 0x6b, 0x73, 0x34, 0x61, 0x48, 0x00, 0x52, 0x07, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x34,
	0x61, 0x12, 0x32, 0x0a, 0x06, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x65, 0x72, 0x2e, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x48, 0x00, 0x52, 0x06, 0x74,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x22, 0x07, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x05, 0x0a, 0x03, 0x6d, 0x75,
	0x78, 0x22, 0x59, 0x0a, 0x06, 0x74, 0x63, 0x70, 0x75, 0x64, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12,
	0x3b, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x65, 0x72, 0x2e, 0x74, 0x63, 0x70, 0x5f, 0x75, 0x64, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x22, 0x4b, 0x0a, 0x05,
	0x71, 0x75, 0x69, 0x63, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x03, 0x74, 0x6c, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e,
	0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x22, 0x56, 0x0a, 0x04, 0x68, 0x74, 0x74,
	0x70, 0x12, 0x16, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x22, 0x6a, 0x0a, 0x06, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x35, 0x12, 0x16, 0x0a, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x64, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x75, 0x64, 0x70, 0x22, 0x3d, 0x0a,
	0x07, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x34, 0x61, 0x12, 0x16, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x57, 0x0a, 0x05,
	0x6d, 0x69, 0x78, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x1b, 0x0a, 0x05, 0x72, 0x65, 0x64, 0x69, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x22, 0x66, 0x0a, 0x06, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x64, 0x6e, 0x73, 0x5f, 0x68, 0x69, 0x6a, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x6e, 0x73, 0x5f, 0x68, 0x69, 0x6a,
	0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f,
	0x66, 0x61, 0x6b, 0x65, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x5f, 0x66, 0x61, 0x6b, 0x65, 0x69, 0x70, 0x22, 0xdb, 0x03, 0x0a, 0x03, 0x74,
	0x75, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x12, 0x1c, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x28, 0x0a, 0x0d, 0x64, 0x6e, 0x73, 0x5f, 0x68, 0x69,
	0x6a, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x0d, 0x64, 0x6e, 0x73, 0x5f, 0x68, 0x69, 0x6a, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x12, 0x22, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x61, 0x6b, 0x65, 0x69, 0x70,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x61,
	0x6b, 0x65, 0x69, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x6b,
	0x69, 0x70, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x06,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x79,
	0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e,
	0x74, 0x75, 0x6e, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x52, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x6f, 0x72, 0x74, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x72,
	0x74, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x36,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x5f, 0x76,
	0x36, 0x12, 0x2d, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x65, 0x72, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6f,
	0x73, 0x74, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x6f, 0x73, 0x74, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x22, 0x3e, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x0b, 0x0a, 0x07, 0x66,
	0x64, 0x62, 0x61, 0x73, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x67, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x10, 0x02, 0x22, 0x3b, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x73, 0x22, 0xcd, 0x04, 0x0a, 0x09, 0x79, 0x75, 0x75, 0x62, 0x69, 0x6e,
	0x73, 0x79, 0x61, 0x12, 0x16, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x63, 0x70, 0x5f, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x63,
	0x70, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x64, 0x70,
	0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x75, 0x64, 0x70, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x75, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6d, 0x75, 0x78, 0x12, 0x36, 0x0a,
	0x06, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72,
	0x2e, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x06, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x74, 0x6c, 0x73, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52,
	0x03, 0x74, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x71, 0x75, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x71, 0x75, 0x69, 0x63, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00,
	0x52, 0x04, 0x71, 0x75, 0x69, 0x63, 0x12, 0x3f, 0x0a, 0x09, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x75, 0x68, 0x61,
	0x69, 0x69, 0x6e, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x77, 0x65, 0x62,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x09, 0x77, 0x65,
	0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x67, 0x72, 0x70, 0x63, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x42, 0x02, 0x18,
	0x01, 0x48, 0x00, 0x52, 0x04, 0x67, 0x72, 0x70, 0x63, 0x12, 0x33, 0x0a, 0x05, 0x68, 0x74, 0x74,
	0x70, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69,
	0x69, 0x6e, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x68, 0x74, 0x74, 0x70,
	0x32, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x05, 0x68, 0x74, 0x74, 0x70, 0x32, 0x12, 0x39,
	0x0a, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x65, 0x72, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00,
	0x52, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0x11, 0x0a, 0x0f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x42, 0x0a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x52, 0x15,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x22, 0x08, 0x0a, 0x06, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x22,
	0x3f, 0x0a, 0x09, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x03,
	0x74, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x75, 0x68, 0x61,
	0x69, 0x69, 0x6e, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x74, 0x6c, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x02, 0x18, 0x01, 0x52, 0x03, 0x74, 0x6c, 0x73,
	0x22, 0x36, 0x0a, 0x04, 0x71, 0x75, 0x69, 0x63, 0x12, 0x2e, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x22, 0x35, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x12,
	0x2e, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79,
	0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e,
	0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x22,
	0x3a, 0x0a, 0x04, 0x67, 0x72, 0x70, 0x63, 0x12, 0x32, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x02, 0x18, 0x01, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x22, 0x3b, 0x0a, 0x05, 0x68,
	0x74, 0x74, 0x70, 0x32, 0x12, 0x32, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x65, 0x72, 0x2e, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x07, 0x72, 0x65, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xcd,
	0x02, 0x0a, 0x0a, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x41, 0x0a,
	0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x52, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x12, 0x71, 0x0a, 0x17, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x17, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x1a, 0x67, 0x0a, 0x1a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x81,
	0x01, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x63, 0x65,
	0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x65,
	0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0d,
	0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x2a, 0x4c, 0x0a, 0x0f, 0x74, 0x63, 0x70, 0x5f, 0x75, 0x64, 0x70, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x17, 0x0a, 0x13, 0x74, 0x63, 0x70, 0x5f, 0x75, 0x64, 0x70,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x61, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x63, 0x70, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x64, 0x70, 0x10, 0x02,
	0x42, 0x39, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41,
	0x73, 0x75, 0x74, 0x6f, 0x72, 0x75, 0x66, 0x61, 0x2f, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_config_listener_listener_proto_rawDescOnce sync.Once
	file_config_listener_listener_proto_rawDescData = file_config_listener_listener_proto_rawDesc
)

func file_config_listener_listener_proto_rawDescGZIP() []byte {
	file_config_listener_listener_proto_rawDescOnce.Do(func() {
		file_config_listener_listener_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_listener_listener_proto_rawDescData)
	})
	return file_config_listener_listener_proto_rawDescData
}

var file_config_listener_listener_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_config_listener_listener_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_config_listener_listener_proto_goTypes = []interface{}{
	(TcpUdpControl)(0),              // 0: yuhaiin.listener.tcp_udp_control
	(TunEndpointDriver)(0),          // 1: yuhaiin.listener.tun.endpoint_driver
	(*InboundConfig)(nil),           // 2: yuhaiin.listener.inbound_config
	(*Inbound)(nil),                 // 3: yuhaiin.listener.inbound
	(*Transport)(nil),               // 4: yuhaiin.listener.transport
	(*Protocol)(nil),                // 5: yuhaiin.listener.protocol
	(*Empty)(nil),                   // 6: yuhaiin.listener.empty
	(*Mux)(nil),                     // 7: yuhaiin.listener.mux
	(*Tcpudp)(nil),                  // 8: yuhaiin.listener.tcpudp
	(*Quic2)(nil),                   // 9: yuhaiin.listener.quic2
	(*Http)(nil),                    // 10: yuhaiin.listener.http
	(*Socks5)(nil),                  // 11: yuhaiin.listener.socks5
	(*Socks4A)(nil),                 // 12: yuhaiin.listener.socks4a
	(*Mixed)(nil),                   // 13: yuhaiin.listener.mixed
	(*Redir)(nil),                   // 14: yuhaiin.listener.redir
	(*Tproxy)(nil),                  // 15: yuhaiin.listener.tproxy
	(*Tun)(nil),                     // 16: yuhaiin.listener.tun
	(*Route)(nil),                   // 17: yuhaiin.listener.route
	(*Yuubinsya)(nil),               // 18: yuhaiin.listener.yuubinsya
	(*Normal)(nil),                  // 19: yuhaiin.listener.normal
	(*Websocket)(nil),               // 20: yuhaiin.listener.websocket
	(*Quic)(nil),                    // 21: yuhaiin.listener.quic
	(*Tls)(nil),                     // 22: yuhaiin.listener.tls
	(*Grpc)(nil),                    // 23: yuhaiin.listener.grpc
	(*Http2)(nil),                   // 24: yuhaiin.listener.http2
	(*Reality)(nil),                 // 25: yuhaiin.listener.reality
	(*TlsConfig)(nil),               // 26: yuhaiin.listener.tls_config
	(*Certificate)(nil),             // 27: yuhaiin.listener.certificate
	nil,                             // 28: yuhaiin.listener.inbound_config.ServersEntry
	nil,                             // 29: yuhaiin.listener.inbound_config.InboundsEntry
	(*YuubinsyaProtocolNormal)(nil), // 30: yuhaiin.listener.yuubinsya.protocol_normal
	nil,                             // 31: yuhaiin.listener.tls_config.ServerNameCertificateEntry
}
var file_config_listener_listener_proto_depIdxs = []int32{
	28, // 0: yuhaiin.listener.inbound_config.servers:type_name -> yuhaiin.listener.inbound_config.ServersEntry
	29, // 1: yuhaiin.listener.inbound_config.inbounds:type_name -> yuhaiin.listener.inbound_config.InboundsEntry
	6,  // 2: yuhaiin.listener.inbound.empty:type_name -> yuhaiin.listener.empty
	8,  // 3: yuhaiin.listener.inbound.tcpudp:type_name -> yuhaiin.listener.tcpudp
	9,  // 4: yuhaiin.listener.inbound.quic:type_name -> yuhaiin.listener.quic2
	4,  // 5: yuhaiin.listener.inbound.transport:type_name -> yuhaiin.listener.transport
	10, // 6: yuhaiin.listener.inbound.http:type_name -> yuhaiin.listener.http
	11, // 7: yuhaiin.listener.inbound.socks5:type_name -> yuhaiin.listener.socks5
	18, // 8: yuhaiin.listener.inbound.yuubinsya:type_name -> yuhaiin.listener.yuubinsya
	13, // 9: yuhaiin.listener.inbound.mix:type_name -> yuhaiin.listener.mixed
	12, // 10: yuhaiin.listener.inbound.socks4a:type_name -> yuhaiin.listener.socks4a
	15, // 11: yuhaiin.listener.inbound.tproxy:type_name -> yuhaiin.listener.tproxy
	14, // 12: yuhaiin.listener.inbound.redir:type_name -> yuhaiin.listener.redir
	16, // 13: yuhaiin.listener.inbound.tun:type_name -> yuhaiin.listener.tun
	19, // 14: yuhaiin.listener.transport.normal:type_name -> yuhaiin.listener.normal
	22, // 15: yuhaiin.listener.transport.tls:type_name -> yuhaiin.listener.tls
	7,  // 16: yuhaiin.listener.transport.mux:type_name -> yuhaiin.listener.mux
	24, // 17: yuhaiin.listener.transport.http2:type_name -> yuhaiin.listener.http2
	20, // 18: yuhaiin.listener.transport.websocket:type_name -> yuhaiin.listener.websocket
	23, // 19: yuhaiin.listener.transport.grpc:type_name -> yuhaiin.listener.grpc
	25, // 20: yuhaiin.listener.transport.reality:type_name -> yuhaiin.listener.reality
	10, // 21: yuhaiin.listener.protocol.http:type_name -> yuhaiin.listener.http
	11, // 22: yuhaiin.listener.protocol.socks5:type_name -> yuhaiin.listener.socks5
	14, // 23: yuhaiin.listener.protocol.redir:type_name -> yuhaiin.listener.redir
	16, // 24: yuhaiin.listener.protocol.tun:type_name -> yuhaiin.listener.tun
	18, // 25: yuhaiin.listener.protocol.yuubinsya:type_name -> yuhaiin.listener.yuubinsya
	13, // 26: yuhaiin.listener.protocol.mix:type_name -> yuhaiin.listener.mixed
	12, // 27: yuhaiin.listener.protocol.socks4a:type_name -> yuhaiin.listener.socks4a
	15, // 28: yuhaiin.listener.protocol.tproxy:type_name -> yuhaiin.listener.tproxy
	0,  // 29: yuhaiin.listener.tcpudp.control:type_name -> yuhaiin.listener.tcp_udp_control
	26, // 30: yuhaiin.listener.quic2.tls:type_name -> yuhaiin.listener.tls_config
	1,  // 31: yuhaiin.listener.tun.driver:type_name -> yuhaiin.listener.tun.endpoint_driver
	17, // 32: yuhaiin.listener.tun.route:type_name -> yuhaiin.listener.route
	19, // 33: yuhaiin.listener.yuubinsya.normal:type_name -> yuhaiin.listener.normal
	22, // 34: yuhaiin.listener.yuubinsya.tls:type_name -> yuhaiin.listener.tls
	21, // 35: yuhaiin.listener.yuubinsya.quic:type_name -> yuhaiin.listener.quic
	20, // 36: yuhaiin.listener.yuubinsya.websocket:type_name -> yuhaiin.listener.websocket
	23, // 37: yuhaiin.listener.yuubinsya.grpc:type_name -> yuhaiin.listener.grpc
	24, // 38: yuhaiin.listener.yuubinsya.http2:type_name -> yuhaiin.listener.http2
	25, // 39: yuhaiin.listener.yuubinsya.reality:type_name -> yuhaiin.listener.reality
	26, // 40: yuhaiin.listener.websocket.tls:type_name -> yuhaiin.listener.tls_config
	26, // 41: yuhaiin.listener.quic.tls:type_name -> yuhaiin.listener.tls_config
	26, // 42: yuhaiin.listener.tls.tls:type_name -> yuhaiin.listener.tls_config
	26, // 43: yuhaiin.listener.grpc.tls:type_name -> yuhaiin.listener.tls_config
	26, // 44: yuhaiin.listener.http2.tls:type_name -> yuhaiin.listener.tls_config
	27, // 45: yuhaiin.listener.tls_config.certificates:type_name -> yuhaiin.listener.certificate
	31, // 46: yuhaiin.listener.tls_config.server_name_certificate:type_name -> yuhaiin.listener.tls_config.ServerNameCertificateEntry
	5,  // 47: yuhaiin.listener.inbound_config.ServersEntry.value:type_name -> yuhaiin.listener.protocol
	3,  // 48: yuhaiin.listener.inbound_config.InboundsEntry.value:type_name -> yuhaiin.listener.inbound
	27, // 49: yuhaiin.listener.tls_config.ServerNameCertificateEntry.value:type_name -> yuhaiin.listener.certificate
	50, // [50:50] is the sub-list for method output_type
	50, // [50:50] is the sub-list for method input_type
	50, // [50:50] is the sub-list for extension type_name
	50, // [50:50] is the sub-list for extension extendee
	0,  // [0:50] is the sub-list for field type_name
}

func init() { file_config_listener_listener_proto_init() }
func file_config_listener_listener_proto_init() {
	if File_config_listener_listener_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_config_listener_listener_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InboundConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_listener_listener_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Inbound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_listener_listener_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_listener_listener_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Protocol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_listener_listener_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_listener_listener_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mux); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_listener_listener_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tcpudp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_listener_listener_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quic2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_listener_listener_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Http); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_listener_listener_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Socks5); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_listener_listener_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Socks4A); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_listener_listener_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mixed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_listener_listener_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Redir); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_listener_listener_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tproxy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_listener_listener_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_listener_listener_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_listener_listener_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Yuubinsya); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_listener_listener_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Normal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_listener_listener_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Websocket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_listener_listener_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_listener_listener_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_listener_listener_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Grpc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_listener_listener_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Http2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_listener_listener_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_listener_listener_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TlsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_listener_listener_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Certificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_listener_listener_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YuubinsyaProtocolNormal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_config_listener_listener_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Inbound_Empty)(nil),
		(*Inbound_Tcpudp)(nil),
		(*Inbound_Quic)(nil),
		(*Inbound_Http)(nil),
		(*Inbound_Socks5)(nil),
		(*Inbound_Yuubinsya)(nil),
		(*Inbound_Mix)(nil),
		(*Inbound_Socks4A)(nil),
		(*Inbound_Tproxy)(nil),
		(*Inbound_Redir)(nil),
		(*Inbound_Tun)(nil),
	}
	file_config_listener_listener_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Transport_Normal)(nil),
		(*Transport_Tls)(nil),
		(*Transport_Mux)(nil),
		(*Transport_Http2)(nil),
		(*Transport_Websocket)(nil),
		(*Transport_Grpc)(nil),
		(*Transport_Reality)(nil),
	}
	file_config_listener_listener_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Protocol_Http)(nil),
		(*Protocol_Socks5)(nil),
		(*Protocol_Redir)(nil),
		(*Protocol_Tun)(nil),
		(*Protocol_Yuubinsya)(nil),
		(*Protocol_Mix)(nil),
		(*Protocol_Socks4A)(nil),
		(*Protocol_Tproxy)(nil),
	}
	file_config_listener_listener_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*Yuubinsya_Normal)(nil),
		(*Yuubinsya_Tls)(nil),
		(*Yuubinsya_Quic)(nil),
		(*Yuubinsya_Websocket)(nil),
		(*Yuubinsya_Grpc)(nil),
		(*Yuubinsya_Http2)(nil),
		(*Yuubinsya_Reality)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_listener_listener_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_listener_listener_proto_goTypes,
		DependencyIndexes: file_config_listener_listener_proto_depIdxs,
		EnumInfos:         file_config_listener_listener_proto_enumTypes,
		MessageInfos:      file_config_listener_listener_proto_msgTypes,
	}.Build()
	File_config_listener_listener_proto = out.File
	file_config_listener_listener_proto_rawDesc = nil
	file_config_listener_listener_proto_goTypes = nil
	file_config_listener_listener_proto_depIdxs = nil
}
