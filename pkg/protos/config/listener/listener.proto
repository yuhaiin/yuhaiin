edition = "2023";

package yuhaiin.listener;
import "google/protobuf/go_features.proto";

option go_package = "github.com/Asutorufa/yuhaiin/pkg/protos/config/listener";
option features.(pb.go).api_level = API_OPAQUE;

message inbound_config {
  reserved 5;
  reserved servers;
  bool hijack_dns = 2 [ json_name = "hijack_dns" ];
  bool hijack_dns_fakeip = 3 [ json_name = "hijack_dns_fakeip" ];
  map<string, inbound> inbounds = 1 [ json_name = "inbounds" ];
  sniff sniff = 4 [ json_name = "sniff" ];
}

message inbound {
  reserved 17;
  reserved IPv6;
  string name = 13 [ json_name = "name" ];
  bool enabled = 14 [ json_name = "enabled" ];
  oneof network {
    empty empty = 21 [ json_name = "empty" ];
    tcpudp tcpudp = 15 [ json_name = "tcpudp" ];
    quic quic = 16 [ json_name = "quic" ];
  }

  repeated transport transport = 2 [ json_name = "transport" ];

  oneof protocol {
    http http = 3 [ json_name = "http" ];
    socks5 socks5 = 4 [ json_name = "socks5" ];
    yuubinsya yuubinsya = 7 [ json_name = "yuubinsya" ];
    mixed mix = 8 [ json_name = "mixed" ];
    socks4a socks4a = 9 [ json_name = "socks4a" ];
    tproxy tproxy = 20 [ json_name = "tproxy" ];
    redir redir = 18 [ json_name = "redir" ];
    tun tun = 19 [ json_name = "tun" ];
    reverse_http reverse_http = 22 [ json_name = "reverse_http" ];
    reverse_tcp reverse_tcp = 23 [ json_name = "reverse_tcp" ];
    empty none = 24 [ json_name = "none" ];
  }
}

message transport {
  oneof transport {
    normal normal = 12 [ json_name = "normal" ];
    tls tls = 1 [ json_name = "tls" ];
    mux mux = 2 [ json_name = "mux" ];
    http2 http2 = 5 [ json_name = "http2" ];
    websocket websocket = 6 [ json_name = "websocket" ];
    grpc grpc = 11 [ json_name = "grpc" ];
    reality reality = 10 [ json_name = "reality" ];
    tls_auto tls_auto = 13 [ json_name = "tls_auto" ];
  }
}

message empty {}

message mux {}

enum tcp_udp_control {
  tcp_udp_control_all = 0;
  disable_tcp = 1;
  disable_udp = 2;
}

message tcpudp {
  string host = 1 [ json_name = "host" ];
  tcp_udp_control control = 2 [ json_name = "control" ];
}

message quic {
  string host = 1 [ json_name = "host" ];
  tls_config tls = 3 [ json_name = "tls" ];
}

message http {
  reserved 1;
  reserved host;
  string username = 3 [ json_name = "username" ];
  string password = 4 [ json_name = "password" ];
}

message socks5 {
  reserved 1;
  reserved host;
  string username = 3 [ json_name = "username" ];
  string password = 4 [ json_name = "password" ];
  bool udp = 5 [ json_name = "udp" ];
}

message socks4a {
  reserved 1;
  reserved host;
  string username = 2 [ json_name = "username" ];
}

message mixed {
  reserved 1;
  reserved host;
  string username = 3 [ json_name = "username" ];
  string password = 4 [ json_name = "password" ];
}

message redir { string host = 1 [ json_name = "host" ]; }

message tproxy {
  string host = 1 [ json_name = "host" ];
  bool dns_hijacking = 2 [ json_name = "dns_hijacking" ];
  bool force_fakeip = 3 [ json_name = "force_fakeip" ];
}

message tun {
  reserved 3, 4;
  reserved gateway, dns_hijacking;
  // name of the tun device
  // eg: tun://tun0, fd://123
  string name = 1 [ json_name = "name" ];
  int32 mtu = 2 [ json_name = "mtu" ];
  bool force_fakeip = 9 [ json_name = "force_fakeip" ];
  bool skip_multicast = 6 [ json_name = "skip_multicast" ];
  enum endpoint_driver {
    fdbased = 0;
    channel = 1;
    system_gvisor = 2;
  }
  endpoint_driver driver = 7 [ json_name = "driver" ];
  string portal = 8 [ json_name = "portal" ];
  string portal_v6 = 11 [ json_name = "portal_v6" ];
  route route = 10 [ json_name = "route" ];
  repeated string post_up = 12 [ json_name = "post_up" ];
  repeated string post_down = 13 [ json_name = "post_down" ];
}

message route {
  repeated string routes = 1 [ json_name = "routes" ];
  repeated string excludes = 2 [ json_name = "excludes" ];
}

message yuubinsya {
  reserved 1, 3, 4, 5, 6, 7, 8, 9, 10, 11;
  reserved host, force_disable_encrypt, normal, tls, quic, websocket, grpc,
      http2, reality, mux;
  string password = 2 [ json_name = "password" ];
  bool tcp_encrypt = 12 [ json_name = "tcp_encrypt" ];
  bool udp_encrypt = 13 [ json_name = "udp_encrypt" ];
}

message normal {};

message websocket {
  reserved 1;
  reserved tls;
};

message tls { tls_config tls = 1 [ json_name = "tls" ]; };

message grpc {
  reserved 1;
  reserved tls;
};

message http2 {
  reserved 1;
  reserved tls;
};

message reality {
  repeated string short_id = 1 [ json_name = "short_id" ];
  repeated string server_name = 2 [ json_name = "server_name" ];
  string dest = 3 [ json_name = "dest" ];
  string private_key = 4 [ json_name = "private_key" ];
  bool debug = 5 [ json_name = "debug" ];
}

message tls_config {
  repeated certificate certificates = 1 [ json_name = "certificates" ];
  repeated string next_protos = 3 [ json_name = "next_protos" ];
  map<string, certificate> server_name_certificate = 4
      [ json_name = "server_name_certificate" ];
}

message tls_auto {
  repeated string servernames = 1 [ json_name = "servernames" ];
  repeated string next_protos = 2 [ json_name = "next_protos" ];

  // ca cert and key will auto generate
  // so they will be empty
  bytes ca_cert = 3 [ json_name = "ca_cert" ];
  bytes ca_key = 4 [ json_name = "ca_key" ];

  ech_config ech = 5 [ json_name = "ech" ];
}

message ech_config {
  bool enable = 1 [ json_name = "enable" ];
  bytes config = 2 [ json_name = "config" ];
  bytes private_key = 3 [ json_name = "private_key" ];
  string OuterSNI = 4 [ json_name = "OuterSNI" ];
}

message certificate {
  bytes cert = 1 [ json_name = "cert" ];
  bytes key = 2 [ json_name = "key" ];

  string cert_file_path = 3 [ json_name = "cert_file_path" ];
  string key_file_path = 4 [ json_name = "key_file_path" ];
}

message sniff { bool enabled = 1 [ json_name = "enabled" ]; }

message reverse_http { string url = 1 [ json_name = "url" ]; }

message reverse_tcp { string host = 1 [ json_name = "host" ]; }