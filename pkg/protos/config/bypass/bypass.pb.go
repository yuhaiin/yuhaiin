// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v6.30.1
// source: config/bypass/bypass.proto

package bypass

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Mode int32

const (
	Mode_bypass Mode = 0
	Mode_direct Mode = 1
	Mode_proxy  Mode = 2
	Mode_block  Mode = 3
)

// Enum value maps for Mode.
var (
	Mode_name = map[int32]string{
		0: "bypass",
		1: "direct",
		2: "proxy",
		3: "block",
	}
	Mode_value = map[string]int32{
		"bypass": 0,
		"direct": 1,
		"proxy":  2,
		"block":  3,
	}
)

func (x Mode) Enum() *Mode {
	p := new(Mode)
	*p = x
	return p
}

func (x Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_config_bypass_bypass_proto_enumTypes[0].Descriptor()
}

func (Mode) Type() protoreflect.EnumType {
	return &file_config_bypass_bypass_proto_enumTypes[0]
}

func (x Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type ResolveStrategy int32

const (
	ResolveStrategy_default     ResolveStrategy = 0
	ResolveStrategy_prefer_ipv4 ResolveStrategy = 1
	ResolveStrategy_only_ipv4   ResolveStrategy = 2
	ResolveStrategy_prefer_ipv6 ResolveStrategy = 3
	ResolveStrategy_only_ipv6   ResolveStrategy = 4
)

// Enum value maps for ResolveStrategy.
var (
	ResolveStrategy_name = map[int32]string{
		0: "default",
		1: "prefer_ipv4",
		2: "only_ipv4",
		3: "prefer_ipv6",
		4: "only_ipv6",
	}
	ResolveStrategy_value = map[string]int32{
		"default":     0,
		"prefer_ipv4": 1,
		"only_ipv4":   2,
		"prefer_ipv6": 3,
		"only_ipv6":   4,
	}
)

func (x ResolveStrategy) Enum() *ResolveStrategy {
	p := new(ResolveStrategy)
	*p = x
	return p
}

func (x ResolveStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResolveStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_config_bypass_bypass_proto_enumTypes[1].Descriptor()
}

func (ResolveStrategy) Type() protoreflect.EnumType {
	return &file_config_bypass_bypass_proto_enumTypes[1]
}

func (x ResolveStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type UdpProxyFqdnStrategy int32

const (
	UdpProxyFqdnStrategy_udp_proxy_fqdn_strategy_default UdpProxyFqdnStrategy = 0
	UdpProxyFqdnStrategy_resolve                         UdpProxyFqdnStrategy = 1
	UdpProxyFqdnStrategy_skip_resolve                    UdpProxyFqdnStrategy = 2
)

// Enum value maps for UdpProxyFqdnStrategy.
var (
	UdpProxyFqdnStrategy_name = map[int32]string{
		0: "udp_proxy_fqdn_strategy_default",
		1: "resolve",
		2: "skip_resolve",
	}
	UdpProxyFqdnStrategy_value = map[string]int32{
		"udp_proxy_fqdn_strategy_default": 0,
		"resolve":                         1,
		"skip_resolve":                    2,
	}
)

func (x UdpProxyFqdnStrategy) Enum() *UdpProxyFqdnStrategy {
	p := new(UdpProxyFqdnStrategy)
	*p = x
	return p
}

func (x UdpProxyFqdnStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UdpProxyFqdnStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_config_bypass_bypass_proto_enumTypes[2].Descriptor()
}

func (UdpProxyFqdnStrategy) Type() protoreflect.EnumType {
	return &file_config_bypass_bypass_proto_enumTypes[2]
}

func (x UdpProxyFqdnStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type Config struct {
	state                     protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Tcp            Mode                   `protobuf:"varint,3,opt,name=tcp,enum=yuhaiin.bypass.Mode"`
	xxx_hidden_Udp            Mode                   `protobuf:"varint,4,opt,name=udp,enum=yuhaiin.bypass.Mode"`
	xxx_hidden_BypassFile     *string                `protobuf:"bytes,2,opt,name=bypass_file"`
	xxx_hidden_UdpProxyFqdn   UdpProxyFqdnStrategy   `protobuf:"varint,6,opt,name=udp_proxy_fqdn,enum=yuhaiin.bypass.UdpProxyFqdnStrategy"`
	xxx_hidden_CustomRuleV3   *[]*ModeConfig         `protobuf:"bytes,7,rep,name=custom_rule_v3"`
	xxx_hidden_RemoteRules    *[]*RemoteRule         `protobuf:"bytes,8,rep,name=remote_rules"`
	xxx_hidden_ResolveLocally bool                   `protobuf:"varint,9,opt,name=resolve_locally"`
	xxx_hidden_DirectResolver *string                `protobuf:"bytes,10,opt,name=direct_resolver"`
	xxx_hidden_ProxyResolver  *string                `protobuf:"bytes,11,opt,name=proxy_resolver"`
	XXX_raceDetectHookData    protoimpl.RaceDetectHookData
	XXX_presence              [1]uint32
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *Config) Reset() {
	*x = Config{}
	mi := &file_config_bypass_bypass_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_config_bypass_bypass_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Config) GetTcp() Mode {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 0) {
			return x.xxx_hidden_Tcp
		}
	}
	return Mode_bypass
}

func (x *Config) GetUdp() Mode {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 1) {
			return x.xxx_hidden_Udp
		}
	}
	return Mode_bypass
}

// Deprecated: Marked as deprecated in config/bypass/bypass.proto.
func (x *Config) GetBypassFile() string {
	if x != nil {
		if x.xxx_hidden_BypassFile != nil {
			return *x.xxx_hidden_BypassFile
		}
		return ""
	}
	return ""
}

func (x *Config) GetUdpProxyFqdn() UdpProxyFqdnStrategy {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 3) {
			return x.xxx_hidden_UdpProxyFqdn
		}
	}
	return UdpProxyFqdnStrategy_udp_proxy_fqdn_strategy_default
}

func (x *Config) GetCustomRuleV3() []*ModeConfig {
	if x != nil {
		if x.xxx_hidden_CustomRuleV3 != nil {
			return *x.xxx_hidden_CustomRuleV3
		}
	}
	return nil
}

func (x *Config) GetRemoteRules() []*RemoteRule {
	if x != nil {
		if x.xxx_hidden_RemoteRules != nil {
			return *x.xxx_hidden_RemoteRules
		}
	}
	return nil
}

func (x *Config) GetResolveLocally() bool {
	if x != nil {
		return x.xxx_hidden_ResolveLocally
	}
	return false
}

func (x *Config) GetDirectResolver() string {
	if x != nil {
		if x.xxx_hidden_DirectResolver != nil {
			return *x.xxx_hidden_DirectResolver
		}
		return ""
	}
	return ""
}

func (x *Config) GetProxyResolver() string {
	if x != nil {
		if x.xxx_hidden_ProxyResolver != nil {
			return *x.xxx_hidden_ProxyResolver
		}
		return ""
	}
	return ""
}

func (x *Config) SetTcp(v Mode) {
	x.xxx_hidden_Tcp = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 9)
}

func (x *Config) SetUdp(v Mode) {
	x.xxx_hidden_Udp = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 9)
}

// Deprecated: Marked as deprecated in config/bypass/bypass.proto.
func (x *Config) SetBypassFile(v string) {
	x.xxx_hidden_BypassFile = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 9)
}

func (x *Config) SetUdpProxyFqdn(v UdpProxyFqdnStrategy) {
	x.xxx_hidden_UdpProxyFqdn = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 9)
}

func (x *Config) SetCustomRuleV3(v []*ModeConfig) {
	x.xxx_hidden_CustomRuleV3 = &v
}

func (x *Config) SetRemoteRules(v []*RemoteRule) {
	x.xxx_hidden_RemoteRules = &v
}

func (x *Config) SetResolveLocally(v bool) {
	x.xxx_hidden_ResolveLocally = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 9)
}

func (x *Config) SetDirectResolver(v string) {
	x.xxx_hidden_DirectResolver = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 7, 9)
}

func (x *Config) SetProxyResolver(v string) {
	x.xxx_hidden_ProxyResolver = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 8, 9)
}

func (x *Config) HasTcp() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Config) HasUdp() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

// Deprecated: Marked as deprecated in config/bypass/bypass.proto.
func (x *Config) HasBypassFile() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *Config) HasUdpProxyFqdn() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *Config) HasResolveLocally() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *Config) HasDirectResolver() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 7)
}

func (x *Config) HasProxyResolver() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 8)
}

func (x *Config) ClearTcp() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Tcp = Mode_bypass
}

func (x *Config) ClearUdp() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Udp = Mode_bypass
}

// Deprecated: Marked as deprecated in config/bypass/bypass.proto.
func (x *Config) ClearBypassFile() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_BypassFile = nil
}

func (x *Config) ClearUdpProxyFqdn() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_UdpProxyFqdn = UdpProxyFqdnStrategy_udp_proxy_fqdn_strategy_default
}

func (x *Config) ClearResolveLocally() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_ResolveLocally = false
}

func (x *Config) ClearDirectResolver() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 7)
	x.xxx_hidden_DirectResolver = nil
}

func (x *Config) ClearProxyResolver() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 8)
	x.xxx_hidden_ProxyResolver = nil
}

type Config_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Tcp *Mode
	Udp *Mode
	// Deprecated: Marked as deprecated in config/bypass/bypass.proto.
	BypassFile   *string
	UdpProxyFqdn *UdpProxyFqdnStrategy
	CustomRuleV3 []*ModeConfig
	RemoteRules  []*RemoteRule
	// resolve domain locally
	ResolveLocally *bool
	DirectResolver *string
	ProxyResolver  *string
}

func (b0 Config_builder) Build() *Config {
	m0 := &Config{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Tcp != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 9)
		x.xxx_hidden_Tcp = *b.Tcp
	}
	if b.Udp != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 9)
		x.xxx_hidden_Udp = *b.Udp
	}
	if b.BypassFile != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 9)
		x.xxx_hidden_BypassFile = b.BypassFile
	}
	if b.UdpProxyFqdn != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 9)
		x.xxx_hidden_UdpProxyFqdn = *b.UdpProxyFqdn
	}
	x.xxx_hidden_CustomRuleV3 = &b.CustomRuleV3
	x.xxx_hidden_RemoteRules = &b.RemoteRules
	if b.ResolveLocally != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 9)
		x.xxx_hidden_ResolveLocally = *b.ResolveLocally
	}
	if b.DirectResolver != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 7, 9)
		x.xxx_hidden_DirectResolver = b.DirectResolver
	}
	if b.ProxyResolver != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 8, 9)
		x.xxx_hidden_ProxyResolver = b.ProxyResolver
	}
	return m0
}

type ModeConfig struct {
	state                           protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Mode                 Mode                   `protobuf:"varint,1,opt,name=mode,enum=yuhaiin.bypass.Mode"`
	xxx_hidden_Tag                  *string                `protobuf:"bytes,2,opt,name=tag"`
	xxx_hidden_Hostname             []string               `protobuf:"bytes,3,rep,name=hostname"`
	xxx_hidden_ResolveStrategy      ResolveStrategy        `protobuf:"varint,4,opt,name=resolve_strategy,enum=yuhaiin.bypass.ResolveStrategy"`
	xxx_hidden_UdpProxyFqdnStrategy UdpProxyFqdnStrategy   `protobuf:"varint,6,opt,name=udp_proxy_fqdn_strategy,enum=yuhaiin.bypass.UdpProxyFqdnStrategy"`
	xxx_hidden_Resolver             *string                `protobuf:"bytes,8,opt,name=resolver"`
	xxx_hidden_ErrorMsgs            map[string]string      `protobuf:"bytes,7,rep,name=error_msgs,json=error_msg" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_raceDetectHookData          protoimpl.RaceDetectHookData
	XXX_presence                    [1]uint32
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *ModeConfig) Reset() {
	*x = ModeConfig{}
	mi := &file_config_bypass_bypass_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModeConfig) ProtoMessage() {}

func (x *ModeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_bypass_bypass_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ModeConfig) GetMode() Mode {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 0) {
			return x.xxx_hidden_Mode
		}
	}
	return Mode_bypass
}

func (x *ModeConfig) GetTag() string {
	if x != nil {
		if x.xxx_hidden_Tag != nil {
			return *x.xxx_hidden_Tag
		}
		return ""
	}
	return ""
}

func (x *ModeConfig) GetHostname() []string {
	if x != nil {
		return x.xxx_hidden_Hostname
	}
	return nil
}

func (x *ModeConfig) GetResolveStrategy() ResolveStrategy {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 3) {
			return x.xxx_hidden_ResolveStrategy
		}
	}
	return ResolveStrategy_default
}

func (x *ModeConfig) GetUdpProxyFqdnStrategy() UdpProxyFqdnStrategy {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 4) {
			return x.xxx_hidden_UdpProxyFqdnStrategy
		}
	}
	return UdpProxyFqdnStrategy_udp_proxy_fqdn_strategy_default
}

func (x *ModeConfig) GetResolver() string {
	if x != nil {
		if x.xxx_hidden_Resolver != nil {
			return *x.xxx_hidden_Resolver
		}
		return ""
	}
	return ""
}

func (x *ModeConfig) GetErrorMsgs() map[string]string {
	if x != nil {
		return x.xxx_hidden_ErrorMsgs
	}
	return nil
}

func (x *ModeConfig) SetMode(v Mode) {
	x.xxx_hidden_Mode = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 7)
}

func (x *ModeConfig) SetTag(v string) {
	x.xxx_hidden_Tag = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 7)
}

func (x *ModeConfig) SetHostname(v []string) {
	x.xxx_hidden_Hostname = v
}

func (x *ModeConfig) SetResolveStrategy(v ResolveStrategy) {
	x.xxx_hidden_ResolveStrategy = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 7)
}

func (x *ModeConfig) SetUdpProxyFqdnStrategy(v UdpProxyFqdnStrategy) {
	x.xxx_hidden_UdpProxyFqdnStrategy = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 7)
}

func (x *ModeConfig) SetResolver(v string) {
	x.xxx_hidden_Resolver = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 7)
}

func (x *ModeConfig) SetErrorMsgs(v map[string]string) {
	x.xxx_hidden_ErrorMsgs = v
}

func (x *ModeConfig) HasMode() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *ModeConfig) HasTag() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *ModeConfig) HasResolveStrategy() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *ModeConfig) HasUdpProxyFqdnStrategy() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *ModeConfig) HasResolver() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *ModeConfig) ClearMode() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Mode = Mode_bypass
}

func (x *ModeConfig) ClearTag() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Tag = nil
}

func (x *ModeConfig) ClearResolveStrategy() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_ResolveStrategy = ResolveStrategy_default
}

func (x *ModeConfig) ClearUdpProxyFqdnStrategy() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_UdpProxyFqdnStrategy = UdpProxyFqdnStrategy_udp_proxy_fqdn_strategy_default
}

func (x *ModeConfig) ClearResolver() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_Resolver = nil
}

type ModeConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Mode                 *Mode
	Tag                  *string
	Hostname             []string
	ResolveStrategy      *ResolveStrategy
	UdpProxyFqdnStrategy *UdpProxyFqdnStrategy
	Resolver             *string
	ErrorMsgs            map[string]string
}

func (b0 ModeConfig_builder) Build() *ModeConfig {
	m0 := &ModeConfig{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Mode != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 7)
		x.xxx_hidden_Mode = *b.Mode
	}
	if b.Tag != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 7)
		x.xxx_hidden_Tag = b.Tag
	}
	x.xxx_hidden_Hostname = b.Hostname
	if b.ResolveStrategy != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 7)
		x.xxx_hidden_ResolveStrategy = *b.ResolveStrategy
	}
	if b.UdpProxyFqdnStrategy != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 7)
		x.xxx_hidden_UdpProxyFqdnStrategy = *b.UdpProxyFqdnStrategy
	}
	if b.Resolver != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 7)
		x.xxx_hidden_Resolver = b.Resolver
	}
	x.xxx_hidden_ErrorMsgs = b.ErrorMsgs
	return m0
}

type RemoteRule struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Enabled     bool                   `protobuf:"varint,1,opt,name=enabled"`
	xxx_hidden_Name        *string                `protobuf:"bytes,2,opt,name=name"`
	xxx_hidden_Object      isRemoteRule_Object    `protobuf_oneof:"object"`
	xxx_hidden_ErrorMsg    *string                `protobuf:"bytes,5,opt,name=error_msg"`
	xxx_hidden_DefaultMode *ModeConfig            `protobuf:"bytes,6,opt,name=default_mode"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *RemoteRule) Reset() {
	*x = RemoteRule{}
	mi := &file_config_bypass_bypass_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoteRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteRule) ProtoMessage() {}

func (x *RemoteRule) ProtoReflect() protoreflect.Message {
	mi := &file_config_bypass_bypass_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *RemoteRule) GetEnabled() bool {
	if x != nil {
		return x.xxx_hidden_Enabled
	}
	return false
}

func (x *RemoteRule) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *RemoteRule) GetFile() *RemoteRuleFile {
	if x != nil {
		if x, ok := x.xxx_hidden_Object.(*remoteRule_File); ok {
			return x.File
		}
	}
	return nil
}

func (x *RemoteRule) GetHttp() *RemoteRuleHttp {
	if x != nil {
		if x, ok := x.xxx_hidden_Object.(*remoteRule_Http); ok {
			return x.Http
		}
	}
	return nil
}

func (x *RemoteRule) GetErrorMsg() string {
	if x != nil {
		if x.xxx_hidden_ErrorMsg != nil {
			return *x.xxx_hidden_ErrorMsg
		}
		return ""
	}
	return ""
}

func (x *RemoteRule) GetDefaultMode() *ModeConfig {
	if x != nil {
		return x.xxx_hidden_DefaultMode
	}
	return nil
}

func (x *RemoteRule) SetEnabled(v bool) {
	x.xxx_hidden_Enabled = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 5)
}

func (x *RemoteRule) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 5)
}

func (x *RemoteRule) SetFile(v *RemoteRuleFile) {
	if v == nil {
		x.xxx_hidden_Object = nil
		return
	}
	x.xxx_hidden_Object = &remoteRule_File{v}
}

func (x *RemoteRule) SetHttp(v *RemoteRuleHttp) {
	if v == nil {
		x.xxx_hidden_Object = nil
		return
	}
	x.xxx_hidden_Object = &remoteRule_Http{v}
}

func (x *RemoteRule) SetErrorMsg(v string) {
	x.xxx_hidden_ErrorMsg = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 5)
}

func (x *RemoteRule) SetDefaultMode(v *ModeConfig) {
	x.xxx_hidden_DefaultMode = v
}

func (x *RemoteRule) HasEnabled() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *RemoteRule) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *RemoteRule) HasObject() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Object != nil
}

func (x *RemoteRule) HasFile() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Object.(*remoteRule_File)
	return ok
}

func (x *RemoteRule) HasHttp() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Object.(*remoteRule_Http)
	return ok
}

func (x *RemoteRule) HasErrorMsg() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *RemoteRule) HasDefaultMode() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_DefaultMode != nil
}

func (x *RemoteRule) ClearEnabled() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Enabled = false
}

func (x *RemoteRule) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Name = nil
}

func (x *RemoteRule) ClearObject() {
	x.xxx_hidden_Object = nil
}

func (x *RemoteRule) ClearFile() {
	if _, ok := x.xxx_hidden_Object.(*remoteRule_File); ok {
		x.xxx_hidden_Object = nil
	}
}

func (x *RemoteRule) ClearHttp() {
	if _, ok := x.xxx_hidden_Object.(*remoteRule_Http); ok {
		x.xxx_hidden_Object = nil
	}
}

func (x *RemoteRule) ClearErrorMsg() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_ErrorMsg = nil
}

func (x *RemoteRule) ClearDefaultMode() {
	x.xxx_hidden_DefaultMode = nil
}

const RemoteRule_Object_not_set_case case_RemoteRule_Object = 0
const RemoteRule_File_case case_RemoteRule_Object = 3
const RemoteRule_Http_case case_RemoteRule_Object = 4

func (x *RemoteRule) WhichObject() case_RemoteRule_Object {
	if x == nil {
		return RemoteRule_Object_not_set_case
	}
	switch x.xxx_hidden_Object.(type) {
	case *remoteRule_File:
		return RemoteRule_File_case
	case *remoteRule_Http:
		return RemoteRule_Http_case
	default:
		return RemoteRule_Object_not_set_case
	}
}

type RemoteRule_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Enabled *bool
	Name    *string
	// Fields of oneof xxx_hidden_Object:
	File *RemoteRuleFile
	Http *RemoteRuleHttp
	// -- end of xxx_hidden_Object
	// error message when rules can't get from remote
	ErrorMsg    *string
	DefaultMode *ModeConfig
}

func (b0 RemoteRule_builder) Build() *RemoteRule {
	m0 := &RemoteRule{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Enabled != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 5)
		x.xxx_hidden_Enabled = *b.Enabled
	}
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 5)
		x.xxx_hidden_Name = b.Name
	}
	if b.File != nil {
		x.xxx_hidden_Object = &remoteRule_File{b.File}
	}
	if b.Http != nil {
		x.xxx_hidden_Object = &remoteRule_Http{b.Http}
	}
	if b.ErrorMsg != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 5)
		x.xxx_hidden_ErrorMsg = b.ErrorMsg
	}
	x.xxx_hidden_DefaultMode = b.DefaultMode
	return m0
}

type case_RemoteRule_Object protoreflect.FieldNumber

func (x case_RemoteRule_Object) String() string {
	md := file_config_bypass_bypass_proto_msgTypes[2].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isRemoteRule_Object interface {
	isRemoteRule_Object()
}

type remoteRule_File struct {
	File *RemoteRuleFile `protobuf:"bytes,3,opt,name=file,oneof"`
}

type remoteRule_Http struct {
	Http *RemoteRuleHttp `protobuf:"bytes,4,opt,name=http,oneof"`
}

func (*remoteRule_File) isRemoteRule_Object() {}

func (*remoteRule_Http) isRemoteRule_Object() {}

type RemoteRuleFile struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Path        *string                `protobuf:"bytes,1,opt,name=path"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *RemoteRuleFile) Reset() {
	*x = RemoteRuleFile{}
	mi := &file_config_bypass_bypass_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoteRuleFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteRuleFile) ProtoMessage() {}

func (x *RemoteRuleFile) ProtoReflect() protoreflect.Message {
	mi := &file_config_bypass_bypass_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *RemoteRuleFile) GetPath() string {
	if x != nil {
		if x.xxx_hidden_Path != nil {
			return *x.xxx_hidden_Path
		}
		return ""
	}
	return ""
}

func (x *RemoteRuleFile) SetPath(v string) {
	x.xxx_hidden_Path = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *RemoteRuleFile) HasPath() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *RemoteRuleFile) ClearPath() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Path = nil
}

type RemoteRuleFile_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Path *string
}

func (b0 RemoteRuleFile_builder) Build() *RemoteRuleFile {
	m0 := &RemoteRuleFile{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Path != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_Path = b.Path
	}
	return m0
}

type RemoteRuleHttp struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Url         *string                `protobuf:"bytes,1,opt,name=url"`
	xxx_hidden_Method      *string                `protobuf:"bytes,2,opt,name=method"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *RemoteRuleHttp) Reset() {
	*x = RemoteRuleHttp{}
	mi := &file_config_bypass_bypass_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoteRuleHttp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteRuleHttp) ProtoMessage() {}

func (x *RemoteRuleHttp) ProtoReflect() protoreflect.Message {
	mi := &file_config_bypass_bypass_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *RemoteRuleHttp) GetUrl() string {
	if x != nil {
		if x.xxx_hidden_Url != nil {
			return *x.xxx_hidden_Url
		}
		return ""
	}
	return ""
}

func (x *RemoteRuleHttp) GetMethod() string {
	if x != nil {
		if x.xxx_hidden_Method != nil {
			return *x.xxx_hidden_Method
		}
		return ""
	}
	return ""
}

func (x *RemoteRuleHttp) SetUrl(v string) {
	x.xxx_hidden_Url = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *RemoteRuleHttp) SetMethod(v string) {
	x.xxx_hidden_Method = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *RemoteRuleHttp) HasUrl() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *RemoteRuleHttp) HasMethod() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *RemoteRuleHttp) ClearUrl() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Url = nil
}

func (x *RemoteRuleHttp) ClearMethod() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Method = nil
}

type RemoteRuleHttp_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Url *string
	// method of http request, default: GET
	Method *string
}

func (b0 RemoteRuleHttp_builder) Build() *RemoteRuleHttp {
	m0 := &RemoteRuleHttp{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Url != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Url = b.Url
	}
	if b.Method != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Method = b.Method
	}
	return m0
}

var File_config_bypass_bypass_proto protoreflect.FileDescriptor

var file_config_bypass_bypass_proto_rawDesc = string([]byte{
	0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x2f,
	0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x79, 0x75,
	0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x1a, 0x21, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x6f,
	0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xd1, 0x03, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x03, 0x74, 0x63,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69,
	0x6e, 0x2e, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x74,
	0x63, 0x70, 0x12, 0x26, 0x0a, 0x03, 0x75, 0x64, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x75, 0x64, 0x70, 0x12, 0x24, 0x0a, 0x0b, 0x62, 0x79,
	0x70, 0x61, 0x73, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x0b, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x4f, 0x0a, 0x0e, 0x75, 0x64, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x66, 0x71,
	0x64, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69,
	0x69, 0x6e, 0x2e, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x75, 0x64, 0x70, 0x5f, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x5f, 0x66, 0x71, 0x64, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x52, 0x0e, 0x75, 0x64, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x66, 0x71, 0x64,
	0x6e, 0x12, 0x43, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x5f, 0x76, 0x33, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x75, 0x68, 0x61,
	0x69, 0x69, 0x6e, 0x2e, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x5f, 0x76, 0x33, 0x12, 0x3f, 0x0a, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79,
	0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x6c,
	0x79, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x72, 0x22, 0xd1, 0x03, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x28, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x62, 0x79, 0x70, 0x61,
	0x73, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x10, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e,
	0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x61, 0x0a, 0x17, 0x75, 0x64, 0x70,
	0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x66, 0x71, 0x64, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x79, 0x75, 0x68,
	0x61, 0x69, 0x69, 0x6e, 0x2e, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x75, 0x64, 0x70, 0x5f,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x66, 0x71, 0x64, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x52, 0x17, 0x75, 0x64, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x66,
	0x71, 0x64, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x6d, 0x73, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x79,
	0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x73, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x6d, 0x73, 0x67, 0x1a, 0x3c, 0x0a, 0x0e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x52, 0x0e, 0x75, 0x64, 0x70, 0x5f, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x5f, 0x66, 0x71, 0x64, 0x6e, 0x22, 0x94, 0x02, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x62, 0x79,
	0x70, 0x61, 0x73, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x36, 0x0a,
	0x04, 0x68, 0x74, 0x74, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x75,
	0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x48, 0x00, 0x52,
	0x04, 0x68, 0x74, 0x74, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d,
	0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x6d, 0x73, 0x67, 0x12, 0x3f, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x75, 0x68, 0x61,
	0x69, 0x69, 0x6e, 0x2e, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x26,
	0x0a, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x3c, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x2a, 0x34, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x0a, 0x0a, 0x06,
	0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x10, 0x02, 0x12,
	0x09, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x10, 0x03, 0x2a, 0x5f, 0x0a, 0x10, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x0b,
	0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09,
	0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x10, 0x04, 0x2a, 0x5d, 0x0a, 0x17, 0x75,
	0x64, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x66, 0x71, 0x64, 0x6e, 0x5f, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x23, 0x0a, 0x1f, 0x75, 0x64, 0x70, 0x5f, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x5f, 0x66, 0x71, 0x64, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x73, 0x6b, 0x69, 0x70,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x10, 0x02, 0x42, 0x3f, 0x5a, 0x35, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x73, 0x75, 0x74, 0x6f, 0x72, 0x75,
	0x66, 0x61, 0x2f, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x62, 0x79, 0x70,
	0x61, 0x73, 0x73, 0x92, 0x03, 0x05, 0xd2, 0x3e, 0x02, 0x10, 0x03, 0x62, 0x08, 0x65, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0xe8, 0x07,
})

var file_config_bypass_bypass_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_config_bypass_bypass_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_config_bypass_bypass_proto_goTypes = []any{
	(Mode)(0),                 // 0: yuhaiin.bypass.mode
	(ResolveStrategy)(0),      // 1: yuhaiin.bypass.resolve_strategy
	(UdpProxyFqdnStrategy)(0), // 2: yuhaiin.bypass.udp_proxy_fqdn_strategy
	(*Config)(nil),            // 3: yuhaiin.bypass.config
	(*ModeConfig)(nil),        // 4: yuhaiin.bypass.mode_config
	(*RemoteRule)(nil),        // 5: yuhaiin.bypass.remote_rule
	(*RemoteRuleFile)(nil),    // 6: yuhaiin.bypass.remote_rule_file
	(*RemoteRuleHttp)(nil),    // 7: yuhaiin.bypass.remote_rule_http
	nil,                       // 8: yuhaiin.bypass.mode_config.ErrorMsgsEntry
}
var file_config_bypass_bypass_proto_depIdxs = []int32{
	0,  // 0: yuhaiin.bypass.config.tcp:type_name -> yuhaiin.bypass.mode
	0,  // 1: yuhaiin.bypass.config.udp:type_name -> yuhaiin.bypass.mode
	2,  // 2: yuhaiin.bypass.config.udp_proxy_fqdn:type_name -> yuhaiin.bypass.udp_proxy_fqdn_strategy
	4,  // 3: yuhaiin.bypass.config.custom_rule_v3:type_name -> yuhaiin.bypass.mode_config
	5,  // 4: yuhaiin.bypass.config.remote_rules:type_name -> yuhaiin.bypass.remote_rule
	0,  // 5: yuhaiin.bypass.mode_config.mode:type_name -> yuhaiin.bypass.mode
	1,  // 6: yuhaiin.bypass.mode_config.resolve_strategy:type_name -> yuhaiin.bypass.resolve_strategy
	2,  // 7: yuhaiin.bypass.mode_config.udp_proxy_fqdn_strategy:type_name -> yuhaiin.bypass.udp_proxy_fqdn_strategy
	8,  // 8: yuhaiin.bypass.mode_config.error_msgs:type_name -> yuhaiin.bypass.mode_config.ErrorMsgsEntry
	6,  // 9: yuhaiin.bypass.remote_rule.file:type_name -> yuhaiin.bypass.remote_rule_file
	7,  // 10: yuhaiin.bypass.remote_rule.http:type_name -> yuhaiin.bypass.remote_rule_http
	4,  // 11: yuhaiin.bypass.remote_rule.default_mode:type_name -> yuhaiin.bypass.mode_config
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_config_bypass_bypass_proto_init() }
func file_config_bypass_bypass_proto_init() {
	if File_config_bypass_bypass_proto != nil {
		return
	}
	file_config_bypass_bypass_proto_msgTypes[2].OneofWrappers = []any{
		(*remoteRule_File)(nil),
		(*remoteRule_Http)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_config_bypass_bypass_proto_rawDesc), len(file_config_bypass_bypass_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_bypass_bypass_proto_goTypes,
		DependencyIndexes: file_config_bypass_bypass_proto_depIdxs,
		EnumInfos:         file_config_bypass_bypass_proto_enumTypes,
		MessageInfos:      file_config_bypass_bypass_proto_msgTypes,
	}.Build()
	File_config_bypass_bypass_proto = out.File
	file_config_bypass_bypass_proto_goTypes = nil
	file_config_bypass_bypass_proto_depIdxs = nil
}
