// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v6.30.1
// source: config/grpc/config.proto

package service

import (
	config "github.com/Asutorufa/yuhaiin/pkg/protos/config"
	bypass "github.com/Asutorufa/yuhaiin/pkg/protos/config/bypass"
	dns "github.com/Asutorufa/yuhaiin/pkg/protos/config/dns"
	listener "github.com/Asutorufa/yuhaiin/pkg/protos/config/listener"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestResponse struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Mode        *bypass.ModeConfig     `protobuf:"bytes,1,opt,name=mode"`
	xxx_hidden_Reason      *string                `protobuf:"bytes,2,opt,name=reason"`
	xxx_hidden_AfterAddr   *string                `protobuf:"bytes,3,opt,name=after_addr"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TestResponse) Reset() {
	*x = TestResponse{}
	mi := &file_config_grpc_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResponse) ProtoMessage() {}

func (x *TestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_config_grpc_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestResponse) GetMode() *bypass.ModeConfig {
	if x != nil {
		return x.xxx_hidden_Mode
	}
	return nil
}

func (x *TestResponse) GetReason() string {
	if x != nil {
		if x.xxx_hidden_Reason != nil {
			return *x.xxx_hidden_Reason
		}
		return ""
	}
	return ""
}

func (x *TestResponse) GetAfterAddr() string {
	if x != nil {
		if x.xxx_hidden_AfterAddr != nil {
			return *x.xxx_hidden_AfterAddr
		}
		return ""
	}
	return ""
}

func (x *TestResponse) SetMode(v *bypass.ModeConfig) {
	x.xxx_hidden_Mode = v
}

func (x *TestResponse) SetReason(v string) {
	x.xxx_hidden_Reason = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *TestResponse) SetAfterAddr(v string) {
	x.xxx_hidden_AfterAddr = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *TestResponse) HasMode() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Mode != nil
}

func (x *TestResponse) HasReason() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *TestResponse) HasAfterAddr() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *TestResponse) ClearMode() {
	x.xxx_hidden_Mode = nil
}

func (x *TestResponse) ClearReason() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Reason = nil
}

func (x *TestResponse) ClearAfterAddr() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_AfterAddr = nil
}

type TestResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Mode      *bypass.ModeConfig
	Reason    *string
	AfterAddr *string
}

func (b0 TestResponse_builder) Build() *TestResponse {
	m0 := &TestResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Mode = b.Mode
	if b.Reason != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_Reason = b.Reason
	}
	if b.AfterAddr != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_AfterAddr = b.AfterAddr
	}
	return m0
}

type BlockHistory struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Protocol    *string                `protobuf:"bytes,1,opt,name=protocol"`
	xxx_hidden_Host        *string                `protobuf:"bytes,2,opt,name=host"`
	xxx_hidden_Time        *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time"`
	xxx_hidden_Process     *string                `protobuf:"bytes,4,opt,name=process"`
	xxx_hidden_BlockCount  uint64                 `protobuf:"varint,5,opt,name=block_count"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *BlockHistory) Reset() {
	*x = BlockHistory{}
	mi := &file_config_grpc_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHistory) ProtoMessage() {}

func (x *BlockHistory) ProtoReflect() protoreflect.Message {
	mi := &file_config_grpc_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *BlockHistory) GetProtocol() string {
	if x != nil {
		if x.xxx_hidden_Protocol != nil {
			return *x.xxx_hidden_Protocol
		}
		return ""
	}
	return ""
}

func (x *BlockHistory) GetHost() string {
	if x != nil {
		if x.xxx_hidden_Host != nil {
			return *x.xxx_hidden_Host
		}
		return ""
	}
	return ""
}

func (x *BlockHistory) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_Time
	}
	return nil
}

func (x *BlockHistory) GetProcess() string {
	if x != nil {
		if x.xxx_hidden_Process != nil {
			return *x.xxx_hidden_Process
		}
		return ""
	}
	return ""
}

func (x *BlockHistory) GetBlockCount() uint64 {
	if x != nil {
		return x.xxx_hidden_BlockCount
	}
	return 0
}

func (x *BlockHistory) SetProtocol(v string) {
	x.xxx_hidden_Protocol = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 5)
}

func (x *BlockHistory) SetHost(v string) {
	x.xxx_hidden_Host = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 5)
}

func (x *BlockHistory) SetTime(v *timestamppb.Timestamp) {
	x.xxx_hidden_Time = v
}

func (x *BlockHistory) SetProcess(v string) {
	x.xxx_hidden_Process = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 5)
}

func (x *BlockHistory) SetBlockCount(v uint64) {
	x.xxx_hidden_BlockCount = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 5)
}

func (x *BlockHistory) HasProtocol() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *BlockHistory) HasHost() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *BlockHistory) HasTime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Time != nil
}

func (x *BlockHistory) HasProcess() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *BlockHistory) HasBlockCount() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *BlockHistory) ClearProtocol() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Protocol = nil
}

func (x *BlockHistory) ClearHost() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Host = nil
}

func (x *BlockHistory) ClearTime() {
	x.xxx_hidden_Time = nil
}

func (x *BlockHistory) ClearProcess() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Process = nil
}

func (x *BlockHistory) ClearBlockCount() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_BlockCount = 0
}

type BlockHistory_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Protocol   *string
	Host       *string
	Time       *timestamppb.Timestamp
	Process    *string
	BlockCount *uint64
}

func (b0 BlockHistory_builder) Build() *BlockHistory {
	m0 := &BlockHistory{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Protocol != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 5)
		x.xxx_hidden_Protocol = b.Protocol
	}
	if b.Host != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 5)
		x.xxx_hidden_Host = b.Host
	}
	x.xxx_hidden_Time = b.Time
	if b.Process != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 5)
		x.xxx_hidden_Process = b.Process
	}
	if b.BlockCount != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 5)
		x.xxx_hidden_BlockCount = *b.BlockCount
	}
	return m0
}

type BlockHistoryList struct {
	state                         protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Objects            *[]*BlockHistory       `protobuf:"bytes,1,rep,name=objects"`
	xxx_hidden_DumpProcessEnabled bool                   `protobuf:"varint,2,opt,name=dump_process_enabled"`
	XXX_raceDetectHookData        protoimpl.RaceDetectHookData
	XXX_presence                  [1]uint32
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *BlockHistoryList) Reset() {
	*x = BlockHistoryList{}
	mi := &file_config_grpc_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockHistoryList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHistoryList) ProtoMessage() {}

func (x *BlockHistoryList) ProtoReflect() protoreflect.Message {
	mi := &file_config_grpc_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *BlockHistoryList) GetObjects() []*BlockHistory {
	if x != nil {
		if x.xxx_hidden_Objects != nil {
			return *x.xxx_hidden_Objects
		}
	}
	return nil
}

func (x *BlockHistoryList) GetDumpProcessEnabled() bool {
	if x != nil {
		return x.xxx_hidden_DumpProcessEnabled
	}
	return false
}

func (x *BlockHistoryList) SetObjects(v []*BlockHistory) {
	x.xxx_hidden_Objects = &v
}

func (x *BlockHistoryList) SetDumpProcessEnabled(v bool) {
	x.xxx_hidden_DumpProcessEnabled = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *BlockHistoryList) HasDumpProcessEnabled() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *BlockHistoryList) ClearDumpProcessEnabled() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_DumpProcessEnabled = false
}

type BlockHistoryList_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Objects            []*BlockHistory
	DumpProcessEnabled *bool
}

func (b0 BlockHistoryList_builder) Build() *BlockHistoryList {
	m0 := &BlockHistoryList{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Objects = &b.Objects
	if b.DumpProcessEnabled != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_DumpProcessEnabled = *b.DumpProcessEnabled
	}
	return m0
}

type InboundsResponse struct {
	state                      protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Names           []string               `protobuf:"bytes,1,rep,name=names"`
	xxx_hidden_HijackDns       bool                   `protobuf:"varint,2,opt,name=hijack_dns"`
	xxx_hidden_HijackDnsFakeip bool                   `protobuf:"varint,3,opt,name=hijack_dns_fakeip"`
	xxx_hidden_Sniff           *listener.Sniff        `protobuf:"bytes,4,opt,name=sniff"`
	XXX_raceDetectHookData     protoimpl.RaceDetectHookData
	XXX_presence               [1]uint32
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *InboundsResponse) Reset() {
	*x = InboundsResponse{}
	mi := &file_config_grpc_config_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InboundsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InboundsResponse) ProtoMessage() {}

func (x *InboundsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_config_grpc_config_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *InboundsResponse) GetNames() []string {
	if x != nil {
		return x.xxx_hidden_Names
	}
	return nil
}

func (x *InboundsResponse) GetHijackDns() bool {
	if x != nil {
		return x.xxx_hidden_HijackDns
	}
	return false
}

func (x *InboundsResponse) GetHijackDnsFakeip() bool {
	if x != nil {
		return x.xxx_hidden_HijackDnsFakeip
	}
	return false
}

func (x *InboundsResponse) GetSniff() *listener.Sniff {
	if x != nil {
		return x.xxx_hidden_Sniff
	}
	return nil
}

func (x *InboundsResponse) SetNames(v []string) {
	x.xxx_hidden_Names = v
}

func (x *InboundsResponse) SetHijackDns(v bool) {
	x.xxx_hidden_HijackDns = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 4)
}

func (x *InboundsResponse) SetHijackDnsFakeip(v bool) {
	x.xxx_hidden_HijackDnsFakeip = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 4)
}

func (x *InboundsResponse) SetSniff(v *listener.Sniff) {
	x.xxx_hidden_Sniff = v
}

func (x *InboundsResponse) HasHijackDns() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *InboundsResponse) HasHijackDnsFakeip() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *InboundsResponse) HasSniff() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Sniff != nil
}

func (x *InboundsResponse) ClearHijackDns() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_HijackDns = false
}

func (x *InboundsResponse) ClearHijackDnsFakeip() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_HijackDnsFakeip = false
}

func (x *InboundsResponse) ClearSniff() {
	x.xxx_hidden_Sniff = nil
}

type InboundsResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Names           []string
	HijackDns       *bool
	HijackDnsFakeip *bool
	Sniff           *listener.Sniff
}

func (b0 InboundsResponse_builder) Build() *InboundsResponse {
	m0 := &InboundsResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Names = b.Names
	if b.HijackDns != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 4)
		x.xxx_hidden_HijackDns = *b.HijackDns
	}
	if b.HijackDnsFakeip != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 4)
		x.xxx_hidden_HijackDnsFakeip = *b.HijackDnsFakeip
	}
	x.xxx_hidden_Sniff = b.Sniff
	return m0
}

type ResolveList struct {
	state            protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Names []string               `protobuf:"bytes,1,rep,name=names"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ResolveList) Reset() {
	*x = ResolveList{}
	mi := &file_config_grpc_config_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolveList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveList) ProtoMessage() {}

func (x *ResolveList) ProtoReflect() protoreflect.Message {
	mi := &file_config_grpc_config_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ResolveList) GetNames() []string {
	if x != nil {
		return x.xxx_hidden_Names
	}
	return nil
}

func (x *ResolveList) SetNames(v []string) {
	x.xxx_hidden_Names = v
}

type ResolveList_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Names []string
}

func (b0 ResolveList_builder) Build() *ResolveList {
	m0 := &ResolveList{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Names = b.Names
	return m0
}

type SaveResolver struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Name        *string                `protobuf:"bytes,1,opt,name=name"`
	xxx_hidden_Resolver    *dns.Dns               `protobuf:"bytes,2,opt,name=resolver"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *SaveResolver) Reset() {
	*x = SaveResolver{}
	mi := &file_config_grpc_config_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveResolver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveResolver) ProtoMessage() {}

func (x *SaveResolver) ProtoReflect() protoreflect.Message {
	mi := &file_config_grpc_config_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SaveResolver) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *SaveResolver) GetResolver() *dns.Dns {
	if x != nil {
		return x.xxx_hidden_Resolver
	}
	return nil
}

func (x *SaveResolver) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *SaveResolver) SetResolver(v *dns.Dns) {
	x.xxx_hidden_Resolver = v
}

func (x *SaveResolver) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *SaveResolver) HasResolver() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Resolver != nil
}

func (x *SaveResolver) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Name = nil
}

func (x *SaveResolver) ClearResolver() {
	x.xxx_hidden_Resolver = nil
}

type SaveResolver_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Name     *string
	Resolver *dns.Dns
}

func (b0 SaveResolver_builder) Build() *SaveResolver {
	m0 := &SaveResolver{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Name = b.Name
	}
	x.xxx_hidden_Resolver = b.Resolver
	return m0
}

type Hosts struct {
	state            protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Hosts map[string]string      `protobuf:"bytes,1,rep,name=hosts" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Hosts) Reset() {
	*x = Hosts{}
	mi := &file_config_grpc_config_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Hosts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hosts) ProtoMessage() {}

func (x *Hosts) ProtoReflect() protoreflect.Message {
	mi := &file_config_grpc_config_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Hosts) GetHosts() map[string]string {
	if x != nil {
		return x.xxx_hidden_Hosts
	}
	return nil
}

func (x *Hosts) SetHosts(v map[string]string) {
	x.xxx_hidden_Hosts = v
}

type Hosts_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Hosts map[string]string
}

func (b0 Hosts_builder) Build() *Hosts {
	m0 := &Hosts{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Hosts = b.Hosts
	return m0
}

var File_config_grpc_config_proto protoreflect.FileDescriptor

var file_config_grpc_config_proto_rawDesc = string([]byte{
	0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x79, 0x75, 0x68, 0x61,
	0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x2f, 0x62, 0x79,
	0x70, 0x61, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x64, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x72, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x67, 0x6f, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x78, 0x0a, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x62, 0x79, 0x70, 0x61, 0x73,
	0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x22, 0xab, 0x01, 0x0a, 0x0d,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x2e, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x90, 0x01, 0x0a, 0x12, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x46, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x75, 0x6d, 0x70,
	0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x64, 0x75, 0x6d, 0x70, 0x5f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xa6, 0x01, 0x0a,
	0x11, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x69, 0x6a, 0x61,
	0x63, 0x6b, 0x5f, 0x64, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x69,
	0x6a, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x68, 0x69, 0x6a, 0x61,
	0x63, 0x6b, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x66, 0x61, 0x6b, 0x65, 0x69, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x68, 0x69, 0x6a, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x6e, 0x73, 0x5f,
	0x66, 0x61, 0x6b, 0x65, 0x69, 0x70, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x6e, 0x69, 0x66, 0x66, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x73, 0x6e, 0x69, 0x66, 0x66, 0x52, 0x05,
	0x73, 0x6e, 0x69, 0x66, 0x66, 0x22, 0x24, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x51, 0x0a, 0x0d, 0x73,
	0x61, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x64, 0x6e, 0x73,
	0x2e, 0x64, 0x6e, 0x73, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x22, 0x88,
	0x01, 0x0a, 0x05, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x2e, 0x48, 0x6f,
	0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x1a,
	0x38, 0x0a, 0x0a, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xb8, 0x01, 0x0a, 0x0e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x04,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e, 0x79,
	0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x04, 0x73, 0x61, 0x76, 0x65, 0x12, 0x17, 0x2e,
	0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x34,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14,
	0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x32, 0xe2, 0x02, 0x0a, 0x06, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x12,
	0x36, 0x0a, 0x04, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x16, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x36, 0x0a, 0x04, 0x73, 0x61, 0x76, 0x65, 0x12,
	0x16, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x38, 0x0a, 0x06, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x52, 0x0a, 0x04, 0x74, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0x2c, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a,
	0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x31, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x32, 0xec, 0x02, 0x0a, 0x07, 0x69, 0x6e,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x50, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x30, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x03, 0x67, 0x65, 0x74, 0x12, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x19, 0x2e, 0x79,
	0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e,
	0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x3c, 0x0a, 0x04, 0x73, 0x61, 0x76, 0x65, 0x12,
	0x19, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x65, 0x72, 0x2e, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x1a, 0x19, 0x2e, 0x79, 0x75, 0x68,
	0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x69, 0x6e,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x3e, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x30,
	0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69,
	0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0xb3, 0x05, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2b, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x35, 0x0a, 0x03, 0x67, 0x65, 0x74, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x10, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69,
	0x6e, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x64, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x04, 0x73, 0x61, 0x76,
	0x65, 0x12, 0x2c, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x1a,
	0x10, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x64, 0x6e,
	0x73, 0x12, 0x3e, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x45, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x24, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x0a, 0x73, 0x61, 0x76, 0x65,
	0x5f, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x24, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x07, 0x66, 0x61, 0x6b, 0x65, 0x64, 0x6e, 0x73, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69,
	0x6e, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x66, 0x61, 0x6b, 0x65, 0x64, 0x6e, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x43, 0x0a, 0x0c, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x66, 0x61, 0x6b,
	0x65, 0x64, 0x6e, 0x73, 0x12, 0x1b, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x64,
	0x6e, 0x73, 0x2e, 0x66, 0x61, 0x6b, 0x65, 0x64, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x73, 0x61, 0x76,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x40,
	0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x73, 0x75,
	0x74, 0x6f, 0x72, 0x75, 0x66, 0x61, 0x2f, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x92, 0x03, 0x05, 0xd2, 0x3e, 0x02, 0x10, 0x03,
	0x62, 0x08, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0xe8, 0x07,
})

var file_config_grpc_config_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_config_grpc_config_proto_goTypes = []any{
	(*TestResponse)(nil),           // 0: yuhaiin.protos.config.service.test_response
	(*BlockHistory)(nil),           // 1: yuhaiin.protos.config.service.block_history
	(*BlockHistoryList)(nil),       // 2: yuhaiin.protos.config.service.block_history_list
	(*InboundsResponse)(nil),       // 3: yuhaiin.protos.config.service.inbounds_response
	(*ResolveList)(nil),            // 4: yuhaiin.protos.config.service.resolve_list
	(*SaveResolver)(nil),           // 5: yuhaiin.protos.config.service.save_resolver
	(*Hosts)(nil),                  // 6: yuhaiin.protos.config.service.Hosts
	nil,                            // 7: yuhaiin.protos.config.service.Hosts.HostsEntry
	(*bypass.ModeConfig)(nil),      // 8: yuhaiin.bypass.mode_config
	(*timestamppb.Timestamp)(nil),  // 9: google.protobuf.Timestamp
	(*listener.Sniff)(nil),         // 10: yuhaiin.listener.sniff
	(*dns.Dns)(nil),                // 11: yuhaiin.dns.dns
	(*emptypb.Empty)(nil),          // 12: google.protobuf.Empty
	(*config.Setting)(nil),         // 13: yuhaiin.config.setting
	(*bypass.Config)(nil),          // 14: yuhaiin.bypass.config
	(*wrapperspb.StringValue)(nil), // 15: google.protobuf.StringValue
	(*listener.Inbound)(nil),       // 16: yuhaiin.listener.inbound
	(*dns.FakednsConfig)(nil),      // 17: yuhaiin.dns.fakedns_config
	(*config.Info)(nil),            // 18: yuhaiin.config.info
}
var file_config_grpc_config_proto_depIdxs = []int32{
	8,  // 0: yuhaiin.protos.config.service.test_response.mode:type_name -> yuhaiin.bypass.mode_config
	9,  // 1: yuhaiin.protos.config.service.block_history.time:type_name -> google.protobuf.Timestamp
	1,  // 2: yuhaiin.protos.config.service.block_history_list.objects:type_name -> yuhaiin.protos.config.service.block_history
	10, // 3: yuhaiin.protos.config.service.inbounds_response.sniff:type_name -> yuhaiin.listener.sniff
	11, // 4: yuhaiin.protos.config.service.save_resolver.resolver:type_name -> yuhaiin.dns.dns
	7,  // 5: yuhaiin.protos.config.service.Hosts.hosts:type_name -> yuhaiin.protos.config.service.Hosts.HostsEntry
	12, // 6: yuhaiin.protos.config.service.config_service.load:input_type -> google.protobuf.Empty
	13, // 7: yuhaiin.protos.config.service.config_service.save:input_type -> yuhaiin.config.setting
	12, // 8: yuhaiin.protos.config.service.config_service.info:input_type -> google.protobuf.Empty
	12, // 9: yuhaiin.protos.config.service.bypass.load:input_type -> google.protobuf.Empty
	14, // 10: yuhaiin.protos.config.service.bypass.save:input_type -> yuhaiin.bypass.config
	12, // 11: yuhaiin.protos.config.service.bypass.reload:input_type -> google.protobuf.Empty
	15, // 12: yuhaiin.protos.config.service.bypass.test:input_type -> google.protobuf.StringValue
	12, // 13: yuhaiin.protos.config.service.bypass.block_history:input_type -> google.protobuf.Empty
	12, // 14: yuhaiin.protos.config.service.inbound.list:input_type -> google.protobuf.Empty
	15, // 15: yuhaiin.protos.config.service.inbound.get:input_type -> google.protobuf.StringValue
	16, // 16: yuhaiin.protos.config.service.inbound.save:input_type -> yuhaiin.listener.inbound
	15, // 17: yuhaiin.protos.config.service.inbound.remove:input_type -> google.protobuf.StringValue
	3,  // 18: yuhaiin.protos.config.service.inbound.apply:input_type -> yuhaiin.protos.config.service.inbounds_response
	12, // 19: yuhaiin.protos.config.service.resolver.list:input_type -> google.protobuf.Empty
	15, // 20: yuhaiin.protos.config.service.resolver.get:input_type -> google.protobuf.StringValue
	5,  // 21: yuhaiin.protos.config.service.resolver.save:input_type -> yuhaiin.protos.config.service.save_resolver
	15, // 22: yuhaiin.protos.config.service.resolver.remove:input_type -> google.protobuf.StringValue
	12, // 23: yuhaiin.protos.config.service.resolver.hosts:input_type -> google.protobuf.Empty
	6,  // 24: yuhaiin.protos.config.service.resolver.save_hosts:input_type -> yuhaiin.protos.config.service.Hosts
	12, // 25: yuhaiin.protos.config.service.resolver.fakedns:input_type -> google.protobuf.Empty
	17, // 26: yuhaiin.protos.config.service.resolver.save_fakedns:input_type -> yuhaiin.dns.fakedns_config
	12, // 27: yuhaiin.protos.config.service.resolver.server:input_type -> google.protobuf.Empty
	15, // 28: yuhaiin.protos.config.service.resolver.save_server:input_type -> google.protobuf.StringValue
	13, // 29: yuhaiin.protos.config.service.config_service.load:output_type -> yuhaiin.config.setting
	12, // 30: yuhaiin.protos.config.service.config_service.save:output_type -> google.protobuf.Empty
	18, // 31: yuhaiin.protos.config.service.config_service.info:output_type -> yuhaiin.config.info
	14, // 32: yuhaiin.protos.config.service.bypass.load:output_type -> yuhaiin.bypass.config
	12, // 33: yuhaiin.protos.config.service.bypass.save:output_type -> google.protobuf.Empty
	12, // 34: yuhaiin.protos.config.service.bypass.reload:output_type -> google.protobuf.Empty
	0,  // 35: yuhaiin.protos.config.service.bypass.test:output_type -> yuhaiin.protos.config.service.test_response
	2,  // 36: yuhaiin.protos.config.service.bypass.block_history:output_type -> yuhaiin.protos.config.service.block_history_list
	3,  // 37: yuhaiin.protos.config.service.inbound.list:output_type -> yuhaiin.protos.config.service.inbounds_response
	16, // 38: yuhaiin.protos.config.service.inbound.get:output_type -> yuhaiin.listener.inbound
	16, // 39: yuhaiin.protos.config.service.inbound.save:output_type -> yuhaiin.listener.inbound
	12, // 40: yuhaiin.protos.config.service.inbound.remove:output_type -> google.protobuf.Empty
	12, // 41: yuhaiin.protos.config.service.inbound.apply:output_type -> google.protobuf.Empty
	4,  // 42: yuhaiin.protos.config.service.resolver.list:output_type -> yuhaiin.protos.config.service.resolve_list
	11, // 43: yuhaiin.protos.config.service.resolver.get:output_type -> yuhaiin.dns.dns
	11, // 44: yuhaiin.protos.config.service.resolver.save:output_type -> yuhaiin.dns.dns
	12, // 45: yuhaiin.protos.config.service.resolver.remove:output_type -> google.protobuf.Empty
	6,  // 46: yuhaiin.protos.config.service.resolver.hosts:output_type -> yuhaiin.protos.config.service.Hosts
	12, // 47: yuhaiin.protos.config.service.resolver.save_hosts:output_type -> google.protobuf.Empty
	17, // 48: yuhaiin.protos.config.service.resolver.fakedns:output_type -> yuhaiin.dns.fakedns_config
	12, // 49: yuhaiin.protos.config.service.resolver.save_fakedns:output_type -> google.protobuf.Empty
	15, // 50: yuhaiin.protos.config.service.resolver.server:output_type -> google.protobuf.StringValue
	12, // 51: yuhaiin.protos.config.service.resolver.save_server:output_type -> google.protobuf.Empty
	29, // [29:52] is the sub-list for method output_type
	6,  // [6:29] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_config_grpc_config_proto_init() }
func file_config_grpc_config_proto_init() {
	if File_config_grpc_config_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_config_grpc_config_proto_rawDesc), len(file_config_grpc_config_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_config_grpc_config_proto_goTypes,
		DependencyIndexes: file_config_grpc_config_proto_depIdxs,
		MessageInfos:      file_config_grpc_config_proto_msgTypes,
	}.Build()
	File_config_grpc_config_proto = out.File
	file_config_grpc_config_proto_goTypes = nil
	file_config_grpc_config_proto_depIdxs = nil
}
