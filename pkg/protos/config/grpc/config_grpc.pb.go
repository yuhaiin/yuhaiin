// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: config/grpc/config.proto

package service

import (
	context "context"
	config "github.com/Asutorufa/yuhaiin/pkg/protos/config"
	bypass "github.com/Asutorufa/yuhaiin/pkg/protos/config/bypass"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConfigService_Load_FullMethodName = "/yuhaiin.protos.config.service.config_service/load"
	ConfigService_Save_FullMethodName = "/yuhaiin.protos.config.service.config_service/save"
	ConfigService_Info_FullMethodName = "/yuhaiin.protos.config.service.config_service/info"
)

// ConfigServiceClient is the client API for ConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigServiceClient interface {
	Load(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*config.Setting, error)
	Save(ctx context.Context, in *config.Setting, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Info(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*config.Info, error)
}

type configServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigServiceClient(cc grpc.ClientConnInterface) ConfigServiceClient {
	return &configServiceClient{cc}
}

func (c *configServiceClient) Load(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*config.Setting, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(config.Setting)
	err := c.cc.Invoke(ctx, ConfigService_Load_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) Save(ctx context.Context, in *config.Setting, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ConfigService_Save_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) Info(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*config.Info, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(config.Info)
	err := c.cc.Invoke(ctx, ConfigService_Info_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigServiceServer is the server API for ConfigService service.
// All implementations must embed UnimplementedConfigServiceServer
// for forward compatibility.
type ConfigServiceServer interface {
	Load(context.Context, *emptypb.Empty) (*config.Setting, error)
	Save(context.Context, *config.Setting) (*emptypb.Empty, error)
	Info(context.Context, *emptypb.Empty) (*config.Info, error)
	mustEmbedUnimplementedConfigServiceServer()
}

// UnimplementedConfigServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConfigServiceServer struct{}

func (UnimplementedConfigServiceServer) Load(context.Context, *emptypb.Empty) (*config.Setting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Load not implemented")
}
func (UnimplementedConfigServiceServer) Save(context.Context, *config.Setting) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedConfigServiceServer) Info(context.Context, *emptypb.Empty) (*config.Info, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedConfigServiceServer) mustEmbedUnimplementedConfigServiceServer() {}
func (UnimplementedConfigServiceServer) testEmbeddedByValue()                       {}

// UnsafeConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigServiceServer will
// result in compilation errors.
type UnsafeConfigServiceServer interface {
	mustEmbedUnimplementedConfigServiceServer()
}

func RegisterConfigServiceServer(s grpc.ServiceRegistrar, srv ConfigServiceServer) {
	// If the following call pancis, it indicates UnimplementedConfigServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConfigService_ServiceDesc, srv)
}

func _ConfigService_Load_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).Load(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_Load_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).Load(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(config.Setting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_Save_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).Save(ctx, req.(*config.Setting))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_Info_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).Info(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigService_ServiceDesc is the grpc.ServiceDesc for ConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yuhaiin.protos.config.service.config_service",
	HandlerType: (*ConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "load",
			Handler:    _ConfigService_Load_Handler,
		},
		{
			MethodName: "save",
			Handler:    _ConfigService_Save_Handler,
		},
		{
			MethodName: "info",
			Handler:    _ConfigService_Info_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config/grpc/config.proto",
}

const (
	Bypass_Load_FullMethodName   = "/yuhaiin.protos.config.service.bypass/load"
	Bypass_Save_FullMethodName   = "/yuhaiin.protos.config.service.bypass/save"
	Bypass_Reload_FullMethodName = "/yuhaiin.protos.config.service.bypass/reload"
	Bypass_Test_FullMethodName   = "/yuhaiin.protos.config.service.bypass/test"
)

// BypassClient is the client API for Bypass service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BypassClient interface {
	Load(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*bypass.Config, error)
	Save(ctx context.Context, in *bypass.Config, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Reload(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Test(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*TestResponse, error)
}

type bypassClient struct {
	cc grpc.ClientConnInterface
}

func NewBypassClient(cc grpc.ClientConnInterface) BypassClient {
	return &bypassClient{cc}
}

func (c *bypassClient) Load(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*bypass.Config, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(bypass.Config)
	err := c.cc.Invoke(ctx, Bypass_Load_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bypassClient) Save(ctx context.Context, in *bypass.Config, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Bypass_Save_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bypassClient) Reload(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Bypass_Reload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bypassClient) Test(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*TestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, Bypass_Test_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BypassServer is the server API for Bypass service.
// All implementations must embed UnimplementedBypassServer
// for forward compatibility.
type BypassServer interface {
	Load(context.Context, *emptypb.Empty) (*bypass.Config, error)
	Save(context.Context, *bypass.Config) (*emptypb.Empty, error)
	Reload(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	Test(context.Context, *wrapperspb.StringValue) (*TestResponse, error)
	mustEmbedUnimplementedBypassServer()
}

// UnimplementedBypassServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBypassServer struct{}

func (UnimplementedBypassServer) Load(context.Context, *emptypb.Empty) (*bypass.Config, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Load not implemented")
}
func (UnimplementedBypassServer) Save(context.Context, *bypass.Config) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedBypassServer) Reload(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reload not implemented")
}
func (UnimplementedBypassServer) Test(context.Context, *wrapperspb.StringValue) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedBypassServer) mustEmbedUnimplementedBypassServer() {}
func (UnimplementedBypassServer) testEmbeddedByValue()                {}

// UnsafeBypassServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BypassServer will
// result in compilation errors.
type UnsafeBypassServer interface {
	mustEmbedUnimplementedBypassServer()
}

func RegisterBypassServer(s grpc.ServiceRegistrar, srv BypassServer) {
	// If the following call pancis, it indicates UnimplementedBypassServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Bypass_ServiceDesc, srv)
}

func _Bypass_Load_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BypassServer).Load(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bypass_Load_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BypassServer).Load(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bypass_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bypass.Config)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BypassServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bypass_Save_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BypassServer).Save(ctx, req.(*bypass.Config))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bypass_Reload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BypassServer).Reload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bypass_Reload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BypassServer).Reload(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bypass_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BypassServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bypass_Test_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BypassServer).Test(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

// Bypass_ServiceDesc is the grpc.ServiceDesc for Bypass service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bypass_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yuhaiin.protos.config.service.bypass",
	HandlerType: (*BypassServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "load",
			Handler:    _Bypass_Load_Handler,
		},
		{
			MethodName: "save",
			Handler:    _Bypass_Save_Handler,
		},
		{
			MethodName: "reload",
			Handler:    _Bypass_Reload_Handler,
		},
		{
			MethodName: "test",
			Handler:    _Bypass_Test_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config/grpc/config.proto",
}
