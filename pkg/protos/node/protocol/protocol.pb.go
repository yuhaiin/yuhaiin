// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.2
// source: node/protocol/protocol.proto

package protocol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SetStrategyType int32

const (
	Set_random      SetStrategyType = 0
	Set_round_robin SetStrategyType = 1
)

// Enum value maps for SetStrategyType.
var (
	SetStrategyType_name = map[int32]string{
		0: "random",
		1: "round_robin",
	}
	SetStrategyType_value = map[string]int32{
		"random":      0,
		"round_robin": 1,
	}
)

func (x SetStrategyType) Enum() *SetStrategyType {
	p := new(SetStrategyType)
	*p = x
	return p
}

func (x SetStrategyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetStrategyType) Descriptor() protoreflect.EnumDescriptor {
	return file_node_protocol_protocol_proto_enumTypes[0].Descriptor()
}

func (SetStrategyType) Type() protoreflect.EnumType {
	return &file_node_protocol_protocol_proto_enumTypes[0]
}

func (x SetStrategyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type Protocol struct {
	state               protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Protocol isProtocol_Protocol    `protobuf_oneof:"protocol"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Protocol) Reset() {
	*x = Protocol{}
	mi := &file_node_protocol_protocol_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Protocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Protocol) ProtoMessage() {}

func (x *Protocol) ProtoReflect() protoreflect.Message {
	mi := &file_node_protocol_protocol_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Protocol) GetShadowsocks() *Shadowsocks {
	if x != nil {
		if x, ok := x.xxx_hidden_Protocol.(*protocol_Shadowsocks); ok {
			return x.Shadowsocks
		}
	}
	return nil
}

func (x *Protocol) GetShadowsocksr() *Shadowsocksr {
	if x != nil {
		if x, ok := x.xxx_hidden_Protocol.(*protocol_Shadowsocksr); ok {
			return x.Shadowsocksr
		}
	}
	return nil
}

func (x *Protocol) GetVmess() *Vmess {
	if x != nil {
		if x, ok := x.xxx_hidden_Protocol.(*protocol_Vmess); ok {
			return x.Vmess
		}
	}
	return nil
}

func (x *Protocol) GetWebsocket() *Websocket {
	if x != nil {
		if x, ok := x.xxx_hidden_Protocol.(*protocol_Websocket); ok {
			return x.Websocket
		}
	}
	return nil
}

func (x *Protocol) GetQuic() *Quic {
	if x != nil {
		if x, ok := x.xxx_hidden_Protocol.(*protocol_Quic); ok {
			return x.Quic
		}
	}
	return nil
}

func (x *Protocol) GetObfsHttp() *ObfsHttp {
	if x != nil {
		if x, ok := x.xxx_hidden_Protocol.(*protocol_ObfsHttp); ok {
			return x.ObfsHttp
		}
	}
	return nil
}

func (x *Protocol) GetTrojan() *Trojan {
	if x != nil {
		if x, ok := x.xxx_hidden_Protocol.(*protocol_Trojan); ok {
			return x.Trojan
		}
	}
	return nil
}

func (x *Protocol) GetSimple() *Simple {
	if x != nil {
		if x, ok := x.xxx_hidden_Protocol.(*protocol_Simple); ok {
			return x.Simple
		}
	}
	return nil
}

func (x *Protocol) GetNone() *None {
	if x != nil {
		if x, ok := x.xxx_hidden_Protocol.(*protocol_None); ok {
			return x.None
		}
	}
	return nil
}

func (x *Protocol) GetSocks5() *Socks5 {
	if x != nil {
		if x, ok := x.xxx_hidden_Protocol.(*protocol_Socks5); ok {
			return x.Socks5
		}
	}
	return nil
}

func (x *Protocol) GetHttp() *Http {
	if x != nil {
		if x, ok := x.xxx_hidden_Protocol.(*protocol_Http); ok {
			return x.Http
		}
	}
	return nil
}

func (x *Protocol) GetDirect() *Direct {
	if x != nil {
		if x, ok := x.xxx_hidden_Protocol.(*protocol_Direct); ok {
			return x.Direct
		}
	}
	return nil
}

func (x *Protocol) GetReject() *Reject {
	if x != nil {
		if x, ok := x.xxx_hidden_Protocol.(*protocol_Reject); ok {
			return x.Reject
		}
	}
	return nil
}

func (x *Protocol) GetYuubinsya() *Yuubinsya {
	if x != nil {
		if x, ok := x.xxx_hidden_Protocol.(*protocol_Yuubinsya); ok {
			return x.Yuubinsya
		}
	}
	return nil
}

func (x *Protocol) GetGrpc() *Grpc {
	if x != nil {
		if x, ok := x.xxx_hidden_Protocol.(*protocol_Grpc); ok {
			return x.Grpc
		}
	}
	return nil
}

func (x *Protocol) GetHttp2() *Http2 {
	if x != nil {
		if x, ok := x.xxx_hidden_Protocol.(*protocol_Http2); ok {
			return x.Http2
		}
	}
	return nil
}

func (x *Protocol) GetReality() *Reality {
	if x != nil {
		if x, ok := x.xxx_hidden_Protocol.(*protocol_Reality); ok {
			return x.Reality
		}
	}
	return nil
}

func (x *Protocol) GetTls() *TlsConfig {
	if x != nil {
		if x, ok := x.xxx_hidden_Protocol.(*protocol_Tls); ok {
			return x.Tls
		}
	}
	return nil
}

func (x *Protocol) GetWireguard() *Wireguard {
	if x != nil {
		if x, ok := x.xxx_hidden_Protocol.(*protocol_Wireguard); ok {
			return x.Wireguard
		}
	}
	return nil
}

func (x *Protocol) GetMux() *Mux {
	if x != nil {
		if x, ok := x.xxx_hidden_Protocol.(*protocol_Mux); ok {
			return x.Mux
		}
	}
	return nil
}

func (x *Protocol) GetDrop() *Drop {
	if x != nil {
		if x, ok := x.xxx_hidden_Protocol.(*protocol_Drop); ok {
			return x.Drop
		}
	}
	return nil
}

func (x *Protocol) GetVless() *Vless {
	if x != nil {
		if x, ok := x.xxx_hidden_Protocol.(*protocol_Vless); ok {
			return x.Vless
		}
	}
	return nil
}

func (x *Protocol) GetBootstrapDnsWarp() *BootstrapDnsWarp {
	if x != nil {
		if x, ok := x.xxx_hidden_Protocol.(*protocol_BootstrapDnsWarp); ok {
			return x.BootstrapDnsWarp
		}
	}
	return nil
}

func (x *Protocol) GetTailscale() *Tailscale {
	if x != nil {
		if x, ok := x.xxx_hidden_Protocol.(*protocol_Tailscale); ok {
			return x.Tailscale
		}
	}
	return nil
}

func (x *Protocol) GetSet() *Set {
	if x != nil {
		if x, ok := x.xxx_hidden_Protocol.(*protocol_Set); ok {
			return x.Set
		}
	}
	return nil
}

func (x *Protocol) SetShadowsocks(v *Shadowsocks) {
	if v == nil {
		x.xxx_hidden_Protocol = nil
		return
	}
	x.xxx_hidden_Protocol = &protocol_Shadowsocks{v}
}

func (x *Protocol) SetShadowsocksr(v *Shadowsocksr) {
	if v == nil {
		x.xxx_hidden_Protocol = nil
		return
	}
	x.xxx_hidden_Protocol = &protocol_Shadowsocksr{v}
}

func (x *Protocol) SetVmess(v *Vmess) {
	if v == nil {
		x.xxx_hidden_Protocol = nil
		return
	}
	x.xxx_hidden_Protocol = &protocol_Vmess{v}
}

func (x *Protocol) SetWebsocket(v *Websocket) {
	if v == nil {
		x.xxx_hidden_Protocol = nil
		return
	}
	x.xxx_hidden_Protocol = &protocol_Websocket{v}
}

func (x *Protocol) SetQuic(v *Quic) {
	if v == nil {
		x.xxx_hidden_Protocol = nil
		return
	}
	x.xxx_hidden_Protocol = &protocol_Quic{v}
}

func (x *Protocol) SetObfsHttp(v *ObfsHttp) {
	if v == nil {
		x.xxx_hidden_Protocol = nil
		return
	}
	x.xxx_hidden_Protocol = &protocol_ObfsHttp{v}
}

func (x *Protocol) SetTrojan(v *Trojan) {
	if v == nil {
		x.xxx_hidden_Protocol = nil
		return
	}
	x.xxx_hidden_Protocol = &protocol_Trojan{v}
}

func (x *Protocol) SetSimple(v *Simple) {
	if v == nil {
		x.xxx_hidden_Protocol = nil
		return
	}
	x.xxx_hidden_Protocol = &protocol_Simple{v}
}

func (x *Protocol) SetNone(v *None) {
	if v == nil {
		x.xxx_hidden_Protocol = nil
		return
	}
	x.xxx_hidden_Protocol = &protocol_None{v}
}

func (x *Protocol) SetSocks5(v *Socks5) {
	if v == nil {
		x.xxx_hidden_Protocol = nil
		return
	}
	x.xxx_hidden_Protocol = &protocol_Socks5{v}
}

func (x *Protocol) SetHttp(v *Http) {
	if v == nil {
		x.xxx_hidden_Protocol = nil
		return
	}
	x.xxx_hidden_Protocol = &protocol_Http{v}
}

func (x *Protocol) SetDirect(v *Direct) {
	if v == nil {
		x.xxx_hidden_Protocol = nil
		return
	}
	x.xxx_hidden_Protocol = &protocol_Direct{v}
}

func (x *Protocol) SetReject(v *Reject) {
	if v == nil {
		x.xxx_hidden_Protocol = nil
		return
	}
	x.xxx_hidden_Protocol = &protocol_Reject{v}
}

func (x *Protocol) SetYuubinsya(v *Yuubinsya) {
	if v == nil {
		x.xxx_hidden_Protocol = nil
		return
	}
	x.xxx_hidden_Protocol = &protocol_Yuubinsya{v}
}

func (x *Protocol) SetGrpc(v *Grpc) {
	if v == nil {
		x.xxx_hidden_Protocol = nil
		return
	}
	x.xxx_hidden_Protocol = &protocol_Grpc{v}
}

func (x *Protocol) SetHttp2(v *Http2) {
	if v == nil {
		x.xxx_hidden_Protocol = nil
		return
	}
	x.xxx_hidden_Protocol = &protocol_Http2{v}
}

func (x *Protocol) SetReality(v *Reality) {
	if v == nil {
		x.xxx_hidden_Protocol = nil
		return
	}
	x.xxx_hidden_Protocol = &protocol_Reality{v}
}

func (x *Protocol) SetTls(v *TlsConfig) {
	if v == nil {
		x.xxx_hidden_Protocol = nil
		return
	}
	x.xxx_hidden_Protocol = &protocol_Tls{v}
}

func (x *Protocol) SetWireguard(v *Wireguard) {
	if v == nil {
		x.xxx_hidden_Protocol = nil
		return
	}
	x.xxx_hidden_Protocol = &protocol_Wireguard{v}
}

func (x *Protocol) SetMux(v *Mux) {
	if v == nil {
		x.xxx_hidden_Protocol = nil
		return
	}
	x.xxx_hidden_Protocol = &protocol_Mux{v}
}

func (x *Protocol) SetDrop(v *Drop) {
	if v == nil {
		x.xxx_hidden_Protocol = nil
		return
	}
	x.xxx_hidden_Protocol = &protocol_Drop{v}
}

func (x *Protocol) SetVless(v *Vless) {
	if v == nil {
		x.xxx_hidden_Protocol = nil
		return
	}
	x.xxx_hidden_Protocol = &protocol_Vless{v}
}

func (x *Protocol) SetBootstrapDnsWarp(v *BootstrapDnsWarp) {
	if v == nil {
		x.xxx_hidden_Protocol = nil
		return
	}
	x.xxx_hidden_Protocol = &protocol_BootstrapDnsWarp{v}
}

func (x *Protocol) SetTailscale(v *Tailscale) {
	if v == nil {
		x.xxx_hidden_Protocol = nil
		return
	}
	x.xxx_hidden_Protocol = &protocol_Tailscale{v}
}

func (x *Protocol) SetSet(v *Set) {
	if v == nil {
		x.xxx_hidden_Protocol = nil
		return
	}
	x.xxx_hidden_Protocol = &protocol_Set{v}
}

func (x *Protocol) HasProtocol() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Protocol != nil
}

func (x *Protocol) HasShadowsocks() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Protocol.(*protocol_Shadowsocks)
	return ok
}

func (x *Protocol) HasShadowsocksr() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Protocol.(*protocol_Shadowsocksr)
	return ok
}

func (x *Protocol) HasVmess() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Protocol.(*protocol_Vmess)
	return ok
}

func (x *Protocol) HasWebsocket() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Protocol.(*protocol_Websocket)
	return ok
}

func (x *Protocol) HasQuic() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Protocol.(*protocol_Quic)
	return ok
}

func (x *Protocol) HasObfsHttp() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Protocol.(*protocol_ObfsHttp)
	return ok
}

func (x *Protocol) HasTrojan() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Protocol.(*protocol_Trojan)
	return ok
}

func (x *Protocol) HasSimple() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Protocol.(*protocol_Simple)
	return ok
}

func (x *Protocol) HasNone() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Protocol.(*protocol_None)
	return ok
}

func (x *Protocol) HasSocks5() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Protocol.(*protocol_Socks5)
	return ok
}

func (x *Protocol) HasHttp() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Protocol.(*protocol_Http)
	return ok
}

func (x *Protocol) HasDirect() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Protocol.(*protocol_Direct)
	return ok
}

func (x *Protocol) HasReject() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Protocol.(*protocol_Reject)
	return ok
}

func (x *Protocol) HasYuubinsya() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Protocol.(*protocol_Yuubinsya)
	return ok
}

func (x *Protocol) HasGrpc() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Protocol.(*protocol_Grpc)
	return ok
}

func (x *Protocol) HasHttp2() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Protocol.(*protocol_Http2)
	return ok
}

func (x *Protocol) HasReality() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Protocol.(*protocol_Reality)
	return ok
}

func (x *Protocol) HasTls() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Protocol.(*protocol_Tls)
	return ok
}

func (x *Protocol) HasWireguard() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Protocol.(*protocol_Wireguard)
	return ok
}

func (x *Protocol) HasMux() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Protocol.(*protocol_Mux)
	return ok
}

func (x *Protocol) HasDrop() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Protocol.(*protocol_Drop)
	return ok
}

func (x *Protocol) HasVless() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Protocol.(*protocol_Vless)
	return ok
}

func (x *Protocol) HasBootstrapDnsWarp() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Protocol.(*protocol_BootstrapDnsWarp)
	return ok
}

func (x *Protocol) HasTailscale() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Protocol.(*protocol_Tailscale)
	return ok
}

func (x *Protocol) HasSet() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Protocol.(*protocol_Set)
	return ok
}

func (x *Protocol) ClearProtocol() {
	x.xxx_hidden_Protocol = nil
}

func (x *Protocol) ClearShadowsocks() {
	if _, ok := x.xxx_hidden_Protocol.(*protocol_Shadowsocks); ok {
		x.xxx_hidden_Protocol = nil
	}
}

func (x *Protocol) ClearShadowsocksr() {
	if _, ok := x.xxx_hidden_Protocol.(*protocol_Shadowsocksr); ok {
		x.xxx_hidden_Protocol = nil
	}
}

func (x *Protocol) ClearVmess() {
	if _, ok := x.xxx_hidden_Protocol.(*protocol_Vmess); ok {
		x.xxx_hidden_Protocol = nil
	}
}

func (x *Protocol) ClearWebsocket() {
	if _, ok := x.xxx_hidden_Protocol.(*protocol_Websocket); ok {
		x.xxx_hidden_Protocol = nil
	}
}

func (x *Protocol) ClearQuic() {
	if _, ok := x.xxx_hidden_Protocol.(*protocol_Quic); ok {
		x.xxx_hidden_Protocol = nil
	}
}

func (x *Protocol) ClearObfsHttp() {
	if _, ok := x.xxx_hidden_Protocol.(*protocol_ObfsHttp); ok {
		x.xxx_hidden_Protocol = nil
	}
}

func (x *Protocol) ClearTrojan() {
	if _, ok := x.xxx_hidden_Protocol.(*protocol_Trojan); ok {
		x.xxx_hidden_Protocol = nil
	}
}

func (x *Protocol) ClearSimple() {
	if _, ok := x.xxx_hidden_Protocol.(*protocol_Simple); ok {
		x.xxx_hidden_Protocol = nil
	}
}

func (x *Protocol) ClearNone() {
	if _, ok := x.xxx_hidden_Protocol.(*protocol_None); ok {
		x.xxx_hidden_Protocol = nil
	}
}

func (x *Protocol) ClearSocks5() {
	if _, ok := x.xxx_hidden_Protocol.(*protocol_Socks5); ok {
		x.xxx_hidden_Protocol = nil
	}
}

func (x *Protocol) ClearHttp() {
	if _, ok := x.xxx_hidden_Protocol.(*protocol_Http); ok {
		x.xxx_hidden_Protocol = nil
	}
}

func (x *Protocol) ClearDirect() {
	if _, ok := x.xxx_hidden_Protocol.(*protocol_Direct); ok {
		x.xxx_hidden_Protocol = nil
	}
}

func (x *Protocol) ClearReject() {
	if _, ok := x.xxx_hidden_Protocol.(*protocol_Reject); ok {
		x.xxx_hidden_Protocol = nil
	}
}

func (x *Protocol) ClearYuubinsya() {
	if _, ok := x.xxx_hidden_Protocol.(*protocol_Yuubinsya); ok {
		x.xxx_hidden_Protocol = nil
	}
}

func (x *Protocol) ClearGrpc() {
	if _, ok := x.xxx_hidden_Protocol.(*protocol_Grpc); ok {
		x.xxx_hidden_Protocol = nil
	}
}

func (x *Protocol) ClearHttp2() {
	if _, ok := x.xxx_hidden_Protocol.(*protocol_Http2); ok {
		x.xxx_hidden_Protocol = nil
	}
}

func (x *Protocol) ClearReality() {
	if _, ok := x.xxx_hidden_Protocol.(*protocol_Reality); ok {
		x.xxx_hidden_Protocol = nil
	}
}

func (x *Protocol) ClearTls() {
	if _, ok := x.xxx_hidden_Protocol.(*protocol_Tls); ok {
		x.xxx_hidden_Protocol = nil
	}
}

func (x *Protocol) ClearWireguard() {
	if _, ok := x.xxx_hidden_Protocol.(*protocol_Wireguard); ok {
		x.xxx_hidden_Protocol = nil
	}
}

func (x *Protocol) ClearMux() {
	if _, ok := x.xxx_hidden_Protocol.(*protocol_Mux); ok {
		x.xxx_hidden_Protocol = nil
	}
}

func (x *Protocol) ClearDrop() {
	if _, ok := x.xxx_hidden_Protocol.(*protocol_Drop); ok {
		x.xxx_hidden_Protocol = nil
	}
}

func (x *Protocol) ClearVless() {
	if _, ok := x.xxx_hidden_Protocol.(*protocol_Vless); ok {
		x.xxx_hidden_Protocol = nil
	}
}

func (x *Protocol) ClearBootstrapDnsWarp() {
	if _, ok := x.xxx_hidden_Protocol.(*protocol_BootstrapDnsWarp); ok {
		x.xxx_hidden_Protocol = nil
	}
}

func (x *Protocol) ClearTailscale() {
	if _, ok := x.xxx_hidden_Protocol.(*protocol_Tailscale); ok {
		x.xxx_hidden_Protocol = nil
	}
}

func (x *Protocol) ClearSet() {
	if _, ok := x.xxx_hidden_Protocol.(*protocol_Set); ok {
		x.xxx_hidden_Protocol = nil
	}
}

const Protocol_Protocol_not_set_case case_Protocol_Protocol = 0
const Protocol_Shadowsocks_case case_Protocol_Protocol = 1
const Protocol_Shadowsocksr_case case_Protocol_Protocol = 2
const Protocol_Vmess_case case_Protocol_Protocol = 3
const Protocol_Websocket_case case_Protocol_Protocol = 4
const Protocol_Quic_case case_Protocol_Protocol = 5
const Protocol_ObfsHttp_case case_Protocol_Protocol = 6
const Protocol_Trojan_case case_Protocol_Protocol = 7
const Protocol_Simple_case case_Protocol_Protocol = 8
const Protocol_None_case case_Protocol_Protocol = 9
const Protocol_Socks5_case case_Protocol_Protocol = 10
const Protocol_Http_case case_Protocol_Protocol = 11
const Protocol_Direct_case case_Protocol_Protocol = 12
const Protocol_Reject_case case_Protocol_Protocol = 13
const Protocol_Yuubinsya_case case_Protocol_Protocol = 14
const Protocol_Grpc_case case_Protocol_Protocol = 15
const Protocol_Http2_case case_Protocol_Protocol = 16
const Protocol_Reality_case case_Protocol_Protocol = 17
const Protocol_Tls_case case_Protocol_Protocol = 18
const Protocol_Wireguard_case case_Protocol_Protocol = 19
const Protocol_Mux_case case_Protocol_Protocol = 20
const Protocol_Drop_case case_Protocol_Protocol = 21
const Protocol_Vless_case case_Protocol_Protocol = 22
const Protocol_BootstrapDnsWarp_case case_Protocol_Protocol = 23
const Protocol_Tailscale_case case_Protocol_Protocol = 24
const Protocol_Set_case case_Protocol_Protocol = 25

func (x *Protocol) WhichProtocol() case_Protocol_Protocol {
	if x == nil {
		return Protocol_Protocol_not_set_case
	}
	switch x.xxx_hidden_Protocol.(type) {
	case *protocol_Shadowsocks:
		return Protocol_Shadowsocks_case
	case *protocol_Shadowsocksr:
		return Protocol_Shadowsocksr_case
	case *protocol_Vmess:
		return Protocol_Vmess_case
	case *protocol_Websocket:
		return Protocol_Websocket_case
	case *protocol_Quic:
		return Protocol_Quic_case
	case *protocol_ObfsHttp:
		return Protocol_ObfsHttp_case
	case *protocol_Trojan:
		return Protocol_Trojan_case
	case *protocol_Simple:
		return Protocol_Simple_case
	case *protocol_None:
		return Protocol_None_case
	case *protocol_Socks5:
		return Protocol_Socks5_case
	case *protocol_Http:
		return Protocol_Http_case
	case *protocol_Direct:
		return Protocol_Direct_case
	case *protocol_Reject:
		return Protocol_Reject_case
	case *protocol_Yuubinsya:
		return Protocol_Yuubinsya_case
	case *protocol_Grpc:
		return Protocol_Grpc_case
	case *protocol_Http2:
		return Protocol_Http2_case
	case *protocol_Reality:
		return Protocol_Reality_case
	case *protocol_Tls:
		return Protocol_Tls_case
	case *protocol_Wireguard:
		return Protocol_Wireguard_case
	case *protocol_Mux:
		return Protocol_Mux_case
	case *protocol_Drop:
		return Protocol_Drop_case
	case *protocol_Vless:
		return Protocol_Vless_case
	case *protocol_BootstrapDnsWarp:
		return Protocol_BootstrapDnsWarp_case
	case *protocol_Tailscale:
		return Protocol_Tailscale_case
	case *protocol_Set:
		return Protocol_Set_case
	default:
		return Protocol_Protocol_not_set_case
	}
}

type Protocol_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof xxx_hidden_Protocol:
	Shadowsocks  *Shadowsocks
	Shadowsocksr *Shadowsocksr
	Vmess        *Vmess
	Websocket    *Websocket
	Quic         *Quic
	ObfsHttp     *ObfsHttp
	Trojan       *Trojan
	Simple       *Simple
	None         *None
	Socks5       *Socks5
	Http         *Http
	Direct       *Direct
	Reject       *Reject
	Yuubinsya    *Yuubinsya
	Grpc         *Grpc
	Http2        *Http2
	Reality      *Reality
	Tls          *TlsConfig
	Wireguard    *Wireguard
	Mux          *Mux
	Drop         *Drop
	Vless        *Vless
	// bootstrap_dns make the dialer use bootstrap dns to resolve the outbound
	// address instead of the route dns
	BootstrapDnsWarp *BootstrapDnsWarp
	Tailscale        *Tailscale
	Set              *Set
	// -- end of xxx_hidden_Protocol
}

func (b0 Protocol_builder) Build() *Protocol {
	m0 := &Protocol{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Shadowsocks != nil {
		x.xxx_hidden_Protocol = &protocol_Shadowsocks{b.Shadowsocks}
	}
	if b.Shadowsocksr != nil {
		x.xxx_hidden_Protocol = &protocol_Shadowsocksr{b.Shadowsocksr}
	}
	if b.Vmess != nil {
		x.xxx_hidden_Protocol = &protocol_Vmess{b.Vmess}
	}
	if b.Websocket != nil {
		x.xxx_hidden_Protocol = &protocol_Websocket{b.Websocket}
	}
	if b.Quic != nil {
		x.xxx_hidden_Protocol = &protocol_Quic{b.Quic}
	}
	if b.ObfsHttp != nil {
		x.xxx_hidden_Protocol = &protocol_ObfsHttp{b.ObfsHttp}
	}
	if b.Trojan != nil {
		x.xxx_hidden_Protocol = &protocol_Trojan{b.Trojan}
	}
	if b.Simple != nil {
		x.xxx_hidden_Protocol = &protocol_Simple{b.Simple}
	}
	if b.None != nil {
		x.xxx_hidden_Protocol = &protocol_None{b.None}
	}
	if b.Socks5 != nil {
		x.xxx_hidden_Protocol = &protocol_Socks5{b.Socks5}
	}
	if b.Http != nil {
		x.xxx_hidden_Protocol = &protocol_Http{b.Http}
	}
	if b.Direct != nil {
		x.xxx_hidden_Protocol = &protocol_Direct{b.Direct}
	}
	if b.Reject != nil {
		x.xxx_hidden_Protocol = &protocol_Reject{b.Reject}
	}
	if b.Yuubinsya != nil {
		x.xxx_hidden_Protocol = &protocol_Yuubinsya{b.Yuubinsya}
	}
	if b.Grpc != nil {
		x.xxx_hidden_Protocol = &protocol_Grpc{b.Grpc}
	}
	if b.Http2 != nil {
		x.xxx_hidden_Protocol = &protocol_Http2{b.Http2}
	}
	if b.Reality != nil {
		x.xxx_hidden_Protocol = &protocol_Reality{b.Reality}
	}
	if b.Tls != nil {
		x.xxx_hidden_Protocol = &protocol_Tls{b.Tls}
	}
	if b.Wireguard != nil {
		x.xxx_hidden_Protocol = &protocol_Wireguard{b.Wireguard}
	}
	if b.Mux != nil {
		x.xxx_hidden_Protocol = &protocol_Mux{b.Mux}
	}
	if b.Drop != nil {
		x.xxx_hidden_Protocol = &protocol_Drop{b.Drop}
	}
	if b.Vless != nil {
		x.xxx_hidden_Protocol = &protocol_Vless{b.Vless}
	}
	if b.BootstrapDnsWarp != nil {
		x.xxx_hidden_Protocol = &protocol_BootstrapDnsWarp{b.BootstrapDnsWarp}
	}
	if b.Tailscale != nil {
		x.xxx_hidden_Protocol = &protocol_Tailscale{b.Tailscale}
	}
	if b.Set != nil {
		x.xxx_hidden_Protocol = &protocol_Set{b.Set}
	}
	return m0
}

type case_Protocol_Protocol protoreflect.FieldNumber

func (x case_Protocol_Protocol) String() string {
	md := file_node_protocol_protocol_proto_msgTypes[0].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isProtocol_Protocol interface {
	isProtocol_Protocol()
}

type protocol_Shadowsocks struct {
	Shadowsocks *Shadowsocks `protobuf:"bytes,1,opt,name=shadowsocks,oneof"`
}

type protocol_Shadowsocksr struct {
	Shadowsocksr *Shadowsocksr `protobuf:"bytes,2,opt,name=shadowsocksr,oneof"`
}

type protocol_Vmess struct {
	Vmess *Vmess `protobuf:"bytes,3,opt,name=vmess,oneof"`
}

type protocol_Websocket struct {
	Websocket *Websocket `protobuf:"bytes,4,opt,name=websocket,oneof"`
}

type protocol_Quic struct {
	Quic *Quic `protobuf:"bytes,5,opt,name=quic,oneof"`
}

type protocol_ObfsHttp struct {
	ObfsHttp *ObfsHttp `protobuf:"bytes,6,opt,name=obfs_http,oneof"`
}

type protocol_Trojan struct {
	Trojan *Trojan `protobuf:"bytes,7,opt,name=trojan,oneof"`
}

type protocol_Simple struct {
	Simple *Simple `protobuf:"bytes,8,opt,name=simple,oneof"`
}

type protocol_None struct {
	None *None `protobuf:"bytes,9,opt,name=none,oneof"`
}

type protocol_Socks5 struct {
	Socks5 *Socks5 `protobuf:"bytes,10,opt,name=socks5,oneof"`
}

type protocol_Http struct {
	Http *Http `protobuf:"bytes,11,opt,name=http,oneof"`
}

type protocol_Direct struct {
	Direct *Direct `protobuf:"bytes,12,opt,name=direct,oneof"`
}

type protocol_Reject struct {
	Reject *Reject `protobuf:"bytes,13,opt,name=reject,oneof"`
}

type protocol_Yuubinsya struct {
	Yuubinsya *Yuubinsya `protobuf:"bytes,14,opt,name=yuubinsya,oneof"`
}

type protocol_Grpc struct {
	Grpc *Grpc `protobuf:"bytes,15,opt,name=grpc,oneof"`
}

type protocol_Http2 struct {
	Http2 *Http2 `protobuf:"bytes,16,opt,name=http2,oneof"`
}

type protocol_Reality struct {
	Reality *Reality `protobuf:"bytes,17,opt,name=reality,oneof"`
}

type protocol_Tls struct {
	Tls *TlsConfig `protobuf:"bytes,18,opt,name=tls,oneof"`
}

type protocol_Wireguard struct {
	Wireguard *Wireguard `protobuf:"bytes,19,opt,name=wireguard,oneof"`
}

type protocol_Mux struct {
	Mux *Mux `protobuf:"bytes,20,opt,name=mux,oneof"`
}

type protocol_Drop struct {
	Drop *Drop `protobuf:"bytes,21,opt,name=drop,oneof"`
}

type protocol_Vless struct {
	Vless *Vless `protobuf:"bytes,22,opt,name=vless,oneof"`
}

type protocol_BootstrapDnsWarp struct {
	// bootstrap_dns make the dialer use bootstrap dns to resolve the outbound
	// address instead of the route dns
	BootstrapDnsWarp *BootstrapDnsWarp `protobuf:"bytes,23,opt,name=bootstrap_dns_warp,oneof"`
}

type protocol_Tailscale struct {
	Tailscale *Tailscale `protobuf:"bytes,24,opt,name=tailscale,oneof"`
}

type protocol_Set struct {
	Set *Set `protobuf:"bytes,25,opt,name=set,oneof"`
}

func (*protocol_Shadowsocks) isProtocol_Protocol() {}

func (*protocol_Shadowsocksr) isProtocol_Protocol() {}

func (*protocol_Vmess) isProtocol_Protocol() {}

func (*protocol_Websocket) isProtocol_Protocol() {}

func (*protocol_Quic) isProtocol_Protocol() {}

func (*protocol_ObfsHttp) isProtocol_Protocol() {}

func (*protocol_Trojan) isProtocol_Protocol() {}

func (*protocol_Simple) isProtocol_Protocol() {}

func (*protocol_None) isProtocol_Protocol() {}

func (*protocol_Socks5) isProtocol_Protocol() {}

func (*protocol_Http) isProtocol_Protocol() {}

func (*protocol_Direct) isProtocol_Protocol() {}

func (*protocol_Reject) isProtocol_Protocol() {}

func (*protocol_Yuubinsya) isProtocol_Protocol() {}

func (*protocol_Grpc) isProtocol_Protocol() {}

func (*protocol_Http2) isProtocol_Protocol() {}

func (*protocol_Reality) isProtocol_Protocol() {}

func (*protocol_Tls) isProtocol_Protocol() {}

func (*protocol_Wireguard) isProtocol_Protocol() {}

func (*protocol_Mux) isProtocol_Protocol() {}

func (*protocol_Drop) isProtocol_Protocol() {}

func (*protocol_Vless) isProtocol_Protocol() {}

func (*protocol_BootstrapDnsWarp) isProtocol_Protocol() {}

func (*protocol_Tailscale) isProtocol_Protocol() {}

func (*protocol_Set) isProtocol_Protocol() {}

type Socks5 struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Hostname     *string                `protobuf:"bytes,3,opt,name=hostname"`
	xxx_hidden_User         *string                `protobuf:"bytes,1,opt,name=user"`
	xxx_hidden_Password     *string                `protobuf:"bytes,2,opt,name=password"`
	xxx_hidden_OverridePort uint32                 `protobuf:"varint,4,opt,name=override_port"`
	XXX_raceDetectHookData  protoimpl.RaceDetectHookData
	XXX_presence            [1]uint32
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *Socks5) Reset() {
	*x = Socks5{}
	mi := &file_node_protocol_protocol_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Socks5) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Socks5) ProtoMessage() {}

func (x *Socks5) ProtoReflect() protoreflect.Message {
	mi := &file_node_protocol_protocol_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Socks5) GetHostname() string {
	if x != nil {
		if x.xxx_hidden_Hostname != nil {
			return *x.xxx_hidden_Hostname
		}
		return ""
	}
	return ""
}

func (x *Socks5) GetUser() string {
	if x != nil {
		if x.xxx_hidden_User != nil {
			return *x.xxx_hidden_User
		}
		return ""
	}
	return ""
}

func (x *Socks5) GetPassword() string {
	if x != nil {
		if x.xxx_hidden_Password != nil {
			return *x.xxx_hidden_Password
		}
		return ""
	}
	return ""
}

func (x *Socks5) GetOverridePort() uint32 {
	if x != nil {
		return x.xxx_hidden_OverridePort
	}
	return 0
}

func (x *Socks5) SetHostname(v string) {
	x.xxx_hidden_Hostname = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 4)
}

func (x *Socks5) SetUser(v string) {
	x.xxx_hidden_User = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 4)
}

func (x *Socks5) SetPassword(v string) {
	x.xxx_hidden_Password = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 4)
}

func (x *Socks5) SetOverridePort(v uint32) {
	x.xxx_hidden_OverridePort = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 4)
}

func (x *Socks5) HasHostname() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Socks5) HasUser() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Socks5) HasPassword() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *Socks5) HasOverridePort() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *Socks5) ClearHostname() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Hostname = nil
}

func (x *Socks5) ClearUser() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_User = nil
}

func (x *Socks5) ClearPassword() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Password = nil
}

func (x *Socks5) ClearOverridePort() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_OverridePort = 0
}

type Socks5_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// eg: 127.0.0.1
	Hostname *string
	User     *string
	Password *string
	// TODO: add override hostname options
	OverridePort *uint32
}

func (b0 Socks5_builder) Build() *Socks5 {
	m0 := &Socks5{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Hostname != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 4)
		x.xxx_hidden_Hostname = b.Hostname
	}
	if b.User != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 4)
		x.xxx_hidden_User = b.User
	}
	if b.Password != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 4)
		x.xxx_hidden_Password = b.Password
	}
	if b.OverridePort != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 4)
		x.xxx_hidden_OverridePort = *b.OverridePort
	}
	return m0
}

type Http struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_User        *string                `protobuf:"bytes,1,opt,name=user"`
	xxx_hidden_Password    *string                `protobuf:"bytes,2,opt,name=password"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Http) Reset() {
	*x = Http{}
	mi := &file_node_protocol_protocol_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Http) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Http) ProtoMessage() {}

func (x *Http) ProtoReflect() protoreflect.Message {
	mi := &file_node_protocol_protocol_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Http) GetUser() string {
	if x != nil {
		if x.xxx_hidden_User != nil {
			return *x.xxx_hidden_User
		}
		return ""
	}
	return ""
}

func (x *Http) GetPassword() string {
	if x != nil {
		if x.xxx_hidden_Password != nil {
			return *x.xxx_hidden_Password
		}
		return ""
	}
	return ""
}

func (x *Http) SetUser(v string) {
	x.xxx_hidden_User = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *Http) SetPassword(v string) {
	x.xxx_hidden_Password = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *Http) HasUser() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Http) HasPassword() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Http) ClearUser() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_User = nil
}

func (x *Http) ClearPassword() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Password = nil
}

type Http_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	User     *string
	Password *string
}

func (b0 Http_builder) Build() *Http {
	m0 := &Http{}
	b, x := &b0, m0
	_, _ = b, x
	if b.User != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_User = b.User
	}
	if b.Password != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Password = b.Password
	}
	return m0
}

type Shadowsocks struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Method      *string                `protobuf:"bytes,1,opt,name=method"`
	xxx_hidden_Password    *string                `protobuf:"bytes,2,opt,name=password"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Shadowsocks) Reset() {
	*x = Shadowsocks{}
	mi := &file_node_protocol_protocol_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Shadowsocks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shadowsocks) ProtoMessage() {}

func (x *Shadowsocks) ProtoReflect() protoreflect.Message {
	mi := &file_node_protocol_protocol_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Shadowsocks) GetMethod() string {
	if x != nil {
		if x.xxx_hidden_Method != nil {
			return *x.xxx_hidden_Method
		}
		return ""
	}
	return ""
}

func (x *Shadowsocks) GetPassword() string {
	if x != nil {
		if x.xxx_hidden_Password != nil {
			return *x.xxx_hidden_Password
		}
		return ""
	}
	return ""
}

func (x *Shadowsocks) SetMethod(v string) {
	x.xxx_hidden_Method = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *Shadowsocks) SetPassword(v string) {
	x.xxx_hidden_Password = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *Shadowsocks) HasMethod() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Shadowsocks) HasPassword() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Shadowsocks) ClearMethod() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Method = nil
}

func (x *Shadowsocks) ClearPassword() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Password = nil
}

type Shadowsocks_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Method   *string
	Password *string
}

func (b0 Shadowsocks_builder) Build() *Shadowsocks {
	m0 := &Shadowsocks{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Method != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Method = b.Method
	}
	if b.Password != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Password = b.Password
	}
	return m0
}

type Shadowsocksr struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Server      *string                `protobuf:"bytes,1,opt,name=server"`
	xxx_hidden_Port        *string                `protobuf:"bytes,2,opt,name=port"`
	xxx_hidden_Method      *string                `protobuf:"bytes,3,opt,name=method"`
	xxx_hidden_Password    *string                `protobuf:"bytes,4,opt,name=password"`
	xxx_hidden_Obfs        *string                `protobuf:"bytes,5,opt,name=obfs"`
	xxx_hidden_Obfsparam   *string                `protobuf:"bytes,6,opt,name=obfsparam"`
	xxx_hidden_Protocol    *string                `protobuf:"bytes,7,opt,name=protocol"`
	xxx_hidden_Protoparam  *string                `protobuf:"bytes,8,opt,name=protoparam"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Shadowsocksr) Reset() {
	*x = Shadowsocksr{}
	mi := &file_node_protocol_protocol_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Shadowsocksr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shadowsocksr) ProtoMessage() {}

func (x *Shadowsocksr) ProtoReflect() protoreflect.Message {
	mi := &file_node_protocol_protocol_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Shadowsocksr) GetServer() string {
	if x != nil {
		if x.xxx_hidden_Server != nil {
			return *x.xxx_hidden_Server
		}
		return ""
	}
	return ""
}

func (x *Shadowsocksr) GetPort() string {
	if x != nil {
		if x.xxx_hidden_Port != nil {
			return *x.xxx_hidden_Port
		}
		return ""
	}
	return ""
}

func (x *Shadowsocksr) GetMethod() string {
	if x != nil {
		if x.xxx_hidden_Method != nil {
			return *x.xxx_hidden_Method
		}
		return ""
	}
	return ""
}

func (x *Shadowsocksr) GetPassword() string {
	if x != nil {
		if x.xxx_hidden_Password != nil {
			return *x.xxx_hidden_Password
		}
		return ""
	}
	return ""
}

func (x *Shadowsocksr) GetObfs() string {
	if x != nil {
		if x.xxx_hidden_Obfs != nil {
			return *x.xxx_hidden_Obfs
		}
		return ""
	}
	return ""
}

func (x *Shadowsocksr) GetObfsparam() string {
	if x != nil {
		if x.xxx_hidden_Obfsparam != nil {
			return *x.xxx_hidden_Obfsparam
		}
		return ""
	}
	return ""
}

func (x *Shadowsocksr) GetProtocol() string {
	if x != nil {
		if x.xxx_hidden_Protocol != nil {
			return *x.xxx_hidden_Protocol
		}
		return ""
	}
	return ""
}

func (x *Shadowsocksr) GetProtoparam() string {
	if x != nil {
		if x.xxx_hidden_Protoparam != nil {
			return *x.xxx_hidden_Protoparam
		}
		return ""
	}
	return ""
}

func (x *Shadowsocksr) SetServer(v string) {
	x.xxx_hidden_Server = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 8)
}

func (x *Shadowsocksr) SetPort(v string) {
	x.xxx_hidden_Port = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 8)
}

func (x *Shadowsocksr) SetMethod(v string) {
	x.xxx_hidden_Method = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 8)
}

func (x *Shadowsocksr) SetPassword(v string) {
	x.xxx_hidden_Password = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 8)
}

func (x *Shadowsocksr) SetObfs(v string) {
	x.xxx_hidden_Obfs = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 8)
}

func (x *Shadowsocksr) SetObfsparam(v string) {
	x.xxx_hidden_Obfsparam = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 8)
}

func (x *Shadowsocksr) SetProtocol(v string) {
	x.xxx_hidden_Protocol = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 8)
}

func (x *Shadowsocksr) SetProtoparam(v string) {
	x.xxx_hidden_Protoparam = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 7, 8)
}

func (x *Shadowsocksr) HasServer() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Shadowsocksr) HasPort() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Shadowsocksr) HasMethod() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *Shadowsocksr) HasPassword() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *Shadowsocksr) HasObfs() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *Shadowsocksr) HasObfsparam() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *Shadowsocksr) HasProtocol() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *Shadowsocksr) HasProtoparam() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 7)
}

func (x *Shadowsocksr) ClearServer() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Server = nil
}

func (x *Shadowsocksr) ClearPort() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Port = nil
}

func (x *Shadowsocksr) ClearMethod() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Method = nil
}

func (x *Shadowsocksr) ClearPassword() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Password = nil
}

func (x *Shadowsocksr) ClearObfs() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_Obfs = nil
}

func (x *Shadowsocksr) ClearObfsparam() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_Obfsparam = nil
}

func (x *Shadowsocksr) ClearProtocol() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_Protocol = nil
}

func (x *Shadowsocksr) ClearProtoparam() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 7)
	x.xxx_hidden_Protoparam = nil
}

type Shadowsocksr_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Server     *string
	Port       *string
	Method     *string
	Password   *string
	Obfs       *string
	Obfsparam  *string
	Protocol   *string
	Protoparam *string
}

func (b0 Shadowsocksr_builder) Build() *Shadowsocksr {
	m0 := &Shadowsocksr{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Server != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 8)
		x.xxx_hidden_Server = b.Server
	}
	if b.Port != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 8)
		x.xxx_hidden_Port = b.Port
	}
	if b.Method != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 8)
		x.xxx_hidden_Method = b.Method
	}
	if b.Password != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 8)
		x.xxx_hidden_Password = b.Password
	}
	if b.Obfs != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 8)
		x.xxx_hidden_Obfs = b.Obfs
	}
	if b.Obfsparam != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 8)
		x.xxx_hidden_Obfsparam = b.Obfsparam
	}
	if b.Protocol != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 8)
		x.xxx_hidden_Protocol = b.Protocol
	}
	if b.Protoparam != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 7, 8)
		x.xxx_hidden_Protoparam = b.Protoparam
	}
	return m0
}

type Http2 struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Concurrency int32                  `protobuf:"varint,1,opt,name=concurrency"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Http2) Reset() {
	*x = Http2{}
	mi := &file_node_protocol_protocol_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Http2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Http2) ProtoMessage() {}

func (x *Http2) ProtoReflect() protoreflect.Message {
	mi := &file_node_protocol_protocol_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Http2) GetConcurrency() int32 {
	if x != nil {
		return x.xxx_hidden_Concurrency
	}
	return 0
}

func (x *Http2) SetConcurrency(v int32) {
	x.xxx_hidden_Concurrency = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *Http2) HasConcurrency() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Http2) ClearConcurrency() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Concurrency = 0
}

type Http2_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Concurrency *int32
}

func (b0 Http2_builder) Build() *Http2 {
	m0 := &Http2{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Concurrency != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_Concurrency = *b.Concurrency
	}
	return m0
}

type Vmess struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Uuid        *string                `protobuf:"bytes,1,opt,name=uuid,json=id"`
	xxx_hidden_AlterId     *string                `protobuf:"bytes,2,opt,name=alter_id,json=aid"`
	xxx_hidden_Security    *string                `protobuf:"bytes,3,opt,name=security"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Vmess) Reset() {
	*x = Vmess{}
	mi := &file_node_protocol_protocol_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vmess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vmess) ProtoMessage() {}

func (x *Vmess) ProtoReflect() protoreflect.Message {
	mi := &file_node_protocol_protocol_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Vmess) GetUuid() string {
	if x != nil {
		if x.xxx_hidden_Uuid != nil {
			return *x.xxx_hidden_Uuid
		}
		return ""
	}
	return ""
}

func (x *Vmess) GetAlterId() string {
	if x != nil {
		if x.xxx_hidden_AlterId != nil {
			return *x.xxx_hidden_AlterId
		}
		return ""
	}
	return ""
}

func (x *Vmess) GetSecurity() string {
	if x != nil {
		if x.xxx_hidden_Security != nil {
			return *x.xxx_hidden_Security
		}
		return ""
	}
	return ""
}

func (x *Vmess) SetUuid(v string) {
	x.xxx_hidden_Uuid = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *Vmess) SetAlterId(v string) {
	x.xxx_hidden_AlterId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *Vmess) SetSecurity(v string) {
	x.xxx_hidden_Security = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *Vmess) HasUuid() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Vmess) HasAlterId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Vmess) HasSecurity() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *Vmess) ClearUuid() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Uuid = nil
}

func (x *Vmess) ClearAlterId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_AlterId = nil
}

func (x *Vmess) ClearSecurity() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Security = nil
}

type Vmess_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// uuid
	Uuid *string
	// alter id
	AlterId  *string
	Security *string
}

func (b0 Vmess_builder) Build() *Vmess {
	m0 := &Vmess{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Uuid != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_Uuid = b.Uuid
	}
	if b.AlterId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_AlterId = b.AlterId
	}
	if b.Security != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_Security = b.Security
	}
	return m0
}

type Vless struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Uuid        *string                `protobuf:"bytes,1,opt,name=uuid"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Vless) Reset() {
	*x = Vless{}
	mi := &file_node_protocol_protocol_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vless) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vless) ProtoMessage() {}

func (x *Vless) ProtoReflect() protoreflect.Message {
	mi := &file_node_protocol_protocol_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Vless) GetUuid() string {
	if x != nil {
		if x.xxx_hidden_Uuid != nil {
			return *x.xxx_hidden_Uuid
		}
		return ""
	}
	return ""
}

func (x *Vless) SetUuid(v string) {
	x.xxx_hidden_Uuid = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *Vless) HasUuid() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Vless) ClearUuid() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Uuid = nil
}

type Vless_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Uuid *string
}

func (b0 Vless_builder) Build() *Vless {
	m0 := &Vless{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Uuid != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_Uuid = b.Uuid
	}
	return m0
}

type Trojan struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Password    *string                `protobuf:"bytes,1,opt,name=password"`
	xxx_hidden_Peer        *string                `protobuf:"bytes,2,opt,name=peer"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Trojan) Reset() {
	*x = Trojan{}
	mi := &file_node_protocol_protocol_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Trojan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trojan) ProtoMessage() {}

func (x *Trojan) ProtoReflect() protoreflect.Message {
	mi := &file_node_protocol_protocol_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Trojan) GetPassword() string {
	if x != nil {
		if x.xxx_hidden_Password != nil {
			return *x.xxx_hidden_Password
		}
		return ""
	}
	return ""
}

func (x *Trojan) GetPeer() string {
	if x != nil {
		if x.xxx_hidden_Peer != nil {
			return *x.xxx_hidden_Peer
		}
		return ""
	}
	return ""
}

func (x *Trojan) SetPassword(v string) {
	x.xxx_hidden_Password = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *Trojan) SetPeer(v string) {
	x.xxx_hidden_Peer = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *Trojan) HasPassword() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Trojan) HasPeer() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Trojan) ClearPassword() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Password = nil
}

func (x *Trojan) ClearPeer() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Peer = nil
}

type Trojan_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Password *string
	Peer     *string
}

func (b0 Trojan_builder) Build() *Trojan {
	m0 := &Trojan{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Password != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Password = b.Password
	}
	if b.Peer != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Peer = b.Peer
	}
	return m0
}

type Yuubinsya struct {
	state                    protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Password      *string                `protobuf:"bytes,1,opt,name=password"`
	xxx_hidden_TcpEncrypt    bool                   `protobuf:"varint,4,opt,name=tcp_encrypt"`
	xxx_hidden_UdpEncrypt    bool                   `protobuf:"varint,5,opt,name=udp_encrypt"`
	xxx_hidden_UdpOverStream bool                   `protobuf:"varint,3,opt,name=udp_over_stream"`
	XXX_raceDetectHookData   protoimpl.RaceDetectHookData
	XXX_presence             [1]uint32
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *Yuubinsya) Reset() {
	*x = Yuubinsya{}
	mi := &file_node_protocol_protocol_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Yuubinsya) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Yuubinsya) ProtoMessage() {}

func (x *Yuubinsya) ProtoReflect() protoreflect.Message {
	mi := &file_node_protocol_protocol_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Yuubinsya) GetPassword() string {
	if x != nil {
		if x.xxx_hidden_Password != nil {
			return *x.xxx_hidden_Password
		}
		return ""
	}
	return ""
}

func (x *Yuubinsya) GetTcpEncrypt() bool {
	if x != nil {
		return x.xxx_hidden_TcpEncrypt
	}
	return false
}

func (x *Yuubinsya) GetUdpEncrypt() bool {
	if x != nil {
		return x.xxx_hidden_UdpEncrypt
	}
	return false
}

func (x *Yuubinsya) GetUdpOverStream() bool {
	if x != nil {
		return x.xxx_hidden_UdpOverStream
	}
	return false
}

func (x *Yuubinsya) SetPassword(v string) {
	x.xxx_hidden_Password = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 4)
}

func (x *Yuubinsya) SetTcpEncrypt(v bool) {
	x.xxx_hidden_TcpEncrypt = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 4)
}

func (x *Yuubinsya) SetUdpEncrypt(v bool) {
	x.xxx_hidden_UdpEncrypt = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 4)
}

func (x *Yuubinsya) SetUdpOverStream(v bool) {
	x.xxx_hidden_UdpOverStream = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 4)
}

func (x *Yuubinsya) HasPassword() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Yuubinsya) HasTcpEncrypt() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Yuubinsya) HasUdpEncrypt() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *Yuubinsya) HasUdpOverStream() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *Yuubinsya) ClearPassword() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Password = nil
}

func (x *Yuubinsya) ClearTcpEncrypt() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_TcpEncrypt = false
}

func (x *Yuubinsya) ClearUdpEncrypt() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_UdpEncrypt = false
}

func (x *Yuubinsya) ClearUdpOverStream() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_UdpOverStream = false
}

type Yuubinsya_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Password      *string
	TcpEncrypt    *bool
	UdpEncrypt    *bool
	UdpOverStream *bool
}

func (b0 Yuubinsya_builder) Build() *Yuubinsya {
	m0 := &Yuubinsya{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Password != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 4)
		x.xxx_hidden_Password = b.Password
	}
	if b.TcpEncrypt != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 4)
		x.xxx_hidden_TcpEncrypt = *b.TcpEncrypt
	}
	if b.UdpEncrypt != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 4)
		x.xxx_hidden_UdpEncrypt = *b.UdpEncrypt
	}
	if b.UdpOverStream != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 4)
		x.xxx_hidden_UdpOverStream = *b.UdpOverStream
	}
	return m0
}

type Websocket struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Host        *string                `protobuf:"bytes,1,opt,name=host"`
	xxx_hidden_Path        *string                `protobuf:"bytes,2,opt,name=path"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Websocket) Reset() {
	*x = Websocket{}
	mi := &file_node_protocol_protocol_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Websocket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Websocket) ProtoMessage() {}

func (x *Websocket) ProtoReflect() protoreflect.Message {
	mi := &file_node_protocol_protocol_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Websocket) GetHost() string {
	if x != nil {
		if x.xxx_hidden_Host != nil {
			return *x.xxx_hidden_Host
		}
		return ""
	}
	return ""
}

func (x *Websocket) GetPath() string {
	if x != nil {
		if x.xxx_hidden_Path != nil {
			return *x.xxx_hidden_Path
		}
		return ""
	}
	return ""
}

func (x *Websocket) SetHost(v string) {
	x.xxx_hidden_Host = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *Websocket) SetPath(v string) {
	x.xxx_hidden_Path = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *Websocket) HasHost() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Websocket) HasPath() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Websocket) ClearHost() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Host = nil
}

func (x *Websocket) ClearPath() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Path = nil
}

type Websocket_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Host *string
	Path *string
}

func (b0 Websocket_builder) Build() *Websocket {
	m0 := &Websocket{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Host != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Host = b.Host
	}
	if b.Path != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Path = b.Path
	}
	return m0
}

type Grpc struct {
	state          protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Tls *TlsConfig             `protobuf:"bytes,1,opt,name=tls"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Grpc) Reset() {
	*x = Grpc{}
	mi := &file_node_protocol_protocol_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Grpc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Grpc) ProtoMessage() {}

func (x *Grpc) ProtoReflect() protoreflect.Message {
	mi := &file_node_protocol_protocol_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Grpc) GetTls() *TlsConfig {
	if x != nil {
		return x.xxx_hidden_Tls
	}
	return nil
}

func (x *Grpc) SetTls(v *TlsConfig) {
	x.xxx_hidden_Tls = v
}

func (x *Grpc) HasTls() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Tls != nil
}

func (x *Grpc) ClearTls() {
	x.xxx_hidden_Tls = nil
}

type Grpc_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Tls *TlsConfig
}

func (b0 Grpc_builder) Build() *Grpc {
	m0 := &Grpc{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Tls = b.Tls
	return m0
}

type Quic struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Host        *string                `protobuf:"bytes,2,opt,name=host"`
	xxx_hidden_Tls         *TlsConfig             `protobuf:"bytes,1,opt,name=tls"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Quic) Reset() {
	*x = Quic{}
	mi := &file_node_protocol_protocol_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Quic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quic) ProtoMessage() {}

func (x *Quic) ProtoReflect() protoreflect.Message {
	mi := &file_node_protocol_protocol_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Quic) GetHost() string {
	if x != nil {
		if x.xxx_hidden_Host != nil {
			return *x.xxx_hidden_Host
		}
		return ""
	}
	return ""
}

func (x *Quic) GetTls() *TlsConfig {
	if x != nil {
		return x.xxx_hidden_Tls
	}
	return nil
}

func (x *Quic) SetHost(v string) {
	x.xxx_hidden_Host = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *Quic) SetTls(v *TlsConfig) {
	x.xxx_hidden_Tls = v
}

func (x *Quic) HasHost() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Quic) HasTls() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Tls != nil
}

func (x *Quic) ClearHost() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Host = nil
}

func (x *Quic) ClearTls() {
	x.xxx_hidden_Tls = nil
}

type Quic_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Host *string
	Tls  *TlsConfig
}

func (b0 Quic_builder) Build() *Quic {
	m0 := &Quic{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Host != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Host = b.Host
	}
	x.xxx_hidden_Tls = b.Tls
	return m0
}

type Reality struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ServerName  *string                `protobuf:"bytes,1,opt,name=server_name"`
	xxx_hidden_PublicKey   *string                `protobuf:"bytes,2,opt,name=public_key"`
	xxx_hidden_ShortId     *string                `protobuf:"bytes,3,opt,name=short_id"`
	xxx_hidden_Debug       bool                   `protobuf:"varint,4,opt,name=debug"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Reality) Reset() {
	*x = Reality{}
	mi := &file_node_protocol_protocol_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Reality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reality) ProtoMessage() {}

func (x *Reality) ProtoReflect() protoreflect.Message {
	mi := &file_node_protocol_protocol_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Reality) GetServerName() string {
	if x != nil {
		if x.xxx_hidden_ServerName != nil {
			return *x.xxx_hidden_ServerName
		}
		return ""
	}
	return ""
}

func (x *Reality) GetPublicKey() string {
	if x != nil {
		if x.xxx_hidden_PublicKey != nil {
			return *x.xxx_hidden_PublicKey
		}
		return ""
	}
	return ""
}

func (x *Reality) GetShortId() string {
	if x != nil {
		if x.xxx_hidden_ShortId != nil {
			return *x.xxx_hidden_ShortId
		}
		return ""
	}
	return ""
}

func (x *Reality) GetDebug() bool {
	if x != nil {
		return x.xxx_hidden_Debug
	}
	return false
}

func (x *Reality) SetServerName(v string) {
	x.xxx_hidden_ServerName = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 4)
}

func (x *Reality) SetPublicKey(v string) {
	x.xxx_hidden_PublicKey = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 4)
}

func (x *Reality) SetShortId(v string) {
	x.xxx_hidden_ShortId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 4)
}

func (x *Reality) SetDebug(v bool) {
	x.xxx_hidden_Debug = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 4)
}

func (x *Reality) HasServerName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Reality) HasPublicKey() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Reality) HasShortId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *Reality) HasDebug() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *Reality) ClearServerName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_ServerName = nil
}

func (x *Reality) ClearPublicKey() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_PublicKey = nil
}

func (x *Reality) ClearShortId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_ShortId = nil
}

func (x *Reality) ClearDebug() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Debug = false
}

type Reality_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ServerName *string
	PublicKey  *string
	ShortId    *string
	Debug      *bool
}

func (b0 Reality_builder) Build() *Reality {
	m0 := &Reality{}
	b, x := &b0, m0
	_, _ = b, x
	if b.ServerName != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 4)
		x.xxx_hidden_ServerName = b.ServerName
	}
	if b.PublicKey != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 4)
		x.xxx_hidden_PublicKey = b.PublicKey
	}
	if b.ShortId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 4)
		x.xxx_hidden_ShortId = b.ShortId
	}
	if b.Debug != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 4)
		x.xxx_hidden_Debug = *b.Debug
	}
	return m0
}

type ObfsHttp struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Host        *string                `protobuf:"bytes,1,opt,name=host"`
	xxx_hidden_Port        *string                `protobuf:"bytes,2,opt,name=port"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ObfsHttp) Reset() {
	*x = ObfsHttp{}
	mi := &file_node_protocol_protocol_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObfsHttp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObfsHttp) ProtoMessage() {}

func (x *ObfsHttp) ProtoReflect() protoreflect.Message {
	mi := &file_node_protocol_protocol_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ObfsHttp) GetHost() string {
	if x != nil {
		if x.xxx_hidden_Host != nil {
			return *x.xxx_hidden_Host
		}
		return ""
	}
	return ""
}

func (x *ObfsHttp) GetPort() string {
	if x != nil {
		if x.xxx_hidden_Port != nil {
			return *x.xxx_hidden_Port
		}
		return ""
	}
	return ""
}

func (x *ObfsHttp) SetHost(v string) {
	x.xxx_hidden_Host = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *ObfsHttp) SetPort(v string) {
	x.xxx_hidden_Port = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *ObfsHttp) HasHost() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *ObfsHttp) HasPort() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *ObfsHttp) ClearHost() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Host = nil
}

func (x *ObfsHttp) ClearPort() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Port = nil
}

type ObfsHttp_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Host *string
	Port *string
}

func (b0 ObfsHttp_builder) Build() *ObfsHttp {
	m0 := &ObfsHttp{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Host != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Host = b.Host
	}
	if b.Port != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Port = b.Port
	}
	return m0
}

type None struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *None) Reset() {
	*x = None{}
	mi := &file_node_protocol_protocol_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *None) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*None) ProtoMessage() {}

func (x *None) ProtoReflect() protoreflect.Message {
	mi := &file_node_protocol_protocol_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type None_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 None_builder) Build() *None {
	m0 := &None{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type Simple struct {
	state                       protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Host             *string                `protobuf:"bytes,1,opt,name=host"`
	xxx_hidden_Port             int32                  `protobuf:"varint,2,opt,name=port"`
	xxx_hidden_AlternateHost    *[]*Host               `protobuf:"bytes,5,rep,name=alternate_host"`
	xxx_hidden_NetworkInterface *string                `protobuf:"bytes,7,opt,name=network_interface"`
	XXX_raceDetectHookData      protoimpl.RaceDetectHookData
	XXX_presence                [1]uint32
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *Simple) Reset() {
	*x = Simple{}
	mi := &file_node_protocol_protocol_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Simple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Simple) ProtoMessage() {}

func (x *Simple) ProtoReflect() protoreflect.Message {
	mi := &file_node_protocol_protocol_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Simple) GetHost() string {
	if x != nil {
		if x.xxx_hidden_Host != nil {
			return *x.xxx_hidden_Host
		}
		return ""
	}
	return ""
}

func (x *Simple) GetPort() int32 {
	if x != nil {
		return x.xxx_hidden_Port
	}
	return 0
}

func (x *Simple) GetAlternateHost() []*Host {
	if x != nil {
		if x.xxx_hidden_AlternateHost != nil {
			return *x.xxx_hidden_AlternateHost
		}
	}
	return nil
}

func (x *Simple) GetNetworkInterface() string {
	if x != nil {
		if x.xxx_hidden_NetworkInterface != nil {
			return *x.xxx_hidden_NetworkInterface
		}
		return ""
	}
	return ""
}

func (x *Simple) SetHost(v string) {
	x.xxx_hidden_Host = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 4)
}

func (x *Simple) SetPort(v int32) {
	x.xxx_hidden_Port = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 4)
}

func (x *Simple) SetAlternateHost(v []*Host) {
	x.xxx_hidden_AlternateHost = &v
}

func (x *Simple) SetNetworkInterface(v string) {
	x.xxx_hidden_NetworkInterface = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 4)
}

func (x *Simple) HasHost() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Simple) HasPort() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Simple) HasNetworkInterface() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *Simple) ClearHost() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Host = nil
}

func (x *Simple) ClearPort() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Port = 0
}

func (x *Simple) ClearNetworkInterface() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_NetworkInterface = nil
}

type Simple_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Host             *string
	Port             *int32
	AlternateHost    []*Host
	NetworkInterface *string
}

func (b0 Simple_builder) Build() *Simple {
	m0 := &Simple{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Host != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 4)
		x.xxx_hidden_Host = b.Host
	}
	if b.Port != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 4)
		x.xxx_hidden_Port = *b.Port
	}
	x.xxx_hidden_AlternateHost = &b.AlternateHost
	if b.NetworkInterface != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 4)
		x.xxx_hidden_NetworkInterface = b.NetworkInterface
	}
	return m0
}

type TlsConfig struct {
	state                         protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Enable             bool                   `protobuf:"varint,1,opt,name=enable"`
	xxx_hidden_ServerNames        []string               `protobuf:"bytes,6,rep,name=server_names,json=servernames"`
	xxx_hidden_CaCert             [][]byte               `protobuf:"bytes,3,rep,name=ca_cert"`
	xxx_hidden_InsecureSkipVerify bool                   `protobuf:"varint,4,opt,name=insecure_skip_verify"`
	xxx_hidden_NextProtos         []string               `protobuf:"bytes,5,rep,name=next_protos"`
	xxx_hidden_EchConfig          []byte                 `protobuf:"bytes,7,opt,name=ech_config"`
	XXX_raceDetectHookData        protoimpl.RaceDetectHookData
	XXX_presence                  [1]uint32
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *TlsConfig) Reset() {
	*x = TlsConfig{}
	mi := &file_node_protocol_protocol_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TlsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TlsConfig) ProtoMessage() {}

func (x *TlsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_node_protocol_protocol_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TlsConfig) GetEnable() bool {
	if x != nil {
		return x.xxx_hidden_Enable
	}
	return false
}

func (x *TlsConfig) GetServerNames() []string {
	if x != nil {
		return x.xxx_hidden_ServerNames
	}
	return nil
}

func (x *TlsConfig) GetCaCert() [][]byte {
	if x != nil {
		return x.xxx_hidden_CaCert
	}
	return nil
}

func (x *TlsConfig) GetInsecureSkipVerify() bool {
	if x != nil {
		return x.xxx_hidden_InsecureSkipVerify
	}
	return false
}

func (x *TlsConfig) GetNextProtos() []string {
	if x != nil {
		return x.xxx_hidden_NextProtos
	}
	return nil
}

func (x *TlsConfig) GetEchConfig() []byte {
	if x != nil {
		return x.xxx_hidden_EchConfig
	}
	return nil
}

func (x *TlsConfig) SetEnable(v bool) {
	x.xxx_hidden_Enable = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 6)
}

func (x *TlsConfig) SetServerNames(v []string) {
	x.xxx_hidden_ServerNames = v
}

func (x *TlsConfig) SetCaCert(v [][]byte) {
	x.xxx_hidden_CaCert = v
}

func (x *TlsConfig) SetInsecureSkipVerify(v bool) {
	x.xxx_hidden_InsecureSkipVerify = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 6)
}

func (x *TlsConfig) SetNextProtos(v []string) {
	x.xxx_hidden_NextProtos = v
}

func (x *TlsConfig) SetEchConfig(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_EchConfig = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 6)
}

func (x *TlsConfig) HasEnable() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TlsConfig) HasInsecureSkipVerify() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *TlsConfig) HasEchConfig() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *TlsConfig) ClearEnable() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Enable = false
}

func (x *TlsConfig) ClearInsecureSkipVerify() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_InsecureSkipVerify = false
}

func (x *TlsConfig) ClearEchConfig() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_EchConfig = nil
}

type TlsConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Enable             *bool
	ServerNames        []string
	CaCert             [][]byte
	InsecureSkipVerify *bool
	// next_protos ALPN Next Protocol
	// eg: h2, http/1.1
	NextProtos []string
	EchConfig  []byte
}

func (b0 TlsConfig_builder) Build() *TlsConfig {
	m0 := &TlsConfig{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Enable != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 6)
		x.xxx_hidden_Enable = *b.Enable
	}
	x.xxx_hidden_ServerNames = b.ServerNames
	x.xxx_hidden_CaCert = b.CaCert
	if b.InsecureSkipVerify != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 6)
		x.xxx_hidden_InsecureSkipVerify = *b.InsecureSkipVerify
	}
	x.xxx_hidden_NextProtos = b.NextProtos
	if b.EchConfig != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 6)
		x.xxx_hidden_EchConfig = b.EchConfig
	}
	return m0
}

type Direct struct {
	state                       protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_NetworkInterface *string                `protobuf:"bytes,2,opt,name=network_interface"`
	XXX_raceDetectHookData      protoimpl.RaceDetectHookData
	XXX_presence                [1]uint32
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *Direct) Reset() {
	*x = Direct{}
	mi := &file_node_protocol_protocol_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Direct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Direct) ProtoMessage() {}

func (x *Direct) ProtoReflect() protoreflect.Message {
	mi := &file_node_protocol_protocol_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Direct) GetNetworkInterface() string {
	if x != nil {
		if x.xxx_hidden_NetworkInterface != nil {
			return *x.xxx_hidden_NetworkInterface
		}
		return ""
	}
	return ""
}

func (x *Direct) SetNetworkInterface(v string) {
	x.xxx_hidden_NetworkInterface = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *Direct) HasNetworkInterface() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Direct) ClearNetworkInterface() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_NetworkInterface = nil
}

type Direct_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	NetworkInterface *string
}

func (b0 Direct_builder) Build() *Direct {
	m0 := &Direct{}
	b, x := &b0, m0
	_, _ = b, x
	if b.NetworkInterface != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_NetworkInterface = b.NetworkInterface
	}
	return m0
}

type Reject struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Reject) Reset() {
	*x = Reject{}
	mi := &file_node_protocol_protocol_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Reject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reject) ProtoMessage() {}

func (x *Reject) ProtoReflect() protoreflect.Message {
	mi := &file_node_protocol_protocol_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type Reject_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 Reject_builder) Build() *Reject {
	m0 := &Reject{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type Drop struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Drop) Reset() {
	*x = Drop{}
	mi := &file_node_protocol_protocol_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Drop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Drop) ProtoMessage() {}

func (x *Drop) ProtoReflect() protoreflect.Message {
	mi := &file_node_protocol_protocol_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type Drop_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 Drop_builder) Build() *Drop {
	m0 := &Drop{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type Host struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Host        *string                `protobuf:"bytes,1,opt,name=host"`
	xxx_hidden_Port        int32                  `protobuf:"varint,2,opt,name=port"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Host) Reset() {
	*x = Host{}
	mi := &file_node_protocol_protocol_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Host) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Host) ProtoMessage() {}

func (x *Host) ProtoReflect() protoreflect.Message {
	mi := &file_node_protocol_protocol_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Host) GetHost() string {
	if x != nil {
		if x.xxx_hidden_Host != nil {
			return *x.xxx_hidden_Host
		}
		return ""
	}
	return ""
}

func (x *Host) GetPort() int32 {
	if x != nil {
		return x.xxx_hidden_Port
	}
	return 0
}

func (x *Host) SetHost(v string) {
	x.xxx_hidden_Host = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *Host) SetPort(v int32) {
	x.xxx_hidden_Port = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *Host) HasHost() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Host) HasPort() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Host) ClearHost() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Host = nil
}

func (x *Host) ClearPort() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Port = 0
}

type Host_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Host *string
	Port *int32
}

func (b0 Host_builder) Build() *Host {
	m0 := &Host{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Host != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Host = b.Host
	}
	if b.Port != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Port = *b.Port
	}
	return m0
}

type WireguardPeerConfig struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_PublicKey    *string                `protobuf:"bytes,1,opt,name=public_key,json=publicKey"`
	xxx_hidden_PreSharedKey *string                `protobuf:"bytes,2,opt,name=pre_shared_key,json=preSharedKey"`
	xxx_hidden_Endpoint     *string                `protobuf:"bytes,3,opt,name=endpoint"`
	xxx_hidden_KeepAlive    int32                  `protobuf:"varint,4,opt,name=keep_alive,json=keepAlive"`
	xxx_hidden_AllowedIps   []string               `protobuf:"bytes,5,rep,name=allowed_ips,json=allowedIps"`
	XXX_raceDetectHookData  protoimpl.RaceDetectHookData
	XXX_presence            [1]uint32
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *WireguardPeerConfig) Reset() {
	*x = WireguardPeerConfig{}
	mi := &file_node_protocol_protocol_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WireguardPeerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WireguardPeerConfig) ProtoMessage() {}

func (x *WireguardPeerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_node_protocol_protocol_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *WireguardPeerConfig) GetPublicKey() string {
	if x != nil {
		if x.xxx_hidden_PublicKey != nil {
			return *x.xxx_hidden_PublicKey
		}
		return ""
	}
	return ""
}

func (x *WireguardPeerConfig) GetPreSharedKey() string {
	if x != nil {
		if x.xxx_hidden_PreSharedKey != nil {
			return *x.xxx_hidden_PreSharedKey
		}
		return ""
	}
	return ""
}

func (x *WireguardPeerConfig) GetEndpoint() string {
	if x != nil {
		if x.xxx_hidden_Endpoint != nil {
			return *x.xxx_hidden_Endpoint
		}
		return ""
	}
	return ""
}

func (x *WireguardPeerConfig) GetKeepAlive() int32 {
	if x != nil {
		return x.xxx_hidden_KeepAlive
	}
	return 0
}

func (x *WireguardPeerConfig) GetAllowedIps() []string {
	if x != nil {
		return x.xxx_hidden_AllowedIps
	}
	return nil
}

func (x *WireguardPeerConfig) SetPublicKey(v string) {
	x.xxx_hidden_PublicKey = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 5)
}

func (x *WireguardPeerConfig) SetPreSharedKey(v string) {
	x.xxx_hidden_PreSharedKey = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 5)
}

func (x *WireguardPeerConfig) SetEndpoint(v string) {
	x.xxx_hidden_Endpoint = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 5)
}

func (x *WireguardPeerConfig) SetKeepAlive(v int32) {
	x.xxx_hidden_KeepAlive = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 5)
}

func (x *WireguardPeerConfig) SetAllowedIps(v []string) {
	x.xxx_hidden_AllowedIps = v
}

func (x *WireguardPeerConfig) HasPublicKey() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *WireguardPeerConfig) HasPreSharedKey() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *WireguardPeerConfig) HasEndpoint() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *WireguardPeerConfig) HasKeepAlive() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *WireguardPeerConfig) ClearPublicKey() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_PublicKey = nil
}

func (x *WireguardPeerConfig) ClearPreSharedKey() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_PreSharedKey = nil
}

func (x *WireguardPeerConfig) ClearEndpoint() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Endpoint = nil
}

func (x *WireguardPeerConfig) ClearKeepAlive() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_KeepAlive = 0
}

type WireguardPeerConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	PublicKey    *string
	PreSharedKey *string
	Endpoint     *string
	KeepAlive    *int32
	AllowedIps   []string
}

func (b0 WireguardPeerConfig_builder) Build() *WireguardPeerConfig {
	m0 := &WireguardPeerConfig{}
	b, x := &b0, m0
	_, _ = b, x
	if b.PublicKey != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 5)
		x.xxx_hidden_PublicKey = b.PublicKey
	}
	if b.PreSharedKey != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 5)
		x.xxx_hidden_PreSharedKey = b.PreSharedKey
	}
	if b.Endpoint != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 5)
		x.xxx_hidden_Endpoint = b.Endpoint
	}
	if b.KeepAlive != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 5)
		x.xxx_hidden_KeepAlive = *b.KeepAlive
	}
	x.xxx_hidden_AllowedIps = b.AllowedIps
	return m0
}

type Wireguard struct {
	state                  protoimpl.MessageState  `protogen:"opaque.v1"`
	xxx_hidden_SecretKey   *string                 `protobuf:"bytes,1,opt,name=secret_key,json=secretKey"`
	xxx_hidden_Endpoint    []string                `protobuf:"bytes,2,rep,name=endpoint"`
	xxx_hidden_Peers       *[]*WireguardPeerConfig `protobuf:"bytes,3,rep,name=peers"`
	xxx_hidden_Mtu         int32                   `protobuf:"varint,4,opt,name=mtu"`
	xxx_hidden_Reserved    []byte                  `protobuf:"bytes,6,opt,name=reserved"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Wireguard) Reset() {
	*x = Wireguard{}
	mi := &file_node_protocol_protocol_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Wireguard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wireguard) ProtoMessage() {}

func (x *Wireguard) ProtoReflect() protoreflect.Message {
	mi := &file_node_protocol_protocol_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Wireguard) GetSecretKey() string {
	if x != nil {
		if x.xxx_hidden_SecretKey != nil {
			return *x.xxx_hidden_SecretKey
		}
		return ""
	}
	return ""
}

func (x *Wireguard) GetEndpoint() []string {
	if x != nil {
		return x.xxx_hidden_Endpoint
	}
	return nil
}

func (x *Wireguard) GetPeers() []*WireguardPeerConfig {
	if x != nil {
		if x.xxx_hidden_Peers != nil {
			return *x.xxx_hidden_Peers
		}
	}
	return nil
}

func (x *Wireguard) GetMtu() int32 {
	if x != nil {
		return x.xxx_hidden_Mtu
	}
	return 0
}

func (x *Wireguard) GetReserved() []byte {
	if x != nil {
		return x.xxx_hidden_Reserved
	}
	return nil
}

func (x *Wireguard) SetSecretKey(v string) {
	x.xxx_hidden_SecretKey = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 5)
}

func (x *Wireguard) SetEndpoint(v []string) {
	x.xxx_hidden_Endpoint = v
}

func (x *Wireguard) SetPeers(v []*WireguardPeerConfig) {
	x.xxx_hidden_Peers = &v
}

func (x *Wireguard) SetMtu(v int32) {
	x.xxx_hidden_Mtu = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 5)
}

func (x *Wireguard) SetReserved(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Reserved = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 5)
}

func (x *Wireguard) HasSecretKey() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Wireguard) HasMtu() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *Wireguard) HasReserved() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *Wireguard) ClearSecretKey() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_SecretKey = nil
}

func (x *Wireguard) ClearMtu() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Mtu = 0
}

func (x *Wireguard) ClearReserved() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_Reserved = nil
}

type Wireguard_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	SecretKey *string
	Endpoint  []string
	Peers     []*WireguardPeerConfig
	Mtu       *int32
	Reserved  []byte
}

func (b0 Wireguard_builder) Build() *Wireguard {
	m0 := &Wireguard{}
	b, x := &b0, m0
	_, _ = b, x
	if b.SecretKey != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 5)
		x.xxx_hidden_SecretKey = b.SecretKey
	}
	x.xxx_hidden_Endpoint = b.Endpoint
	x.xxx_hidden_Peers = &b.Peers
	if b.Mtu != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 5)
		x.xxx_hidden_Mtu = *b.Mtu
	}
	if b.Reserved != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 5)
		x.xxx_hidden_Reserved = b.Reserved
	}
	return m0
}

type Mux struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Concurrency int32                  `protobuf:"varint,1,opt,name=concurrency"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Mux) Reset() {
	*x = Mux{}
	mi := &file_node_protocol_protocol_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Mux) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mux) ProtoMessage() {}

func (x *Mux) ProtoReflect() protoreflect.Message {
	mi := &file_node_protocol_protocol_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Mux) GetConcurrency() int32 {
	if x != nil {
		return x.xxx_hidden_Concurrency
	}
	return 0
}

func (x *Mux) SetConcurrency(v int32) {
	x.xxx_hidden_Concurrency = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *Mux) HasConcurrency() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Mux) ClearConcurrency() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Concurrency = 0
}

type Mux_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Concurrency *int32
}

func (b0 Mux_builder) Build() *Mux {
	m0 := &Mux{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Concurrency != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_Concurrency = *b.Concurrency
	}
	return m0
}

type BootstrapDnsWarp struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BootstrapDnsWarp) Reset() {
	*x = BootstrapDnsWarp{}
	mi := &file_node_protocol_protocol_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BootstrapDnsWarp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootstrapDnsWarp) ProtoMessage() {}

func (x *BootstrapDnsWarp) ProtoReflect() protoreflect.Message {
	mi := &file_node_protocol_protocol_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type BootstrapDnsWarp_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 BootstrapDnsWarp_builder) Build() *BootstrapDnsWarp {
	m0 := &BootstrapDnsWarp{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type Tailscale struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_AuthKey     *string                `protobuf:"bytes,1,opt,name=auth_key"`
	xxx_hidden_Hostname    *string                `protobuf:"bytes,2,opt,name=hostname"`
	xxx_hidden_ControlUrl  *string                `protobuf:"bytes,3,opt,name=control_url"`
	xxx_hidden_Debug       bool                   `protobuf:"varint,5,opt,name=debug"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Tailscale) Reset() {
	*x = Tailscale{}
	mi := &file_node_protocol_protocol_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tailscale) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tailscale) ProtoMessage() {}

func (x *Tailscale) ProtoReflect() protoreflect.Message {
	mi := &file_node_protocol_protocol_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Tailscale) GetAuthKey() string {
	if x != nil {
		if x.xxx_hidden_AuthKey != nil {
			return *x.xxx_hidden_AuthKey
		}
		return ""
	}
	return ""
}

func (x *Tailscale) GetHostname() string {
	if x != nil {
		if x.xxx_hidden_Hostname != nil {
			return *x.xxx_hidden_Hostname
		}
		return ""
	}
	return ""
}

func (x *Tailscale) GetControlUrl() string {
	if x != nil {
		if x.xxx_hidden_ControlUrl != nil {
			return *x.xxx_hidden_ControlUrl
		}
		return ""
	}
	return ""
}

func (x *Tailscale) GetDebug() bool {
	if x != nil {
		return x.xxx_hidden_Debug
	}
	return false
}

func (x *Tailscale) SetAuthKey(v string) {
	x.xxx_hidden_AuthKey = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 4)
}

func (x *Tailscale) SetHostname(v string) {
	x.xxx_hidden_Hostname = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 4)
}

func (x *Tailscale) SetControlUrl(v string) {
	x.xxx_hidden_ControlUrl = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 4)
}

func (x *Tailscale) SetDebug(v bool) {
	x.xxx_hidden_Debug = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 4)
}

func (x *Tailscale) HasAuthKey() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Tailscale) HasHostname() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Tailscale) HasControlUrl() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *Tailscale) HasDebug() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *Tailscale) ClearAuthKey() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_AuthKey = nil
}

func (x *Tailscale) ClearHostname() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Hostname = nil
}

func (x *Tailscale) ClearControlUrl() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_ControlUrl = nil
}

func (x *Tailscale) ClearDebug() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Debug = false
}

type Tailscale_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	AuthKey    *string
	Hostname   *string
	ControlUrl *string
	Debug      *bool
}

func (b0 Tailscale_builder) Build() *Tailscale {
	m0 := &Tailscale{}
	b, x := &b0, m0
	_, _ = b, x
	if b.AuthKey != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 4)
		x.xxx_hidden_AuthKey = b.AuthKey
	}
	if b.Hostname != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 4)
		x.xxx_hidden_Hostname = b.Hostname
	}
	if b.ControlUrl != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 4)
		x.xxx_hidden_ControlUrl = b.ControlUrl
	}
	if b.Debug != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 4)
		x.xxx_hidden_Debug = *b.Debug
	}
	return m0
}

type Set struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Nodes       []string               `protobuf:"bytes,1,rep,name=nodes"`
	xxx_hidden_Strategy    SetStrategyType        `protobuf:"varint,2,opt,name=strategy,enum=yuhaiin.protocol.SetStrategyType"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Set) Reset() {
	*x = Set{}
	mi := &file_node_protocol_protocol_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Set) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Set) ProtoMessage() {}

func (x *Set) ProtoReflect() protoreflect.Message {
	mi := &file_node_protocol_protocol_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Set) GetNodes() []string {
	if x != nil {
		return x.xxx_hidden_Nodes
	}
	return nil
}

func (x *Set) GetStrategy() SetStrategyType {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 1) {
			return x.xxx_hidden_Strategy
		}
	}
	return Set_random
}

func (x *Set) SetNodes(v []string) {
	x.xxx_hidden_Nodes = v
}

func (x *Set) SetStrategy(v SetStrategyType) {
	x.xxx_hidden_Strategy = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *Set) HasStrategy() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Set) ClearStrategy() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Strategy = Set_random
}

type Set_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Nodes    []string
	Strategy *SetStrategyType
}

func (b0 Set_builder) Build() *Set {
	m0 := &Set{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Nodes = b.Nodes
	if b.Strategy != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Strategy = *b.Strategy
	}
	return m0
}

var File_node_protocol_protocol_proto protoreflect.FileDescriptor

var file_node_protocol_protocol_proto_rawDesc = string([]byte{
	0x0a, 0x1c, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10,
	0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x1a, 0x21, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x67, 0x6f, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xe4, 0x0a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x12, 0x41, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x73,
	0x6f, 0x63, 0x6b, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x73, 0x6f,
	0x63, 0x6b, 0x73, 0x12, 0x44, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x73, 0x6f, 0x63,
	0x6b, 0x73, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x79, 0x75, 0x68, 0x61,
	0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x73, 0x68, 0x61,
	0x64, 0x6f, 0x77, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x68, 0x61,
	0x64, 0x6f, 0x77, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x72, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x6d, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x6d, 0x65, 0x73,
	0x73, 0x48, 0x00, 0x52, 0x05, 0x76, 0x6d, 0x65, 0x73, 0x73, 0x12, 0x3b, 0x0a, 0x09, 0x77, 0x65,
	0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x77, 0x65,
	0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x71, 0x75, 0x69, 0x63, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x71, 0x75, 0x69, 0x63, 0x48, 0x00, 0x52,
	0x04, 0x71, 0x75, 0x69, 0x63, 0x12, 0x3b, 0x0a, 0x09, 0x6f, 0x62, 0x66, 0x73, 0x5f, 0x68, 0x74,
	0x74, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6f, 0x62, 0x66, 0x73,
	0x5f, 0x68, 0x74, 0x74, 0x70, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x62, 0x66, 0x73, 0x5f, 0x68, 0x74,
	0x74, 0x70, 0x12, 0x32, 0x0a, 0x06, 0x74, 0x72, 0x6f, 0x6a, 0x61, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x74, 0x72, 0x6f, 0x6a, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x06,
	0x74, 0x72, 0x6f, 0x6a, 0x61, 0x6e, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x6e, 0x6f,
	0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6e, 0x6f, 0x6e, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x6f, 0x63, 0x6b,
	0x73, 0x35, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x73, 0x6f, 0x63, 0x6b,
	0x73, 0x35, 0x48, 0x00, 0x52, 0x06, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x35, 0x12, 0x2c, 0x0a, 0x04,
	0x68, 0x74, 0x74, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x75, 0x68,
	0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x68, 0x74,
	0x74, 0x70, 0x48, 0x00, 0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x12, 0x32, 0x0a, 0x06, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x75, 0x68,
	0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x06, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x32,
	0x0a, 0x06, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x3b, 0x0a, 0x09, 0x79, 0x75, 0x75, 0x62, 0x69, 0x6e, 0x73, 0x79, 0x61, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x79, 0x75, 0x75, 0x62, 0x69, 0x6e, 0x73,
	0x79, 0x61, 0x48, 0x00, 0x52, 0x09, 0x79, 0x75, 0x75, 0x62, 0x69, 0x6e, 0x73, 0x79, 0x61, 0x12,
	0x2c, 0x0a, 0x04, 0x67, 0x72, 0x70, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x48, 0x00, 0x52, 0x04, 0x67, 0x72, 0x70, 0x63, 0x12, 0x2f, 0x0a,
	0x05, 0x68, 0x74, 0x74, 0x70, 0x32, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79,
	0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x68, 0x74, 0x74, 0x70, 0x32, 0x48, 0x00, 0x52, 0x05, 0x68, 0x74, 0x74, 0x70, 0x32, 0x12, 0x35,
	0x0a, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x48, 0x00, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x09, 0x77, 0x69, 0x72, 0x65, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x75, 0x68,
	0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x77, 0x69,
	0x72, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x09, 0x77, 0x69, 0x72, 0x65, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x12, 0x29, 0x0a, 0x03, 0x6d, 0x75, 0x78, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x75, 0x78, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x75, 0x78, 0x12,
	0x2c, 0x0a, 0x04, 0x64, 0x72, 0x6f, 0x70, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x64, 0x72, 0x6f, 0x70, 0x48, 0x00, 0x52, 0x04, 0x64, 0x72, 0x6f, 0x70, 0x12, 0x2f, 0x0a,
	0x05, 0x76, 0x6c, 0x65, 0x73, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79,
	0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x76, 0x6c, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x05, 0x76, 0x6c, 0x65, 0x73, 0x73, 0x12, 0x56,
	0x0a, 0x12, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x64, 0x6e, 0x73, 0x5f,
	0x77, 0x61, 0x72, 0x70, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x75, 0x68,
	0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x62, 0x6f,
	0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x77, 0x61, 0x72, 0x70,
	0x48, 0x00, 0x52, 0x12, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x64, 0x6e,
	0x73, 0x5f, 0x77, 0x61, 0x72, 0x70, 0x12, 0x3b, 0x0a, 0x09, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x75, 0x68, 0x61,
	0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x09, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x73, 0x65, 0x74, 0x48, 0x00, 0x52, 0x03, 0x73, 0x65, 0x74, 0x42, 0x0a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x7a, 0x0a, 0x06, 0x73, 0x6f,
	0x63, 0x6b, 0x73, 0x35, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x36, 0x0a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x41,
	0x0a, 0x0b, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x22, 0xdc, 0x01, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x73, 0x6f, 0x63, 0x6b,
	0x73, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x62, 0x66, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6f, 0x62, 0x66, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x62, 0x66, 0x73, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x62, 0x66, 0x73, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x22, 0x29, 0x0a, 0x05, 0x68, 0x74, 0x74, 0x70, 0x32, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x4c, 0x0a, 0x05, 0x76,
	0x6d, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x22, 0x1b, 0x0a, 0x05, 0x76, 0x6c, 0x65,
	0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x38, 0x0a, 0x06, 0x74, 0x72, 0x6f, 0x6a, 0x61, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x65, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72,
	0x22, 0xa6, 0x01, 0x0a, 0x09, 0x79, 0x75, 0x75, 0x62, 0x69, 0x6e, 0x73, 0x79, 0x61, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x63,
	0x70, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x74, 0x63, 0x70, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x75, 0x64, 0x70, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x75, 0x64, 0x70, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x75, 0x64, 0x70, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x75, 0x64, 0x70, 0x5f, 0x6f, 0x76, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x52, 0x09,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x22, 0x46, 0x0a, 0x09, 0x77, 0x65, 0x62,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x4a, 0x04,
	0x08, 0x04, 0x10, 0x05, 0x52, 0x0b, 0x74, 0x6c, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x22, 0x36, 0x0a, 0x04, 0x67, 0x72, 0x70, 0x63, 0x12, 0x2e, 0x0a, 0x03, 0x74, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x22, 0x4a, 0x0a, 0x04, 0x71, 0x75, 0x69,
	0x63, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x03, 0x74, 0x6c, 0x73, 0x22, 0x7d, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b,
	0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x22, 0x33, 0x0a, 0x09, 0x6f, 0x62, 0x66, 0x73, 0x5f, 0x68, 0x74, 0x74,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x06, 0x0a, 0x04, 0x6e, 0x6f, 0x6e,
	0x65, 0x22, 0xd2, 0x01, 0x0a, 0x06, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x3e, 0x0a, 0x0e, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74,
	0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79,
	0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x68, 0x6f, 0x73, 0x74, 0x52, 0x0e, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x5f,
	0x68, 0x6f, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04,
	0x08, 0x03, 0x10, 0x04, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x52, 0x12, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x5f,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x22, 0xd7, 0x01, 0x0a, 0x0a, 0x74, 0x6c, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x07, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x69, 0x6e,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x20,
	0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x65, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0x45, 0x0a, 0x06, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x52, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x22, 0x06, 0x0a, 0x04, 0x64, 0x72, 0x6f, 0x70, 0x22, 0x2e, 0x0a, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xb8, 0x01, 0x0a, 0x15, 0x77, 0x69,
	0x72, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69,
	0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x41, 0x6c,
	0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x69,
	0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x49, 0x70, 0x73, 0x22, 0xc7, 0x01, 0x0a, 0x09, 0x77, 0x69, 0x72, 0x65, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3d, 0x0a,
	0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x79,
	0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x77, 0x69, 0x72, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x74, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08,
	0x52, 0x0c, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x27,
	0x0a, 0x03, 0x6d, 0x75, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x14, 0x0a, 0x12, 0x62, 0x6f, 0x6f, 0x74, 0x73,
	0x74, 0x72, 0x61, 0x70, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x77, 0x61, 0x72, 0x70, 0x22, 0x8f, 0x01,
	0x0a, 0x09, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4a, 0x04, 0x08, 0x04, 0x10,
	0x05, 0x52, 0x0c, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22,
	0x8a, 0x01, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x3f, 0x0a,
	0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x73, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0x2c,
	0x0a, 0x0d, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x0a, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x10, 0x01, 0x42, 0x3f, 0x5a, 0x35,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x73, 0x75, 0x74, 0x6f,
	0x72, 0x75, 0x66, 0x61, 0x2f, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x92, 0x03, 0x05, 0xd2, 0x3e, 0x02, 0x10, 0x03, 0x62, 0x08, 0x65,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0xe8, 0x07,
})

var file_node_protocol_protocol_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_node_protocol_protocol_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_node_protocol_protocol_proto_goTypes = []any{
	(SetStrategyType)(0),        // 0: yuhaiin.protocol.set.strategy_type
	(*Protocol)(nil),            // 1: yuhaiin.protocol.protocol
	(*Socks5)(nil),              // 2: yuhaiin.protocol.socks5
	(*Http)(nil),                // 3: yuhaiin.protocol.http
	(*Shadowsocks)(nil),         // 4: yuhaiin.protocol.shadowsocks
	(*Shadowsocksr)(nil),        // 5: yuhaiin.protocol.shadowsocksr
	(*Http2)(nil),               // 6: yuhaiin.protocol.http2
	(*Vmess)(nil),               // 7: yuhaiin.protocol.vmess
	(*Vless)(nil),               // 8: yuhaiin.protocol.vless
	(*Trojan)(nil),              // 9: yuhaiin.protocol.trojan
	(*Yuubinsya)(nil),           // 10: yuhaiin.protocol.yuubinsya
	(*Websocket)(nil),           // 11: yuhaiin.protocol.websocket
	(*Grpc)(nil),                // 12: yuhaiin.protocol.grpc
	(*Quic)(nil),                // 13: yuhaiin.protocol.quic
	(*Reality)(nil),             // 14: yuhaiin.protocol.reality
	(*ObfsHttp)(nil),            // 15: yuhaiin.protocol.obfs_http
	(*None)(nil),                // 16: yuhaiin.protocol.none
	(*Simple)(nil),              // 17: yuhaiin.protocol.simple
	(*TlsConfig)(nil),           // 18: yuhaiin.protocol.tls_config
	(*Direct)(nil),              // 19: yuhaiin.protocol.direct
	(*Reject)(nil),              // 20: yuhaiin.protocol.reject
	(*Drop)(nil),                // 21: yuhaiin.protocol.drop
	(*Host)(nil),                // 22: yuhaiin.protocol.host
	(*WireguardPeerConfig)(nil), // 23: yuhaiin.protocol.wireguard_peer_config
	(*Wireguard)(nil),           // 24: yuhaiin.protocol.wireguard
	(*Mux)(nil),                 // 25: yuhaiin.protocol.mux
	(*BootstrapDnsWarp)(nil),    // 26: yuhaiin.protocol.bootstrap_dns_warp
	(*Tailscale)(nil),           // 27: yuhaiin.protocol.tailscale
	(*Set)(nil),                 // 28: yuhaiin.protocol.set
}
var file_node_protocol_protocol_proto_depIdxs = []int32{
	4,  // 0: yuhaiin.protocol.protocol.shadowsocks:type_name -> yuhaiin.protocol.shadowsocks
	5,  // 1: yuhaiin.protocol.protocol.shadowsocksr:type_name -> yuhaiin.protocol.shadowsocksr
	7,  // 2: yuhaiin.protocol.protocol.vmess:type_name -> yuhaiin.protocol.vmess
	11, // 3: yuhaiin.protocol.protocol.websocket:type_name -> yuhaiin.protocol.websocket
	13, // 4: yuhaiin.protocol.protocol.quic:type_name -> yuhaiin.protocol.quic
	15, // 5: yuhaiin.protocol.protocol.obfs_http:type_name -> yuhaiin.protocol.obfs_http
	9,  // 6: yuhaiin.protocol.protocol.trojan:type_name -> yuhaiin.protocol.trojan
	17, // 7: yuhaiin.protocol.protocol.simple:type_name -> yuhaiin.protocol.simple
	16, // 8: yuhaiin.protocol.protocol.none:type_name -> yuhaiin.protocol.none
	2,  // 9: yuhaiin.protocol.protocol.socks5:type_name -> yuhaiin.protocol.socks5
	3,  // 10: yuhaiin.protocol.protocol.http:type_name -> yuhaiin.protocol.http
	19, // 11: yuhaiin.protocol.protocol.direct:type_name -> yuhaiin.protocol.direct
	20, // 12: yuhaiin.protocol.protocol.reject:type_name -> yuhaiin.protocol.reject
	10, // 13: yuhaiin.protocol.protocol.yuubinsya:type_name -> yuhaiin.protocol.yuubinsya
	12, // 14: yuhaiin.protocol.protocol.grpc:type_name -> yuhaiin.protocol.grpc
	6,  // 15: yuhaiin.protocol.protocol.http2:type_name -> yuhaiin.protocol.http2
	14, // 16: yuhaiin.protocol.protocol.reality:type_name -> yuhaiin.protocol.reality
	18, // 17: yuhaiin.protocol.protocol.tls:type_name -> yuhaiin.protocol.tls_config
	24, // 18: yuhaiin.protocol.protocol.wireguard:type_name -> yuhaiin.protocol.wireguard
	25, // 19: yuhaiin.protocol.protocol.mux:type_name -> yuhaiin.protocol.mux
	21, // 20: yuhaiin.protocol.protocol.drop:type_name -> yuhaiin.protocol.drop
	8,  // 21: yuhaiin.protocol.protocol.vless:type_name -> yuhaiin.protocol.vless
	26, // 22: yuhaiin.protocol.protocol.bootstrap_dns_warp:type_name -> yuhaiin.protocol.bootstrap_dns_warp
	27, // 23: yuhaiin.protocol.protocol.tailscale:type_name -> yuhaiin.protocol.tailscale
	28, // 24: yuhaiin.protocol.protocol.set:type_name -> yuhaiin.protocol.set
	18, // 25: yuhaiin.protocol.grpc.tls:type_name -> yuhaiin.protocol.tls_config
	18, // 26: yuhaiin.protocol.quic.tls:type_name -> yuhaiin.protocol.tls_config
	22, // 27: yuhaiin.protocol.simple.alternate_host:type_name -> yuhaiin.protocol.host
	23, // 28: yuhaiin.protocol.wireguard.peers:type_name -> yuhaiin.protocol.wireguard_peer_config
	0,  // 29: yuhaiin.protocol.set.strategy:type_name -> yuhaiin.protocol.set.strategy_type
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_node_protocol_protocol_proto_init() }
func file_node_protocol_protocol_proto_init() {
	if File_node_protocol_protocol_proto != nil {
		return
	}
	file_node_protocol_protocol_proto_msgTypes[0].OneofWrappers = []any{
		(*protocol_Shadowsocks)(nil),
		(*protocol_Shadowsocksr)(nil),
		(*protocol_Vmess)(nil),
		(*protocol_Websocket)(nil),
		(*protocol_Quic)(nil),
		(*protocol_ObfsHttp)(nil),
		(*protocol_Trojan)(nil),
		(*protocol_Simple)(nil),
		(*protocol_None)(nil),
		(*protocol_Socks5)(nil),
		(*protocol_Http)(nil),
		(*protocol_Direct)(nil),
		(*protocol_Reject)(nil),
		(*protocol_Yuubinsya)(nil),
		(*protocol_Grpc)(nil),
		(*protocol_Http2)(nil),
		(*protocol_Reality)(nil),
		(*protocol_Tls)(nil),
		(*protocol_Wireguard)(nil),
		(*protocol_Mux)(nil),
		(*protocol_Drop)(nil),
		(*protocol_Vless)(nil),
		(*protocol_BootstrapDnsWarp)(nil),
		(*protocol_Tailscale)(nil),
		(*protocol_Set)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_node_protocol_protocol_proto_rawDesc), len(file_node_protocol_protocol_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_node_protocol_protocol_proto_goTypes,
		DependencyIndexes: file_node_protocol_protocol_proto_depIdxs,
		EnumInfos:         file_node_protocol_protocol_proto_enumTypes,
		MessageInfos:      file_node_protocol_protocol_proto_msgTypes,
	}.Build()
	File_node_protocol_protocol_proto = out.File
	file_node_protocol_protocol_proto_goTypes = nil
	file_node_protocol_protocol_proto_depIdxs = nil
}
