// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: node/grpc/node.proto

package service

import (
	node "github.com/Asutorufa/yuhaiin/pkg/protos/node"
	latency "github.com/Asutorufa/yuhaiin/pkg/protos/node/latency"
	point "github.com/Asutorufa/yuhaiin/pkg/protos/node/point"
	subscribe "github.com/Asutorufa/yuhaiin/pkg/protos/node/subscribe"
	tag "github.com/Asutorufa/yuhaiin/pkg/protos/node/tag"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NowReqNetType int32

const (
	NowReq_reserve NowReqNetType = 0
	NowReq_tcp     NowReqNetType = 1
	NowReq_udp     NowReqNetType = 2
)

// Enum value maps for NowReqNetType.
var (
	NowReqNetType_name = map[int32]string{
		0: "reserve",
		1: "tcp",
		2: "udp",
	}
	NowReqNetType_value = map[string]int32{
		"reserve": 0,
		"tcp":     1,
		"udp":     2,
	}
)

func (x NowReqNetType) Enum() *NowReqNetType {
	p := new(NowReqNetType)
	*p = x
	return p
}

func (x NowReqNetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NowReqNetType) Descriptor() protoreflect.EnumDescriptor {
	return file_node_grpc_node_proto_enumTypes[0].Descriptor()
}

func (NowReqNetType) Type() protoreflect.EnumType {
	return &file_node_grpc_node_proto_enumTypes[0]
}

func (x NowReqNetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NowReqNetType.Descriptor instead.
func (NowReqNetType) EnumDescriptor() ([]byte, []int) {
	return file_node_grpc_node_proto_rawDescGZIP(), []int{1, 0}
}

type UseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tcp  bool   `protobuf:"varint,1,opt,name=tcp,proto3" json:"tcp,omitempty"`
	Udp  bool   `protobuf:"varint,2,opt,name=udp,proto3" json:"udp,omitempty"`
	Hash string `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *UseReq) Reset() {
	*x = UseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_grpc_node_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseReq) ProtoMessage() {}

func (x *UseReq) ProtoReflect() protoreflect.Message {
	mi := &file_node_grpc_node_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseReq.ProtoReflect.Descriptor instead.
func (*UseReq) Descriptor() ([]byte, []int) {
	return file_node_grpc_node_proto_rawDescGZIP(), []int{0}
}

func (x *UseReq) GetTcp() bool {
	if x != nil {
		return x.Tcp
	}
	return false
}

func (x *UseReq) GetUdp() bool {
	if x != nil {
		return x.Udp
	}
	return false
}

func (x *UseReq) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type NowReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Net NowReqNetType `protobuf:"varint,1,opt,name=net,json=type,proto3,enum=yuhaiin.protos.node.service.NowReqNetType" json:"net,omitempty"`
}

func (x *NowReq) Reset() {
	*x = NowReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_grpc_node_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NowReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NowReq) ProtoMessage() {}

func (x *NowReq) ProtoReflect() protoreflect.Message {
	mi := &file_node_grpc_node_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NowReq.ProtoReflect.Descriptor instead.
func (*NowReq) Descriptor() ([]byte, []int) {
	return file_node_grpc_node_proto_rawDescGZIP(), []int{1}
}

func (x *NowReq) GetNet() NowReqNetType {
	if x != nil {
		return x.Net
	}
	return NowReq_reserve
}

type SaveLinkReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Links []*subscribe.Link `protobuf:"bytes,1,rep,name=links,proto3" json:"links,omitempty"`
}

func (x *SaveLinkReq) Reset() {
	*x = SaveLinkReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_grpc_node_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveLinkReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveLinkReq) ProtoMessage() {}

func (x *SaveLinkReq) ProtoReflect() protoreflect.Message {
	mi := &file_node_grpc_node_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveLinkReq.ProtoReflect.Descriptor instead.
func (*SaveLinkReq) Descriptor() ([]byte, []int) {
	return file_node_grpc_node_proto_rawDescGZIP(), []int{2}
}

func (x *SaveLinkReq) GetLinks() []*subscribe.Link {
	if x != nil {
		return x.Links
	}
	return nil
}

type LinkReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *LinkReq) Reset() {
	*x = LinkReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_grpc_node_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkReq) ProtoMessage() {}

func (x *LinkReq) ProtoReflect() protoreflect.Message {
	mi := &file_node_grpc_node_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkReq.ProtoReflect.Descriptor instead.
func (*LinkReq) Descriptor() ([]byte, []int) {
	return file_node_grpc_node_proto_rawDescGZIP(), []int{3}
}

func (x *LinkReq) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type GetLinksResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Links map[string]*subscribe.Link `protobuf:"bytes,1,rep,name=links,proto3" json:"links,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetLinksResp) Reset() {
	*x = GetLinksResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_grpc_node_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLinksResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLinksResp) ProtoMessage() {}

func (x *GetLinksResp) ProtoReflect() protoreflect.Message {
	mi := &file_node_grpc_node_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLinksResp.ProtoReflect.Descriptor instead.
func (*GetLinksResp) Descriptor() ([]byte, []int) {
	return file_node_grpc_node_proto_rawDescGZIP(), []int{4}
}

func (x *GetLinksResp) GetLinks() map[string]*subscribe.Link {
	if x != nil {
		return x.Links
	}
	return nil
}

type SaveTagReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag  string   `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	Type tag.Type `protobuf:"varint,3,opt,name=type,proto3,enum=yuhaiin.tag.Type" json:"type,omitempty"`
	Hash string   `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *SaveTagReq) Reset() {
	*x = SaveTagReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_grpc_node_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveTagReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveTagReq) ProtoMessage() {}

func (x *SaveTagReq) ProtoReflect() protoreflect.Message {
	mi := &file_node_grpc_node_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveTagReq.ProtoReflect.Descriptor instead.
func (*SaveTagReq) Descriptor() ([]byte, []int) {
	return file_node_grpc_node_proto_rawDescGZIP(), []int{5}
}

func (x *SaveTagReq) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *SaveTagReq) GetType() tag.Type {
	if x != nil {
		return x.Type
	}
	return tag.Type(0)
}

func (x *SaveTagReq) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

var File_node_grpc_node_proto protoreflect.FileDescriptor

var file_node_grpc_node_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x16, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6e, 0x6f, 0x64, 0x65, 0x2f,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x6e, 0x6f, 0x64, 0x65, 0x2f,
	0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x74, 0x61, 0x67, 0x2f,
	0x74, 0x61, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x41, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x63, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x03, 0x74, 0x63, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x64, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x75, 0x64, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x76, 0x0a, 0x07,
	0x6e, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x71, 0x12, 0x40, 0x0a, 0x03, 0x6e, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6e, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x71, 0x2e, 0x6e, 0x65, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x29, 0x0a, 0x08, 0x6e, 0x65, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x74, 0x63, 0x70, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x75,
	0x64, 0x70, 0x10, 0x02, 0x22, 0x3e, 0x0a, 0x0d, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x72, 0x65, 0x71, 0x12, 0x2d, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x6c,
	0x69, 0x6e, 0x6b, 0x73, 0x22, 0x20, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x72, 0x65, 0x71,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x12, 0x4c, 0x0a, 0x05, 0x6c, 0x69, 0x6e,
	0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x1a, 0x51, 0x0a, 0x0a, 0x4c, 0x69, 0x6e, 0x6b, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5b, 0x0a, 0x0c, 0x73, 0x61,
	0x76, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x25, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x79, 0x75, 0x68,
	0x61, 0x69, 0x69, 0x6e, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x32, 0xbc, 0x03, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65,
	0x12, 0x41, 0x0a, 0x03, 0x6e, 0x6f, 0x77, 0x12, 0x24, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6e, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x14, 0x2e,
	0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x03, 0x75, 0x73, 0x65, 0x12, 0x24, 0x2e, 0x79, 0x75, 0x68,
	0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x1a, 0x14, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x03, 0x67, 0x65, 0x74, 0x12, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x14, 0x2e, 0x79, 0x75,
	0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x32, 0x0a, 0x04, 0x73, 0x61, 0x76, 0x65, 0x12, 0x14, 0x2e, 0x79, 0x75, 0x68, 0x61,
	0x69, 0x69, 0x6e, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x1a,
	0x14, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x15,
	0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x19, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x1a, 0x19, 0x2e, 0x79, 0x75,
	0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xb5, 0x02, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x12, 0x4a, 0x0a, 0x04, 0x73, 0x61, 0x76, 0x65, 0x12, 0x2a, 0x2e, 0x79,
	0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61, 0x76, 0x65, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x47, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x25, 0x2e, 0x79, 0x75, 0x68,
	0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x72, 0x65,
	0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x47, 0x0a, 0x06, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x4a, 0x0a, 0x03, 0x67, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x2b, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x67, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x32, 0x90,
	0x01, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x12, 0x49, 0x0a, 0x04, 0x73, 0x61, 0x76, 0x65, 0x12, 0x29,
	0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61, 0x76,
	0x65, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x3e, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x41, 0x73, 0x75, 0x74, 0x6f, 0x72, 0x75, 0x66, 0x61, 0x2f, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69,
	0x6e, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6e, 0x6f, 0x64,
	0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_node_grpc_node_proto_rawDescOnce sync.Once
	file_node_grpc_node_proto_rawDescData = file_node_grpc_node_proto_rawDesc
)

func file_node_grpc_node_proto_rawDescGZIP() []byte {
	file_node_grpc_node_proto_rawDescOnce.Do(func() {
		file_node_grpc_node_proto_rawDescData = protoimpl.X.CompressGZIP(file_node_grpc_node_proto_rawDescData)
	})
	return file_node_grpc_node_proto_rawDescData
}

var file_node_grpc_node_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_node_grpc_node_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_node_grpc_node_proto_goTypes = []interface{}{
	(NowReqNetType)(0),             // 0: yuhaiin.protos.node.service.now_req.net_type
	(*UseReq)(nil),                 // 1: yuhaiin.protos.node.service.use_req
	(*NowReq)(nil),                 // 2: yuhaiin.protos.node.service.now_req
	(*SaveLinkReq)(nil),            // 3: yuhaiin.protos.node.service.save_link_req
	(*LinkReq)(nil),                // 4: yuhaiin.protos.node.service.link_req
	(*GetLinksResp)(nil),           // 5: yuhaiin.protos.node.service.get_links_resp
	(*SaveTagReq)(nil),             // 6: yuhaiin.protos.node.service.save_tag_req
	nil,                            // 7: yuhaiin.protos.node.service.get_links_resp.LinksEntry
	(*subscribe.Link)(nil),         // 8: yuhaiin.subscribe.link
	(tag.Type)(0),                  // 9: yuhaiin.tag.type
	(*wrapperspb.StringValue)(nil), // 10: google.protobuf.StringValue
	(*point.Point)(nil),            // 11: yuhaiin.point.point
	(*latency.Requests)(nil),       // 12: yuhaiin.latency.requests
	(*emptypb.Empty)(nil),          // 13: google.protobuf.Empty
	(*node.Manager)(nil),           // 14: yuhaiin.node.manager
	(*latency.Response)(nil),       // 15: yuhaiin.latency.response
}
var file_node_grpc_node_proto_depIdxs = []int32{
	0,  // 0: yuhaiin.protos.node.service.now_req.net:type_name -> yuhaiin.protos.node.service.now_req.net_type
	8,  // 1: yuhaiin.protos.node.service.save_link_req.links:type_name -> yuhaiin.subscribe.link
	7,  // 2: yuhaiin.protos.node.service.get_links_resp.links:type_name -> yuhaiin.protos.node.service.get_links_resp.LinksEntry
	9,  // 3: yuhaiin.protos.node.service.save_tag_req.type:type_name -> yuhaiin.tag.type
	8,  // 4: yuhaiin.protos.node.service.get_links_resp.LinksEntry.value:type_name -> yuhaiin.subscribe.link
	2,  // 5: yuhaiin.protos.node.service.node.now:input_type -> yuhaiin.protos.node.service.now_req
	1,  // 6: yuhaiin.protos.node.service.node.use:input_type -> yuhaiin.protos.node.service.use_req
	10, // 7: yuhaiin.protos.node.service.node.get:input_type -> google.protobuf.StringValue
	11, // 8: yuhaiin.protos.node.service.node.save:input_type -> yuhaiin.point.point
	10, // 9: yuhaiin.protos.node.service.node.remove:input_type -> google.protobuf.StringValue
	10, // 10: yuhaiin.protos.node.service.node.manager:input_type -> google.protobuf.StringValue
	12, // 11: yuhaiin.protos.node.service.node.latency:input_type -> yuhaiin.latency.requests
	3,  // 12: yuhaiin.protos.node.service.subscribe.save:input_type -> yuhaiin.protos.node.service.save_link_req
	4,  // 13: yuhaiin.protos.node.service.subscribe.remove:input_type -> yuhaiin.protos.node.service.link_req
	4,  // 14: yuhaiin.protos.node.service.subscribe.update:input_type -> yuhaiin.protos.node.service.link_req
	13, // 15: yuhaiin.protos.node.service.subscribe.get:input_type -> google.protobuf.Empty
	6,  // 16: yuhaiin.protos.node.service.tag.save:input_type -> yuhaiin.protos.node.service.save_tag_req
	10, // 17: yuhaiin.protos.node.service.tag.remove:input_type -> google.protobuf.StringValue
	11, // 18: yuhaiin.protos.node.service.node.now:output_type -> yuhaiin.point.point
	11, // 19: yuhaiin.protos.node.service.node.use:output_type -> yuhaiin.point.point
	11, // 20: yuhaiin.protos.node.service.node.get:output_type -> yuhaiin.point.point
	11, // 21: yuhaiin.protos.node.service.node.save:output_type -> yuhaiin.point.point
	13, // 22: yuhaiin.protos.node.service.node.remove:output_type -> google.protobuf.Empty
	14, // 23: yuhaiin.protos.node.service.node.manager:output_type -> yuhaiin.node.manager
	15, // 24: yuhaiin.protos.node.service.node.latency:output_type -> yuhaiin.latency.response
	13, // 25: yuhaiin.protos.node.service.subscribe.save:output_type -> google.protobuf.Empty
	13, // 26: yuhaiin.protos.node.service.subscribe.remove:output_type -> google.protobuf.Empty
	13, // 27: yuhaiin.protos.node.service.subscribe.update:output_type -> google.protobuf.Empty
	5,  // 28: yuhaiin.protos.node.service.subscribe.get:output_type -> yuhaiin.protos.node.service.get_links_resp
	13, // 29: yuhaiin.protos.node.service.tag.save:output_type -> google.protobuf.Empty
	13, // 30: yuhaiin.protos.node.service.tag.remove:output_type -> google.protobuf.Empty
	18, // [18:31] is the sub-list for method output_type
	5,  // [5:18] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_node_grpc_node_proto_init() }
func file_node_grpc_node_proto_init() {
	if File_node_grpc_node_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_node_grpc_node_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_grpc_node_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NowReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_grpc_node_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveLinkReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_grpc_node_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_grpc_node_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLinksResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_grpc_node_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveTagReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_node_grpc_node_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_node_grpc_node_proto_goTypes,
		DependencyIndexes: file_node_grpc_node_proto_depIdxs,
		EnumInfos:         file_node_grpc_node_proto_enumTypes,
		MessageInfos:      file_node_grpc_node_proto_msgTypes,
	}.Build()
	File_node_grpc_node_proto = out.File
	file_node_grpc_node_proto_rawDesc = nil
	file_node_grpc_node_proto_goTypes = nil
	file_node_grpc_node_proto_depIdxs = nil
}
