// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.2
// source: node/grpc/node.proto

package service

import (
	node "github.com/Asutorufa/yuhaiin/pkg/protos/node"
	latency "github.com/Asutorufa/yuhaiin/pkg/protos/node/latency"
	point "github.com/Asutorufa/yuhaiin/pkg/protos/node/point"
	subscribe "github.com/Asutorufa/yuhaiin/pkg/protos/node/subscribe"
	tag "github.com/Asutorufa/yuhaiin/pkg/protos/node/tag"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NowResp struct {
	state          protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Tcp *point.Point           `protobuf:"bytes,1,opt,name=tcp"`
	xxx_hidden_Udp *point.Point           `protobuf:"bytes,2,opt,name=udp"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *NowResp) Reset() {
	*x = NowResp{}
	mi := &file_node_grpc_node_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NowResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NowResp) ProtoMessage() {}

func (x *NowResp) ProtoReflect() protoreflect.Message {
	mi := &file_node_grpc_node_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *NowResp) GetTcp() *point.Point {
	if x != nil {
		return x.xxx_hidden_Tcp
	}
	return nil
}

func (x *NowResp) GetUdp() *point.Point {
	if x != nil {
		return x.xxx_hidden_Udp
	}
	return nil
}

func (x *NowResp) SetTcp(v *point.Point) {
	x.xxx_hidden_Tcp = v
}

func (x *NowResp) SetUdp(v *point.Point) {
	x.xxx_hidden_Udp = v
}

func (x *NowResp) HasTcp() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Tcp != nil
}

func (x *NowResp) HasUdp() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Udp != nil
}

func (x *NowResp) ClearTcp() {
	x.xxx_hidden_Tcp = nil
}

func (x *NowResp) ClearUdp() {
	x.xxx_hidden_Udp = nil
}

type NowResp_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Tcp *point.Point
	Udp *point.Point
}

func (b0 NowResp_builder) Build() *NowResp {
	m0 := &NowResp{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Tcp = b.Tcp
	x.xxx_hidden_Udp = b.Udp
	return m0
}

type UseReq struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Tcp         bool                   `protobuf:"varint,1,opt,name=tcp"`
	xxx_hidden_Udp         bool                   `protobuf:"varint,2,opt,name=udp"`
	xxx_hidden_Hash        *string                `protobuf:"bytes,3,opt,name=hash"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *UseReq) Reset() {
	*x = UseReq{}
	mi := &file_node_grpc_node_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseReq) ProtoMessage() {}

func (x *UseReq) ProtoReflect() protoreflect.Message {
	mi := &file_node_grpc_node_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *UseReq) GetTcp() bool {
	if x != nil {
		return x.xxx_hidden_Tcp
	}
	return false
}

func (x *UseReq) GetUdp() bool {
	if x != nil {
		return x.xxx_hidden_Udp
	}
	return false
}

func (x *UseReq) GetHash() string {
	if x != nil {
		if x.xxx_hidden_Hash != nil {
			return *x.xxx_hidden_Hash
		}
		return ""
	}
	return ""
}

func (x *UseReq) SetTcp(v bool) {
	x.xxx_hidden_Tcp = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *UseReq) SetUdp(v bool) {
	x.xxx_hidden_Udp = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *UseReq) SetHash(v string) {
	x.xxx_hidden_Hash = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *UseReq) HasTcp() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *UseReq) HasUdp() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *UseReq) HasHash() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *UseReq) ClearTcp() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Tcp = false
}

func (x *UseReq) ClearUdp() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Udp = false
}

func (x *UseReq) ClearHash() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Hash = nil
}

type UseReq_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Tcp  *bool
	Udp  *bool
	Hash *string
}

func (b0 UseReq_builder) Build() *UseReq {
	m0 := &UseReq{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Tcp != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_Tcp = *b.Tcp
	}
	if b.Udp != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_Udp = *b.Udp
	}
	if b.Hash != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_Hash = b.Hash
	}
	return m0
}

type NodesResponse struct {
	state             protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Groups map[string]*node.Nodes `protobuf:"bytes,1,rep,name=groups" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *NodesResponse) Reset() {
	*x = NodesResponse{}
	mi := &file_node_grpc_node_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodesResponse) ProtoMessage() {}

func (x *NodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_grpc_node_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *NodesResponse) GetGroups() map[string]*node.Nodes {
	if x != nil {
		return x.xxx_hidden_Groups
	}
	return nil
}

func (x *NodesResponse) SetGroups(v map[string]*node.Nodes) {
	x.xxx_hidden_Groups = v
}

type NodesResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Groups map[string]*node.Nodes
}

func (b0 NodesResponse_builder) Build() *NodesResponse {
	m0 := &NodesResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Groups = b.Groups
	return m0
}

type ActivatesResponse struct {
	state            protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Nodes *[]*point.Point        `protobuf:"bytes,1,rep,name=nodes"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ActivatesResponse) Reset() {
	*x = ActivatesResponse{}
	mi := &file_node_grpc_node_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivatesResponse) ProtoMessage() {}

func (x *ActivatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_grpc_node_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ActivatesResponse) GetNodes() []*point.Point {
	if x != nil {
		if x.xxx_hidden_Nodes != nil {
			return *x.xxx_hidden_Nodes
		}
	}
	return nil
}

func (x *ActivatesResponse) SetNodes(v []*point.Point) {
	x.xxx_hidden_Nodes = &v
}

type ActivatesResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Nodes []*point.Point
}

func (b0 ActivatesResponse_builder) Build() *ActivatesResponse {
	m0 := &ActivatesResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Nodes = &b.Nodes
	return m0
}

type SaveLinkReq struct {
	state            protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Links *[]*subscribe.Link     `protobuf:"bytes,1,rep,name=links"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SaveLinkReq) Reset() {
	*x = SaveLinkReq{}
	mi := &file_node_grpc_node_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveLinkReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveLinkReq) ProtoMessage() {}

func (x *SaveLinkReq) ProtoReflect() protoreflect.Message {
	mi := &file_node_grpc_node_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SaveLinkReq) GetLinks() []*subscribe.Link {
	if x != nil {
		if x.xxx_hidden_Links != nil {
			return *x.xxx_hidden_Links
		}
	}
	return nil
}

func (x *SaveLinkReq) SetLinks(v []*subscribe.Link) {
	x.xxx_hidden_Links = &v
}

type SaveLinkReq_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Links []*subscribe.Link
}

func (b0 SaveLinkReq_builder) Build() *SaveLinkReq {
	m0 := &SaveLinkReq{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Links = &b.Links
	return m0
}

type LinkReq struct {
	state            protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Names []string               `protobuf:"bytes,1,rep,name=names"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *LinkReq) Reset() {
	*x = LinkReq{}
	mi := &file_node_grpc_node_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinkReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkReq) ProtoMessage() {}

func (x *LinkReq) ProtoReflect() protoreflect.Message {
	mi := &file_node_grpc_node_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *LinkReq) GetNames() []string {
	if x != nil {
		return x.xxx_hidden_Names
	}
	return nil
}

func (x *LinkReq) SetNames(v []string) {
	x.xxx_hidden_Names = v
}

type LinkReq_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Names []string
}

func (b0 LinkReq_builder) Build() *LinkReq {
	m0 := &LinkReq{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Names = b.Names
	return m0
}

type GetLinksResp struct {
	state            protoimpl.MessageState     `protogen:"opaque.v1"`
	xxx_hidden_Links map[string]*subscribe.Link `protobuf:"bytes,1,rep,name=links" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetLinksResp) Reset() {
	*x = GetLinksResp{}
	mi := &file_node_grpc_node_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLinksResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLinksResp) ProtoMessage() {}

func (x *GetLinksResp) ProtoReflect() protoreflect.Message {
	mi := &file_node_grpc_node_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetLinksResp) GetLinks() map[string]*subscribe.Link {
	if x != nil {
		return x.xxx_hidden_Links
	}
	return nil
}

func (x *GetLinksResp) SetLinks(v map[string]*subscribe.Link) {
	x.xxx_hidden_Links = v
}

type GetLinksResp_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Links map[string]*subscribe.Link
}

func (b0 GetLinksResp_builder) Build() *GetLinksResp {
	m0 := &GetLinksResp{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Links = b.Links
	return m0
}

type SaveTagReq struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Tag         *string                `protobuf:"bytes,1,opt,name=tag"`
	xxx_hidden_Type        tag.TagType            `protobuf:"varint,3,opt,name=type,enum=yuhaiin.tag.TagType"`
	xxx_hidden_Hash        *string                `protobuf:"bytes,2,opt,name=hash"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *SaveTagReq) Reset() {
	*x = SaveTagReq{}
	mi := &file_node_grpc_node_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveTagReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveTagReq) ProtoMessage() {}

func (x *SaveTagReq) ProtoReflect() protoreflect.Message {
	mi := &file_node_grpc_node_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SaveTagReq) GetTag() string {
	if x != nil {
		if x.xxx_hidden_Tag != nil {
			return *x.xxx_hidden_Tag
		}
		return ""
	}
	return ""
}

func (x *SaveTagReq) GetType() tag.TagType {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 1) {
			return x.xxx_hidden_Type
		}
	}
	return tag.TagType(0)
}

func (x *SaveTagReq) GetHash() string {
	if x != nil {
		if x.xxx_hidden_Hash != nil {
			return *x.xxx_hidden_Hash
		}
		return ""
	}
	return ""
}

func (x *SaveTagReq) SetTag(v string) {
	x.xxx_hidden_Tag = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *SaveTagReq) SetType(v tag.TagType) {
	x.xxx_hidden_Type = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *SaveTagReq) SetHash(v string) {
	x.xxx_hidden_Hash = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *SaveTagReq) HasTag() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *SaveTagReq) HasType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *SaveTagReq) HasHash() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *SaveTagReq) ClearTag() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Tag = nil
}

func (x *SaveTagReq) ClearType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Type = tag.TagType_node
}

func (x *SaveTagReq) ClearHash() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Hash = nil
}

type SaveTagReq_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Tag  *string
	Type *tag.TagType
	Hash *string
}

func (b0 SaveTagReq_builder) Build() *SaveTagReq {
	m0 := &SaveTagReq{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Tag != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_Tag = b.Tag
	}
	if b.Type != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_Type = *b.Type
	}
	if b.Hash != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_Hash = b.Hash
	}
	return m0
}

type TagsResponse struct {
	state           protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Tags map[string]*tag.Tags   `protobuf:"bytes,1,rep,name=tags" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TagsResponse) Reset() {
	*x = TagsResponse{}
	mi := &file_node_grpc_node_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagsResponse) ProtoMessage() {}

func (x *TagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_grpc_node_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TagsResponse) GetTags() map[string]*tag.Tags {
	if x != nil {
		return x.xxx_hidden_Tags
	}
	return nil
}

func (x *TagsResponse) SetTags(v map[string]*tag.Tags) {
	x.xxx_hidden_Tags = v
}

type TagsResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Tags map[string]*tag.Tags
}

func (b0 TagsResponse_builder) Build() *TagsResponse {
	m0 := &TagsResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Tags = b.Tags
	return m0
}

var File_node_grpc_node_proto protoreflect.FileDescriptor

var file_node_grpc_node_proto_rawDesc = string([]byte{
	0x0a, 0x14, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x16, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6e, 0x6f, 0x64, 0x65, 0x2f,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x6e, 0x6f, 0x64, 0x65, 0x2f,
	0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x74, 0x61, 0x67, 0x2f,
	0x74, 0x61, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x6f, 0x5f, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5a, 0x0a, 0x08,
	0x6e, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x12, 0x26, 0x0a, 0x03, 0x74, 0x63, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x03, 0x74, 0x63, 0x70,
	0x12, 0x26, 0x0a, 0x03, 0x75, 0x64, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x03, 0x75, 0x64, 0x70, 0x22, 0x41, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x5f,
	0x72, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x63, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x03, 0x74, 0x63, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x64, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x03, 0x75, 0x64, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0xb1, 0x01, 0x0a, 0x0e,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f,
	0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x1a,
	0x4e, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x40, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x22, 0x3e, 0x0a, 0x0d, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x72,
	0x65, 0x71, 0x12, 0x2d, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b,
	0x73, 0x22, 0x20, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x12, 0x4c, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6c,
	0x69, 0x6e, 0x6b, 0x73, 0x1a, 0x51, 0x0a, 0x0a, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5f, 0x0a, 0x0c, 0x73, 0x61, 0x76, 0x65, 0x5f,
	0x74, 0x61, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69,
	0x6e, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0xa5, 0x01, 0x0a, 0x0d, 0x74, 0x61, 0x67,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x1a, 0x4a, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x74, 0x61, 0x67,
	0x2e, 0x74, 0x61, 0x67, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x32, 0xe1, 0x04, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x03, 0x6e, 0x6f, 0x77,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x25, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6e, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x12,
	0x41, 0x0a, 0x03, 0x75, 0x73, 0x65, 0x12, 0x24, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x79,
	0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x39, 0x0a, 0x03, 0x67, 0x65, 0x74, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x14, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69,
	0x6e, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x32, 0x0a,
	0x04, 0x73, 0x61, 0x76, 0x65, 0x12, 0x14, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x1a, 0x14, 0x2e, 0x79, 0x75,
	0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x3e, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x4b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x2b, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54,
	0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x2f, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x3f, 0x0a, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x19,
	0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x1a, 0x19, 0x2e, 0x79, 0x75, 0x68, 0x61,
	0x69, 0x69, 0x6e, 0x2e, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0xb5, 0x02, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x12, 0x4a, 0x0a, 0x04, 0x73, 0x61, 0x76, 0x65, 0x12, 0x2a, 0x2e, 0x79, 0x75, 0x68,
	0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x47,
	0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x25, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x47, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x25, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x4a, 0x0a, 0x03, 0x67, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x2b, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x65,
	0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x32, 0xdc, 0x01, 0x0a,
	0x03, 0x74, 0x61, 0x67, 0x12, 0x49, 0x0a, 0x04, 0x73, 0x61, 0x76, 0x65, 0x12, 0x29, 0x2e, 0x79,
	0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61, 0x76, 0x65, 0x5f,
	0x74, 0x61, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x3e, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x4a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x2a, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x61,
	0x67, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3e, 0x5a, 0x34, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x73, 0x75, 0x74, 0x6f, 0x72,
	0x75, 0x66, 0x61, 0x2f, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x92, 0x03, 0x05, 0xd2, 0x3e, 0x02, 0x10, 0x03, 0x62, 0x08, 0x65, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0xe8, 0x07,
})

var file_node_grpc_node_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_node_grpc_node_proto_goTypes = []any{
	(*NowResp)(nil),                // 0: yuhaiin.protos.node.service.now_resp
	(*UseReq)(nil),                 // 1: yuhaiin.protos.node.service.use_req
	(*NodesResponse)(nil),          // 2: yuhaiin.protos.node.service.nodes_response
	(*ActivatesResponse)(nil),      // 3: yuhaiin.protos.node.service.activates_response
	(*SaveLinkReq)(nil),            // 4: yuhaiin.protos.node.service.save_link_req
	(*LinkReq)(nil),                // 5: yuhaiin.protos.node.service.link_req
	(*GetLinksResp)(nil),           // 6: yuhaiin.protos.node.service.get_links_resp
	(*SaveTagReq)(nil),             // 7: yuhaiin.protos.node.service.save_tag_req
	(*TagsResponse)(nil),           // 8: yuhaiin.protos.node.service.tags_response
	nil,                            // 9: yuhaiin.protos.node.service.nodes_response.GroupsEntry
	nil,                            // 10: yuhaiin.protos.node.service.get_links_resp.LinksEntry
	nil,                            // 11: yuhaiin.protos.node.service.tags_response.TagsEntry
	(*point.Point)(nil),            // 12: yuhaiin.point.point
	(*subscribe.Link)(nil),         // 13: yuhaiin.subscribe.link
	(tag.TagType)(0),               // 14: yuhaiin.tag.tag_type
	(*node.Nodes)(nil),             // 15: yuhaiin.node.nodes
	(*tag.Tags)(nil),               // 16: yuhaiin.tag.tags
	(*emptypb.Empty)(nil),          // 17: google.protobuf.Empty
	(*wrapperspb.StringValue)(nil), // 18: google.protobuf.StringValue
	(*latency.Requests)(nil),       // 19: yuhaiin.latency.requests
	(*latency.Response)(nil),       // 20: yuhaiin.latency.response
}
var file_node_grpc_node_proto_depIdxs = []int32{
	12, // 0: yuhaiin.protos.node.service.now_resp.tcp:type_name -> yuhaiin.point.point
	12, // 1: yuhaiin.protos.node.service.now_resp.udp:type_name -> yuhaiin.point.point
	9,  // 2: yuhaiin.protos.node.service.nodes_response.groups:type_name -> yuhaiin.protos.node.service.nodes_response.GroupsEntry
	12, // 3: yuhaiin.protos.node.service.activates_response.nodes:type_name -> yuhaiin.point.point
	13, // 4: yuhaiin.protos.node.service.save_link_req.links:type_name -> yuhaiin.subscribe.link
	10, // 5: yuhaiin.protos.node.service.get_links_resp.links:type_name -> yuhaiin.protos.node.service.get_links_resp.LinksEntry
	14, // 6: yuhaiin.protos.node.service.save_tag_req.type:type_name -> yuhaiin.tag.tag_type
	11, // 7: yuhaiin.protos.node.service.tags_response.tags:type_name -> yuhaiin.protos.node.service.tags_response.TagsEntry
	15, // 8: yuhaiin.protos.node.service.nodes_response.GroupsEntry.value:type_name -> yuhaiin.node.nodes
	13, // 9: yuhaiin.protos.node.service.get_links_resp.LinksEntry.value:type_name -> yuhaiin.subscribe.link
	16, // 10: yuhaiin.protos.node.service.tags_response.TagsEntry.value:type_name -> yuhaiin.tag.tags
	17, // 11: yuhaiin.protos.node.service.node.now:input_type -> google.protobuf.Empty
	1,  // 12: yuhaiin.protos.node.service.node.use:input_type -> yuhaiin.protos.node.service.use_req
	18, // 13: yuhaiin.protos.node.service.node.get:input_type -> google.protobuf.StringValue
	12, // 14: yuhaiin.protos.node.service.node.save:input_type -> yuhaiin.point.point
	18, // 15: yuhaiin.protos.node.service.node.remove:input_type -> google.protobuf.StringValue
	17, // 16: yuhaiin.protos.node.service.node.list:input_type -> google.protobuf.Empty
	17, // 17: yuhaiin.protos.node.service.node.activates:input_type -> google.protobuf.Empty
	18, // 18: yuhaiin.protos.node.service.node.close:input_type -> google.protobuf.StringValue
	19, // 19: yuhaiin.protos.node.service.node.latency:input_type -> yuhaiin.latency.requests
	4,  // 20: yuhaiin.protos.node.service.subscribe.save:input_type -> yuhaiin.protos.node.service.save_link_req
	5,  // 21: yuhaiin.protos.node.service.subscribe.remove:input_type -> yuhaiin.protos.node.service.link_req
	5,  // 22: yuhaiin.protos.node.service.subscribe.update:input_type -> yuhaiin.protos.node.service.link_req
	17, // 23: yuhaiin.protos.node.service.subscribe.get:input_type -> google.protobuf.Empty
	7,  // 24: yuhaiin.protos.node.service.tag.save:input_type -> yuhaiin.protos.node.service.save_tag_req
	18, // 25: yuhaiin.protos.node.service.tag.remove:input_type -> google.protobuf.StringValue
	17, // 26: yuhaiin.protos.node.service.tag.list:input_type -> google.protobuf.Empty
	0,  // 27: yuhaiin.protos.node.service.node.now:output_type -> yuhaiin.protos.node.service.now_resp
	12, // 28: yuhaiin.protos.node.service.node.use:output_type -> yuhaiin.point.point
	12, // 29: yuhaiin.protos.node.service.node.get:output_type -> yuhaiin.point.point
	12, // 30: yuhaiin.protos.node.service.node.save:output_type -> yuhaiin.point.point
	17, // 31: yuhaiin.protos.node.service.node.remove:output_type -> google.protobuf.Empty
	2,  // 32: yuhaiin.protos.node.service.node.list:output_type -> yuhaiin.protos.node.service.nodes_response
	3,  // 33: yuhaiin.protos.node.service.node.activates:output_type -> yuhaiin.protos.node.service.activates_response
	17, // 34: yuhaiin.protos.node.service.node.close:output_type -> google.protobuf.Empty
	20, // 35: yuhaiin.protos.node.service.node.latency:output_type -> yuhaiin.latency.response
	17, // 36: yuhaiin.protos.node.service.subscribe.save:output_type -> google.protobuf.Empty
	17, // 37: yuhaiin.protos.node.service.subscribe.remove:output_type -> google.protobuf.Empty
	17, // 38: yuhaiin.protos.node.service.subscribe.update:output_type -> google.protobuf.Empty
	6,  // 39: yuhaiin.protos.node.service.subscribe.get:output_type -> yuhaiin.protos.node.service.get_links_resp
	17, // 40: yuhaiin.protos.node.service.tag.save:output_type -> google.protobuf.Empty
	17, // 41: yuhaiin.protos.node.service.tag.remove:output_type -> google.protobuf.Empty
	8,  // 42: yuhaiin.protos.node.service.tag.list:output_type -> yuhaiin.protos.node.service.tags_response
	27, // [27:43] is the sub-list for method output_type
	11, // [11:27] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_node_grpc_node_proto_init() }
func file_node_grpc_node_proto_init() {
	if File_node_grpc_node_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_node_grpc_node_proto_rawDesc), len(file_node_grpc_node_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_node_grpc_node_proto_goTypes,
		DependencyIndexes: file_node_grpc_node_proto_depIdxs,
		MessageInfos:      file_node_grpc_node_proto_msgTypes,
	}.Build()
	File_node_grpc_node_proto = out.File
	file_node_grpc_node_proto_goTypes = nil
	file_node_grpc_node_proto_depIdxs = nil
}
