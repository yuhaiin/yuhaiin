edition = "2023";

package yuhaiin.bypass;
import "google/protobuf/go_features.proto";

option go_package = "github.com/Asutorufa/yuhaiin/pkg/protos/config";
option features.(pb.go).api_level = API_OPAQUE;

enum mode {
  bypass = 0;
  direct = 1;
  proxy = 2;
  block = 3;
}

message configv2 {
  udp_proxy_fqdn_strategy udp_proxy_fqdn = 1 [ json_name = "udp_proxy_fqdn" ];
  bool resolve_locally = 2 [ json_name = "resolve_locally" ];
  string direct_resolver = 3 [ json_name = "direct_resolver" ];
  string proxy_resolver = 4 [ json_name = "proxy_resolver" ];
}

message bypass_config {
  mode tcp = 3 [ json_name = "tcp", deprecated = true ];
  mode udp = 4 [ json_name = "udp", deprecated = true ];
  string bypass_file = 2 [ json_name = "bypass_file", deprecated = true ];
  udp_proxy_fqdn_strategy udp_proxy_fqdn = 6 [ json_name = "udp_proxy_fqdn" ];
  repeated mode_config custom_rule_v3 = 7
      [ json_name = "custom_rule_v3", deprecated = true ];
  repeated remote_rule remote_rules = 8
      [ json_name = "remote_rules", deprecated = true ];
  // resolve domain locally
  bool resolve_locally = 9 [ json_name = "resolve_locally" ];
  string direct_resolver = 10 [ json_name = "direct_resolver" ];
  string proxy_resolver = 11 [ json_name = "proxy_resolver" ];

  bool enabled_v2 = 14 [ json_name = "enabled_v2", deprecated = true ];
  repeated rulev2 rules_v2 = 12 [ json_name = "rules_v2" ];
  map<string, list> lists = 13 [ json_name = "lists" ];
  uint64 refresh_interval = 15 [ json_name = "refresh_interval" ];
}

enum resolve_strategy {
  default = 0;
  prefer_ipv4 = 1;
  only_ipv4 = 2;
  prefer_ipv6 = 3;
  only_ipv6 = 4;
}

enum udp_proxy_fqdn_strategy {
  udp_proxy_fqdn_strategy_default = 0;
  resolve = 1;
  skip_resolve = 2;
}

message mode_config {
  reserved 5;
  reserved udp_proxy_fqdn;
  mode mode = 1 [ json_name = "mode" ];
  string tag = 2 [ json_name = "tag" ];
  repeated string hostname = 3 [ json_name = "hostname" ];
  resolve_strategy resolve_strategy = 4 [ json_name = "resolve_strategy" ];
  udp_proxy_fqdn_strategy udp_proxy_fqdn_strategy = 6
      [ json_name = "udp_proxy_fqdn_strategy" ];
  string resolver = 8 [ json_name = "resolver" ];
  map<string, string> error_msgs = 7 [ json_name = "error_msg" ];
}

message remote_rule {
  bool enabled = 1 [ json_name = "enabled" ];
  string name = 2 [ json_name = "name" ];
  oneof object {
    remote_rule_file file = 3 [ json_name = "file" ];
    remote_rule_http http = 4 [ json_name = "http" ];
  }
  // error message when rules can't get from remote
  string error_msg = 5 [ json_name = "error_msg" ];
  mode_config default_mode = 6 [ json_name = "default_mode" ];
}

message remote_rule_file { string path = 1 [ json_name = "path" ]; }

message remote_rule_http {
  string url = 1 [ json_name = "url" ];
  // method of http request, default: GET
  string method = 2 [ json_name = "method" ];
}

message host { string list = 1 [ json_name = "list" ]; }
message process { string list = 1 [ json_name = "list" ]; }

message source {
  string name = 1 [ json_name = "name" ];
  repeated string names = 2 [ json_name = "names" ];
}

message port {
  // ports splite by ',', e.g. "80,443"
  string ports = 1 [ json_name = "ports" ];
}

message rule {
  oneof object {
    host host = 1 [ json_name = "host" ];
    process process = 2 [ json_name = "process" ];
    source inbound = 3 [ json_name = "inbound" ];
    network network = 4 [ json_name = "network" ];
    port port = 5 [ json_name = "port" ];
  }
}

message network {
  enum network_type {
    unknown = 0;
    tcp = 1;
    udp = 2;
  }

  network_type network = 1 [ json_name = "network" ];
}

message or { repeated rule rules = 1 [ json_name = "rules" ]; }

message rulev2 {
  string name = 1 [ json_name = "name" ];
  mode mode = 2 [ json_name = "mode" ];
  string tag = 3 [ json_name = "tag" ];
  resolve_strategy resolve_strategy = 4 [ json_name = "resolve_strategy" ];
  udp_proxy_fqdn_strategy udp_proxy_fqdn_strategy = 5
      [ json_name = "udp_proxy_fqdn_strategy" ];
  string resolver = 6 [ json_name = "resolver" ];
  repeated or rules = 7 [ json_name = "rules" ];
}

message list {
  enum list_type_enum {
    host = 0;
    process = 1;
    // parse hosts file, and just use domain as host list
    hosts_as_host = 2;
  }

  list_type_enum list_type = 1 [ json_name = "type" ];
  string name = 2 [ json_name = "name" ];
  oneof list {
    list_local local = 3 [ json_name = "local" ];
    list_remote remote = 4 [ json_name = "remote" ];
  }
  repeated string error_msgs = 5 [ json_name = "error_msgs" ];
}

message list_local { repeated string lists = 1 [ json_name = "lists" ]; }
message list_remote { repeated string urls = 1 [ json_name = "urls" ]; }
