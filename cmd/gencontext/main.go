package main

import (
	"fmt"
	"go/format"
	"os"
	"reflect"
	"strings"

	"github.com/Asutorufa/yuhaiin/pkg/net/netapi"
)

func main() {
	data, err := generate(&netapi.Context{})
	if err != nil {
		panic(err)
	}

	err = os.WriteFile("context.gen.go", data, 0o644)
	if err != nil {
		panic(err)
	}

	fmt.Println(string(data))
}

func generate(c *netapi.Context) ([]byte, error) {
	values := reflect.ValueOf(*c)
	types := values.Type()

	// maps := make(map[string]string)

	var str strings.Builder

	count := 0
	for i := range values.NumField() {
		tf := types.Field(i)
		k := tf.Tag.Get("metrics")
		if k == "" || k == "-" {
			continue
		}

		v, ok := toString(k, "t."+tf.Name, tf.Type)
		if !ok {
			continue
		}

		count++
		str.WriteString(v)

	}

	return format.Source([]byte(fmt.Sprintf(`
// Code generated by gencontext; DO NOT EDIT.
package netapi

import (
	"fmt"
)

func (t *Context) Map() map[string]string {
	maps := make(map[string]string, %d)

%s

	return maps
}
	`, count-1, str.String()))) // count - 1 remove component
}

var (
	StringerInterface = `
if %s != nil {
	%s := %s.String()
	if %s != "" {
		maps["%s"] = %s
	}
}
`

	StringerNormal = `
	%s := %s.String()
if  %s != "" {
	maps["%s"] = %s
}
`

	String = `
if %s != "" {
	maps["%s"] = %s
}
`

	Number = `
if %s != 0 {
	maps["%s"] = fmt.Sprint(%s)
}
`
)

func Stringer(k, str string, t reflect.Type) string {
	if t.Kind() == reflect.Interface {
		return fmt.Sprintf(StringerInterface, str, k, str, k, k, k)
	} else {
		return fmt.Sprintf(StringerNormal, k, str, k, k, k)
	}
}

func toString(k, str string, t reflect.Type) (string, bool) {
	switch t.Kind() {
	case reflect.String:
		return fmt.Sprintf(String, str, k, str), true
	default:
		if t.Implements(reflect.TypeOf((*fmt.Stringer)(nil)).Elem()) {
			return Stringer(k, str, t), true
		}

	}

	switch t.Kind() {
	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64,
		reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:
		return fmt.Sprintf(Number, str, k, str), true
	}

	return "", false
}
