name: Go

on:
  push:
    branches: [main]
    tags: [v*]
  pull_request:
    branches: [main]

permissions:
  contents: write

jobs:
  get_version:
    outputs:
      front_version: ${{ steps.get-version.outputs.front_version }}
    runs-on: ubuntu-latest
    steps:
      - id: get-version
        run: |
          echo "front_version=$(git ls-remote https://github.com/yuhaiin/yuhaiin.github.io.git | grep refs/heads/main | cut -f1)" >> $GITHUB_OUTPUT

  android:
    needs: get_version
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: "0"
          fetch-tags: "true"

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          check-latest: true
          go-version: 'stable'
          # go-version-file: "go.mod"

      - name: set up JDK 17
        uses: actions/setup-java@v5
        with:
          java-version: "17"
          distribution: "temurin"

      - name: build yuhaiin aar
        run: |
          go get -v -u github.com/yuhaiin/yuhaiin.github.io@${{ needs.get_version.outputs.front_version }}
          go env
          go install golang.org/x/mobile/cmd/gomobile@latest
          gomobile init
          make yuhaiin_android_aar

      - name: upload_android_aar
        uses: actions/upload-artifact@v4
        with:
          name: yuhaiin.aar
          path: yuhaiin.aar

  build:
    needs: get_version
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        env:
          [
            [linux, "amd64"],
            [linux, "amd64v3"],
            [linux, "amd64v4"],
            [linux, "arm64"],
            [linux, "mipsle"],
            [android, "arm64"],
            [darwin, "amd64"],
            [darwin, "amd64v3"],
            [darwin, "amd64v4"],
            [darwin, "arm64"],
            [freebsd, "amd64"],
            [freebsd, "amd64v3"],
            [freebsd, "amd64v4"],
            [freebsd, "arm64"],
            [openbsd, "amd64"],
            [openbsd, "amd64v3"],
            [openbsd, "amd64v4"],
            [openbsd, "arm64"],
            [windows, "amd64"],
            [windows, "amd64v3"],
            [windows, "amd64v4"],
            [windows, "arm64"],
          ]
        cmd: [yuhaiin]

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: "0"
          fetch-tags: "true"

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          check-latest: true
          go-version: 'stable'
          # go-version-file: "go.mod"

      # - name: Set up Upx
      #   run: |
      #     sudo apt update
      #     sudo apt install -y upx

      # if [ ${{ matrix.os[0] }} != "darwin" ]; then
      # upx --lzma --best ${{ matrix.cmd }}_${{ matrix.os[0] }}_${{ matrix.arch }}${{ matrix.os[1] }}
      # fi
      - name: Build
        env:
          GOOS: ${{ matrix.env[0] }}
          GOARCH: ${{ fromJSON('{"amd64v3":"amd64","amd64v4":"amd64"}')[matrix.env[1]] || matrix.env[1] }}
          GOAMD64: ${{ fromJSON('{"amd64v3":"v3","amd64v4":"v4"}')[matrix.env[1]] || '' }}
          GOMIPS: ${{ matrix.env[1] == 'mipsle' && 'softfloat' || '' }}
        run: |
          go get -v -u github.com/yuhaiin/yuhaiin.github.io@${{ needs.get_version.outputs.front_version }}
          make ${{ matrix.cmd }}
          mv yuhaiin${{ matrix.env[0] == 'windows' && '.exe' || '' }} yuhaiin-${{ matrix.env[0] }}-${{ matrix.env[1] }}${{ matrix.env[0] == 'windows' && '.exe' || '' }}

      - name: upload_${{ matrix.cmd }}_${{ matrix.env[0] }}_${{ matrix.env[1] }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.cmd }}_${{ matrix.env[0] }}_${{ matrix.env[1] }}
          path: |
            yuhaiin-${{ matrix.env[0] }}-${{ matrix.env[1] }}${{ matrix.env[0] == 'windows' && '.exe' || '' }}

  release:
    if: github.ref_type == 'tag' || (github.ref_type == 'branch' && github.ref_name == 'main')
    needs: 
      - build
      - android
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: "0"
          fetch-tags: "true"

      - id: generate-release-notes
        run: |
          git log $(git describe --tags --abbrev=0 --exclude=$(git describe --tags))..$(git describe --tags) --oneline > release_notes.txt

      - name: download_artifacts
        id: download-artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          body_path: release_notes.txt
          name: ${{ github.ref_type == 'tag' && github.ref_name || 'draft release' }}
          draft: ${{ github.ref_type != 'tag' }}
          make_latest: ${{ github.ref_type == 'tag' && !contains(github.ref_name, 'beta') && !contains(github.ref_name, 'alpha') }}
          prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}
          # see: https://github.com/softprops/action-gh-release/issues/79#issuecomment-930339070
          files: |
            release_notes.txt
            artifacts/*/*
